<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/project_name/club/club_management_erd.dbml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/club_management_erd.dbml" />
              <option name="originalContent" value="// ERD for Club Management System in DBML format&#10;&#10;Table Person {&#10;  id integer [primary key]&#10;  first_name varchar(100)&#10;  last_name varchar(100)&#10;  date_of_birth date&#10;  social_security_number varchar(20) [unique, not null]&#10;  medicare_card_number varchar(20) [unique]&#10;  telephone_number varchar(20)&#10;  address varchar(255)&#10;  city varchar(100)&#10;  province varchar(100)&#10;  postal_code varchar(10)&#10;  email_address varchar(254) [unique]&#10;&#10;  Note: 'Abstract base model for all person-related entities'&#10;}&#10;&#10;Table Location {&#10;  id integer [primary key]&#10;  type varchar(10) [note: 'Head or Branch']&#10;  name varchar(255) [unique]&#10;  address varchar(255)&#10;  city varchar(100)&#10;  province varchar(100)&#10;  postal_code varchar(10)&#10;  phone_number varchar(20)&#10;  web_address varchar(200)&#10;  max_capacity integer&#10;}&#10;&#10;Table Hobby {&#10;  id integer [primary key]&#10;  name varchar(50) [unique]&#10;}&#10;&#10;Table Log {&#10;  id integer [primary key]&#10;  date datetime [default: `now()`]&#10;  sender varchar(255)&#10;  receiver varchar(254)&#10;  subject varchar(255)&#10;  body_snippet text(100)&#10;&#10;  Note: 'Logs every email generated by the system'&#10;}&#10;&#10;Table Personnel {&#10;  id integer [primary key]&#10;  // Inherits from Person&#10;  first_name varchar(100)&#10;  last_name varchar(100)&#10;  date_of_birth date&#10;  social_security_number varchar(20) [unique, not null]&#10;  medicare_card_number varchar(20) [unique]&#10;  telephone_number varchar(20)&#10;  address varchar(255)&#10;  city varchar(100)&#10;  province varchar(100)&#10;  postal_code varchar(10)&#10;  email_address varchar(254) [unique]&#10;  // Personnel specific fields&#10;  role varchar(50) [note: 'Administrator, General Manager, Coach, etc.']&#10;  mandate varchar(10) [note: 'Volunteer or Salaried']&#10;}&#10;&#10;Table PersonnelAssignment {&#10;  id integer [primary key]&#10;  personnel_id integer [ref: &gt; Personnel.id]&#10;  location_id integer [ref: &gt; Location.id]&#10;  start_date date&#10;  end_date date [null]&#10;&#10;  Note: 'Links personnel to locations with specific dates'&#10;}&#10;&#10;Table FamilyMember {&#10;  id integer [primary key]&#10;  // Inherits from Person&#10;  first_name varchar(100)&#10;  last_name varchar(100)&#10;  date_of_birth date&#10;  social_security_number varchar(20) [unique, not null]&#10;  medicare_card_number varchar(20) [unique]&#10;  telephone_number varchar(20)&#10;  address varchar(255)&#10;  city varchar(100)&#10;  province varchar(100)&#10;  postal_code varchar(10)&#10;  email_address varchar(254) [unique]&#10;  // FamilyMember specific fields&#10;  location_id integer [ref: &gt; Location.id, null]&#10;}&#10;&#10;Table SecondaryFamilyMember {&#10;  id integer [primary key]&#10;  primary_family_member_id integer [ref: &gt; FamilyMember.id]&#10;  first_name varchar(100)&#10;  last_name varchar(100)&#10;  telephone_number varchar(20)&#10;  relationship varchar(50)&#10;&#10;  Note: 'Secondary contacts for family members'&#10;}&#10;&#10;Table ClubMember {&#10;  id integer [primary key]&#10;  // Inherits from Person&#10;  first_name varchar(100)&#10;  last_name varchar(100)&#10;  date_of_birth date&#10;  social_security_number varchar(20) [unique, not null]&#10;  medicare_card_number varchar(20) [unique]&#10;  telephone_number varchar(20)&#10;  address varchar(255)&#10;  city varchar(100)&#10;  province varchar(100)&#10;  postal_code varchar(10)&#10;  email_address varchar(254) [unique]&#10;  // ClubMember specific fields&#10;  membership_number uuid [unique]&#10;  height decimal(5,2)&#10;  weight decimal(5,2)&#10;  location_id integer [ref: &gt; Location.id, null]&#10;  date_joined date [default: `now()`]&#10;  is_active boolean [default: true]&#10;}&#10;&#10;Table ClubMemberHobbies {&#10;  id integer [primary key]&#10;  club_member_id integer [ref: &gt; ClubMember.id]&#10;  hobby_id integer [ref: &gt; Hobby.id]&#10;&#10;  Note: 'Many-to-many relationship between ClubMember and Hobby'&#10;}&#10;&#10;Table MinorMemberAssociation {&#10;  id integer [primary key]&#10;  minor_member_id integer [ref: &gt; ClubMember.id]&#10;  family_member_id integer [ref: &gt; FamilyMember.id]&#10;  relationship varchar(20) [note: 'Father, Mother, Tutor, etc.']&#10;  start_date date&#10;  end_date date [null]&#10;&#10;  Note: 'Links minor club members to family members'&#10;}&#10;&#10;Table Payment {&#10;  id integer [primary key]&#10;  club_member_id integer [ref: &gt; ClubMember.id]&#10;  payment_date date&#10;  amount decimal(10,2)&#10;  method_of_payment varchar(10) [note: 'Cash, Debit, Credit']&#10;  for_year integer&#10;&#10;  Note: 'Records payments made by club members'&#10;}&#10;&#10;Table TeamFormation {&#10;  id integer [primary key]&#10;  location_id integer [ref: &gt; Location.id]&#10;  team_name varchar(100)&#10;  head_coach_id integer [ref: &gt; Personnel.id]&#10;  session_date date&#10;  start_time time&#10;  session_address varchar(255)&#10;  is_game boolean [default: false]&#10;  score_team1 integer [null]&#10;  score_team2 integer [null]&#10;&#10;  Note: 'Represents team formations for games or training sessions'&#10;}&#10;&#10;Table PlayerAssignment {&#10;  id integer [primary key]&#10;  club_member_id integer [ref: &gt; ClubMember.id]&#10;  team_formation_id integer [ref: &gt; TeamFormation.id]&#10;  role varchar(20) [note: 'Setter, Libero, Outside Hitter, etc.']&#10;&#10;  indexes {&#10;    (club_member_id, team_formation_id) [unique]&#10;  }&#10;&#10;  Note: 'Links club members to team formations with assigned roles'&#10;}&#10;&#10;// Relationships Summary:&#10;// 1. Location has many Personnel (through PersonnelAssignment)&#10;// 2. Location has many FamilyMember&#10;// 3. Location has many ClubMember&#10;// 4. Location has many TeamFormation&#10;// 5. Personnel can coach many TeamFormation (as head_coach)&#10;// 6. FamilyMember has many SecondaryFamilyMember&#10;// 7. FamilyMember has many MinorMemberAssociation&#10;// 8. ClubMember has many MinorMemberAssociation&#10;// 9. ClubMember has many Payment&#10;// 10. ClubMember has many PlayerAssignment&#10;// 11. ClubMember has many Hobby (through ClubMemberHobbies)&#10;// 12. TeamFormation has many PlayerAssignment&#10;// 13. Hobby has many ClubMember (through ClubMemberHobbies)&#10;" />
              <option name="updatedContent" value="// ERD for Club Management System in DBML format&#10;&#10;Table Person {&#10;  id integer [primary key]&#10;  first_name varchar(100)&#10;  last_name varchar(100)&#10;  date_of_birth date&#10;  social_security_number varchar(20) [unique, not null]&#10;  medicare_card_number varchar(20) [unique]&#10;  telephone_number varchar(20)&#10;  address varchar(255)&#10;  city varchar(100)&#10;  province varchar(100)&#10;  postal_code varchar(10)&#10;  email_address varchar(254) [unique]&#10;&#10;  Note: 'Abstract base model for all person-related entities'&#10;}&#10;&#10;Table Location {&#10;  id integer [primary key]&#10;  type varchar(10) [note: 'Head or Branch']&#10;  name varchar(255) [unique]&#10;  address varchar(255)&#10;  city varchar(100)&#10;  province varchar(100)&#10;  postal_code varchar(10)&#10;  phone_number varchar(20)&#10;  web_address varchar(200)&#10;  max_capacity integer&#10;}&#10;&#10;Table Hobby {&#10;  id integer [primary key]&#10;  name varchar(50) [unique]&#10;}&#10;&#10;Table Log {&#10;  id integer [primary key]&#10;  date datetime [default: `now()`]&#10;  sender varchar(255)&#10;  receiver varchar(254)&#10;  subject varchar(255)&#10;  body_snippet text(100)&#10;&#10;  Note: 'Logs every email generated by the system'&#10;}&#10;&#10;Table Personnel {&#10;  id integer [primary key]&#10;  // Inherits from Person&#10;  first_name varchar(100)&#10;  last_name varchar(100)&#10;  date_of_birth date&#10;  social_security_number varchar(20) [unique, not null]&#10;  medicare_card_number varchar(20) [unique]&#10;  telephone_number varchar(20)&#10;  address varchar(255)&#10;  city varchar(100)&#10;  province varchar(100)&#10;  postal_code varchar(10)&#10;  email_address varchar(254) [unique]&#10;  // Personnel specific fields&#10;  role varchar(50) [note: 'Administrator, General Manager, Coach, etc.']&#10;  mandate varchar(10) [note: 'Volunteer or Salaried']&#10;}&#10;&#10;Table PersonnelAssignment {&#10;  id integer [primary key]&#10;  personnel_id integer [ref: &gt; Personnel.id]&#10;  location_id integer [ref: &gt; Location.id]&#10;  start_date date&#10;  end_date date [null]&#10;&#10;  Note: 'Links personnel to locations with specific dates'&#10;}&#10;&#10;Table FamilyMember {&#10;  id integer [primary key]&#10;  // Inherits from Person&#10;  first_name varchar(100)&#10;  last_name varchar(100)&#10;  date_of_birth date&#10;  social_security_number varchar(20) [unique, not null]&#10;  medicare_card_number varchar(20) [unique]&#10;  telephone_number varchar(20)&#10;  address varchar(255)&#10;  city varchar(100)&#10;  province varchar(100)&#10;  postal_code varchar(10)&#10;  email_address varchar(254) [unique]&#10;  // FamilyMember specific fields&#10;  location_id integer [ref: &gt; Location.id, null]&#10;}&#10;&#10;Table SecondaryFamilyMember {&#10;  id integer [primary key]&#10;  primary_family_member_id integer [ref: &gt; FamilyMember.id]&#10;  first_name varchar(100)&#10;  last_name varchar(100)&#10;  telephone_number varchar(20)&#10;  relationship varchar(50)&#10;&#10;  Note: 'Secondary contacts for family members'&#10;}&#10;&#10;Table ClubMember {&#10;  id integer [primary key]&#10;  // Inherits from Person&#10;  first_name varchar(100)&#10;  last_name varchar(100)&#10;  date_of_birth date&#10;  social_security_number varchar(20) [unique, not null]&#10;  medicare_card_number varchar(20) [unique]&#10;  telephone_number varchar(20)&#10;  address varchar(255)&#10;  city varchar(100)&#10;  province varchar(100)&#10;  postal_code varchar(10)&#10;  email_address varchar(254) [unique]&#10;  // ClubMember specific fields&#10;  membership_number uuid [unique]&#10;  height decimal(5,2)&#10;  weight decimal(5,2)&#10;  location_id integer [ref: &gt; Location.id, null]&#10;  date_joined date [default: `now()`]&#10;  is_active boolean [default: true]&#10;  gender varchar(1) [note: 'M for Male, F for Female - enforces same-gender teams']&#10;}&#10;&#10;Table ClubMemberHobbies {&#10;  id integer [primary key]&#10;  club_member_id integer [ref: &gt; ClubMember.id]&#10;  hobby_id integer [ref: &gt; Hobby.id]&#10;&#10;  Note: 'Many-to-many relationship between ClubMember and Hobby'&#10;}&#10;&#10;Table MinorMemberAssociation {&#10;  id integer [primary key]&#10;  minor_member_id integer [ref: &gt; ClubMember.id]&#10;  family_member_id integer [ref: &gt; FamilyMember.id]&#10;  relationship varchar(20) [note: 'Father, Mother, Tutor, etc.']&#10;  start_date date&#10;  end_date date [null]&#10;&#10;  Note: 'Links minor club members to family members'&#10;}&#10;&#10;Table Payment {&#10;  id integer [primary key]&#10;  club_member_id integer [ref: &gt; ClubMember.id]&#10;  payment_date date&#10;  amount decimal(10,2)&#10;  method_of_payment varchar(10) [note: 'Cash, Debit, Credit']&#10;  for_year integer&#10;&#10;  Note: 'Records payments made by club members'&#10;}&#10;&#10;Table TeamFormation {&#10;  id integer [primary key]&#10;  location_id integer [ref: &gt; Location.id]&#10;  team_name varchar(100)&#10;  head_coach_id integer [ref: &gt; Personnel.id]&#10;  session_date date&#10;  start_time time&#10;  session_address varchar(255)&#10;  is_game boolean [default: false]&#10;  score_team1 integer [null]&#10;  score_team2 integer [null]&#10;&#10;  Note: 'Represents team formations for games or training sessions'&#10;}&#10;&#10;Table PlayerAssignment {&#10;  id integer [primary key]&#10;  club_member_id integer [ref: &gt; ClubMember.id]&#10;  team_formation_id integer [ref: &gt; TeamFormation.id]&#10;  role varchar(20) [note: 'Setter, Libero, Outside Hitter, etc.']&#10;&#10;  indexes {&#10;    (club_member_id, team_formation_id) [unique]&#10;  }&#10;&#10;  Note: 'Links club members to team formations with assigned roles'&#10;}&#10;&#10;// Relationships Summary:&#10;// 1. Location has many Personnel (through PersonnelAssignment)&#10;// 2. Location has many FamilyMember&#10;// 3. Location has many ClubMember&#10;// 4. Location has many TeamFormation&#10;// 5. Personnel can coach many TeamFormation (as head_coach)&#10;// 6. FamilyMember has many SecondaryFamilyMember&#10;// 7. FamilyMember has many MinorMemberAssociation&#10;// 8. ClubMember has many MinorMemberAssociation&#10;// 9. ClubMember has many Payment&#10;// 10. ClubMember has many PlayerAssignment&#10;// 11. ClubMember has many Hobby (through ClubMemberHobbies)&#10;// 12. TeamFormation has many PlayerAssignment&#10;// 13. Hobby has many ClubMember (through ClubMemberHobbies)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/erd_diagram.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/erd_diagram.txt" />
              <option name="originalContent" value="&#10;2. **PlayerAssignment**:&#10;   - Attributes: club_member, team_formation, role&#10;   - Relationships:&#10;     - `ClubMember` (ForeignKey)&#10;     - `TeamFormation` (ForeignKey, unique_together)&#10;&#10;3. **ClubMember**:&#10;   - Attributes: membership_number, height, weight, hobbies, location, date_joined, is_active&#10;   - Relationships:&#10;     - `Location` (ForeignKey)&#10;     - `Hobby` (ManyToManyField)&#10;&#10;4. **Location**:&#10;   - Attributes: type, name, address, city, province, postal_code, phone_number, web_address, max_capacity&#10;&#10;5. **Log**:&#10;   - Attributes: date, sender, receiver, subject, body_snippet&#10;&#10;Relationships:&#10;- `TeamFormation` -&gt; `Location` (1-to-1)&#10;- `TeamFormation` -&gt; `Personnel` (1-to-1, head_coach)&#10;- `PlayerAssignment` -&gt; `ClubMember` (1-to-1)&#10;- `PlayerAssignment` -&gt; `TeamFormation` (1-to-1)&#10;- `ClubMember` -&gt; `Location` (1-to-1)&#10;- `ClubMember` -&gt; `Hobby` (Many-to-Many)" />
              <option name="updatedContent" value="Entities and Relationships:&#10;&#10;1. **TeamFormation**:&#10;   - Attributes: location, team_name, head_coach, session_date, start_time, session_address, is_game, score_team1, score_team2&#10;   - Relationships:&#10;     - `Location` (ForeignKey)&#10;     - `Personnel` (ForeignKey, head_coach)&#10;     - `PlayerAssignment` (related_name='players')&#10;&#10;2. **PlayerAssignment**:&#10;   - Attributes: club_member, team_formation, role&#10;   - Relationships:&#10;     - `ClubMember` (ForeignKey)&#10;     - `TeamFormation` (ForeignKey, unique_together)&#10;&#10;3. **ClubMember**:&#10;   - Attributes: membership_number, height, weight, hobbies, location, date_joined, is_active&#10;   - Relationships:&#10;     - `Location` (ForeignKey)&#10;     - `Hobby` (ManyToManyField)&#10;&#10;4. **Location**:&#10;   - Attributes: type, name, address, city, province, postal_code, phone_number, web_address, max_capacity&#10;&#10;5. **Log**:&#10;   - Attributes: date, sender, receiver, subject, body_snippet&#10;&#10;Relationships:&#10;- `TeamFormation` -&gt; `Location` (1-to-1)&#10;- `TeamFormation` -&gt; `Personnel` (1-to-1, head_coach)&#10;- `PlayerAssignment` -&gt; `ClubMember` (1-to-1)&#10;- `PlayerAssignment` -&gt; `TeamFormation` (1-to-1)&#10;- `ClubMember` -&gt; `Location` (1-to-1)&#10;- `ClubMember` -&gt; `Hobby` (Many-to-Many)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/forms.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/forms.py" />
              <option name="originalContent" value="from django import forms&#10;from .models import ClubMember, Location, Personnel, FamilyMember, SecondaryFamilyMember, SessionTeams, PlayerAssignment&#10;from datetime import date&#10;&#10;&#10;class PersonnelForm(forms.ModelForm):&#10;    class Meta:&#10;        model = Personnel&#10;        fields = '__all__'&#10;        widgets = {&#10;            'date_of_birth': forms.DateInput(attrs={'type': 'date'}),&#10;            'email_address': forms.EmailInput(),&#10;        }&#10;&#10;    def clean_date_of_birth(self):&#10;        date_of_birth = self.cleaned_data.get('date_of_birth')&#10;        if date_of_birth and date_of_birth &gt; date.today():&#10;            raise forms.ValidationError(&quot;Date of birth cannot be in the future&quot;)&#10;        return date_of_birth&#10;&#10;&#10;class FamilyMemberForm(forms.ModelForm):&#10;    class Meta:&#10;        model = FamilyMember&#10;        fields = '__all__'&#10;        widgets = {&#10;            'date_of_birth': forms.DateInput(attrs={'type': 'date'}),&#10;            'email_address': forms.EmailInput(),&#10;        }&#10;&#10;    def clean_date_of_birth(self):&#10;        date_of_birth = self.cleaned_data.get('date_of_birth')&#10;        if date_of_birth and date_of_birth &gt; date.today():&#10;            raise forms.ValidationError(&quot;Date of birth cannot be in the future&quot;)&#10;        return date_of_birth&#10;&#10;&#10;class SecondaryFamilyMemberForm(forms.ModelForm):&#10;    class Meta:&#10;        model = SecondaryFamilyMember&#10;        fields = '__all__'&#10;&#10;&#10;class ClubMemberForm(forms.ModelForm):&#10;    class Meta:&#10;        model = ClubMember&#10;        exclude = ('membership_number', 'date_joined')&#10;        widgets = {&#10;            'date_of_birth': forms.DateInput(attrs={'type': 'date'}),&#10;            'email_address': forms.EmailInput(),&#10;            'height': forms.NumberInput(attrs={'step': '0.1'}),&#10;            'weight': forms.NumberInput(attrs={'step': '0.1'}),&#10;        }&#10;&#10;    def clean_date_of_birth(self):&#10;        date_of_birth = self.cleaned_data.get('date_of_birth')&#10;        if date_of_birth:&#10;            today = date.today()&#10;            age = today.year - date_of_birth.year - ((today.month, today.day) &lt; (date_of_birth.month, date_of_birth.day))&#10;            if age &lt; 11:&#10;                raise forms.ValidationError(&quot;Club member must be at least 11 years old&quot;)&#10;            if date_of_birth &gt; today:&#10;                raise forms.ValidationError(&quot;Date of birth cannot be in the future&quot;)&#10;        return date_of_birth&#10;&#10;&#10;class SessionTeamsForm(forms.ModelForm):&#10;    class Meta:&#10;        model = SessionTeams&#10;        fields = '__all__'&#10;        widgets = {&#10;            'session_date': forms.DateInput(attrs={'type': 'date'}),&#10;            'start_time': forms.TimeInput(attrs={'type': 'time'}),&#10;        }&#10;&#10;    def __init__(self, *args, **kwargs):&#10;        super().__init__(*args, **kwargs)&#10;        # Filter head_coach to only show Personnel with Coach roles&#10;        self.fields['head_coach'].queryset = Personnel.objects.filter(&#10;            role__in=['Coach', 'Assistant Coach', 'Captain']&#10;        )&#10;&#10;    def clean_session_date(self):&#10;        session_date = self.cleaned_data.get('session_date')&#10;        if session_date and session_date &lt; date.today():&#10;            raise forms.ValidationError(&quot;Session date cannot be in the past&quot;)&#10;        return session_date&#10;&#10;&#10;class PlayerAssignmentForm(forms.ModelForm):&#10;    class Meta:&#10;        model = PlayerAssignment&#10;        fields = ['club_member', 'role']&#10;&#10;    def __init__(self, *args, **kwargs):&#10;        super().__init__(*args, **kwargs)&#10;        # Only show active club members&#10;        self.fields['club_member'].queryset = ClubMember.objects.filter(is_active=True)&#10;&#10;&#10;" />
              <option name="updatedContent" value="from django import forms&#10;from .models import ClubMember, Location, Personnel, FamilyMember, SecondaryFamilyMember, SessionTeams, PlayerAssignment&#10;from datetime import date&#10;&#10;&#10;class PersonnelForm(forms.ModelForm):&#10;    class Meta:&#10;        model = Personnel&#10;        fields = '__all__'&#10;        widgets = {&#10;            'date_of_birth': forms.DateInput(attrs={'type': 'date'}),&#10;            'email_address': forms.EmailInput(),&#10;        }&#10;&#10;    def clean_date_of_birth(self):&#10;        date_of_birth = self.cleaned_data.get('date_of_birth')&#10;        if date_of_birth and date_of_birth &gt; date.today():&#10;            raise forms.ValidationError(&quot;Date of birth cannot be in the future&quot;)&#10;        return date_of_birth&#10;&#10;&#10;class FamilyMemberForm(forms.ModelForm):&#10;    class Meta:&#10;        model = FamilyMember&#10;        fields = '__all__'&#10;        widgets = {&#10;            'date_of_birth': forms.DateInput(attrs={'type': 'date'}),&#10;            'email_address': forms.EmailInput(),&#10;        }&#10;&#10;    def clean_date_of_birth(self):&#10;        date_of_birth = self.cleaned_data.get('date_of_birth')&#10;        if date_of_birth and date_of_birth &gt; date.today():&#10;            raise forms.ValidationError(&quot;Date of birth cannot be in the future&quot;)&#10;        return date_of_birth&#10;&#10;&#10;class SecondaryFamilyMemberForm(forms.ModelForm):&#10;    class Meta:&#10;        model = SecondaryFamilyMember&#10;        fields = '__all__'&#10;&#10;&#10;class ClubMemberForm(forms.ModelForm):&#10;    class Meta:&#10;        model = ClubMember&#10;        exclude = ('membership_number', 'date_joined')&#10;        widgets = {&#10;            'date_of_birth': forms.DateInput(attrs={'type': 'date'}),&#10;            'email_address': forms.EmailInput(),&#10;            'height': forms.NumberInput(attrs={'step': '0.1'}),&#10;            'weight': forms.NumberInput(attrs={'step': '0.1'}),&#10;        }&#10;&#10;    def clean_date_of_birth(self):&#10;        date_of_birth = self.cleaned_data.get('date_of_birth')&#10;        if date_of_birth:&#10;            today = date.today()&#10;            age = today.year - date_of_birth.year - ((today.month, today.day) &lt; (date_of_birth.month, date_of_birth.day))&#10;            if age &lt; 11:&#10;                raise forms.ValidationError(&quot;Club member must be at least 11 years old&quot;)&#10;            if date_of_birth &gt; today:&#10;                raise forms.ValidationError(&quot;Date of birth cannot be in the future&quot;)&#10;        return date_of_birth&#10;&#10;&#10;class SessionTeamsForm(forms.ModelForm):&#10;    class Meta:&#10;        model = SessionTeams&#10;        fields = '__all__'&#10;        widgets = {&#10;            'session_date': forms.DateInput(attrs={'type': 'date'}),&#10;            'start_time': forms.TimeInput(attrs={'type': 'time'}),&#10;        }&#10;&#10;    def __init__(self, *args, **kwargs):&#10;        super().__init__(*args, **kwargs)&#10;        # Filter head_coach to only show Personnel with Coach roles&#10;        self.fields['head_coach'].queryset = Personnel.objects.filter(&#10;            role__in=['Coach', 'Assistant Coach', 'Captain']&#10;        )&#10;&#10;    def clean_session_date(self):&#10;        session_date = self.cleaned_data.get('session_date')&#10;        if session_date and session_date &lt; date.today():&#10;            raise forms.ValidationError(&quot;Session date cannot be in the past&quot;)&#10;        return session_date&#10;&#10;&#10;class PlayerAssignmentForm(forms.ModelForm):&#10;    class Meta:&#10;        model = PlayerAssignment&#10;        fields = ['member', 'position']&#10;&#10;    def __init__(self, *args, **kwargs):&#10;        super().__init__(*args, **kwargs)&#10;        # Only show active club members&#10;        self.fields['member'].queryset = ClubMember.objects.filter(activity=True)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/migrations/0006_add_ssn_field.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/migrations/0006_add_ssn_field.py" />
              <option name="originalContent" value="# Generated custom migration for adding ssn field&#10;&#10;from django.db import migrations, models&#10;import uuid&#10;&#10;def populate_ssn_values(apps, schema_editor):&#10;    &quot;&quot;&quot;&#10;    Populate SSN values for existing ClubMember records&#10;    &quot;&quot;&quot;&#10;    ClubMember = apps.get_model('club', 'ClubMember')&#10;&#10;    # Generate unique SSN values for existing records&#10;    for i, member in enumerate(ClubMember.objects.all()):&#10;        # Generate a temporary unique SSN (you can customize this logic)&#10;        member.ssn = f&quot;TEMP-{str(i+1).zfill(6)}&quot;&#10;        member.save()&#10;&#10;def reverse_populate_ssn_values(apps, schema_editor):&#10;    &quot;&quot;&quot;&#10;    Reverse operation - this would be called if you rollback the migration&#10;    &quot;&quot;&quot;&#10;    # Since we're removing the field, we don't need to do anything special&#10;    pass&#10;&#10;class Migration(migrations.Migration):&#10;&#10;    dependencies = [&#10;        ('club', '0005_auto_20250807_0612'),  # Replace with your latest migration&#10;    ]&#10;&#10;    operations = [&#10;        # Step 1: Add the field as nullable first&#10;        migrations.AddField(&#10;            model_name='clubmember',&#10;            name='ssn',&#10;            field=models.CharField(max_length=11, null=True, blank=True),&#10;        ),&#10;&#10;        # Step 2: Populate the field with data&#10;        migrations.RunPython(populate_ssn_values, reverse_populate_ssn_values),&#10;&#10;        # Step 3: Make the field non-nullable and unique&#10;        migrations.AlterField(&#10;            model_name='clubmember',&#10;            name='ssn',&#10;            field=models.CharField(max_length=11, unique=True, null=False, blank=False),&#10;        ),&#10;    ]&#10;" />
              <option name="updatedContent" value="# Generated custom migration for adding ssn field&#10;&#10;from django.db import migrations, models&#10;import uuid&#10;&#10;def populate_ssn_values(apps, schema_editor):&#10;    &quot;&quot;&quot;&#10;    Populate SSN values for existing ClubMember records&#10;    &quot;&quot;&quot;&#10;    ClubMember = apps.get_model('club', 'ClubMember')&#10;&#10;    # Generate unique SSN values for existing records&#10;    for i, member in enumerate(ClubMember.objects.all()):&#10;        # Generate a temporary unique SSN (you can customize this logic)&#10;        member.ssn = f&quot;TEMP-{str(i+1).zfill(6)}&quot;&#10;        member.save()&#10;&#10;def reverse_populate_ssn_values(apps, schema_editor):&#10;    &quot;&quot;&quot;&#10;    Reverse operation - this would be called if you rollback the migration&#10;    &quot;&quot;&quot;&#10;    # Since we're removing the field, we don't need to do anything special&#10;    pass&#10;&#10;class Migration(migrations.Migration):&#10;&#10;    dependencies = [&#10;        ('club', '0005_auto_20250807_0612'),  # Replace with your latest migration&#10;    ]&#10;&#10;    operations = [&#10;        # Step 1: Add the field as nullable first&#10;        migrations.AddField(&#10;            model_name='clubmember',&#10;            name='ssn',&#10;            field=models.CharField(max_length=11, null=True, blank=True),&#10;        ),&#10;&#10;        # Step 2: Populate the field with data&#10;        migrations.RunPython(populate_ssn_values, reverse_populate_ssn_values),&#10;&#10;        # Step 3: Make the field non-nullable and unique&#10;        migrations.AlterField(&#10;            model_name='clubmember',&#10;            name='ssn',&#10;            field=models.CharField(max_length=11, unique=True, null=False, blank=False),&#10;        ),&#10;    ]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/migrations/0007_finalize_ssn_field.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/migrations/0007_finalize_ssn_field.py" />
              <option name="updatedContent" value="# Follow-up migration to ensure SSN field constraints are properly applied&#10;&#10;from django.db import migrations, models&#10;&#10;class Migration(migrations.Migration):&#10;&#10;    dependencies = [&#10;        ('club', '0006_add_ssn_field'),&#10;    ]&#10;&#10;    operations = [&#10;        # Final step: Ensure the field is properly constrained&#10;        migrations.AlterField(&#10;            model_name='clubmember',&#10;            name='ssn',&#10;            field=models.CharField(max_length=11, unique=True, null=False, blank=False),&#10;        ),&#10;    ]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/models.py" />
              <option name="originalContent" value="import uuid&#10;&#10;from django.db import models&#10;from django.core.exceptions import ValidationError&#10;from datetime import date, timedelta&#10;&#10;class Person(models.Model):&#10;    &quot;&quot;&quot;&#10;    Person model that serves as a base for all people-related models&#10;    &quot;&quot;&quot;&#10;    first_name = models.CharField(max_length=50)&#10;    last_name = models.CharField(max_length=50)&#10;    birthdate = models.DateField()&#10;    ssn = models.CharField(max_length=11, unique=True, null=False, blank=False)&#10;    medicare_number = models.CharField(max_length=20, unique=True)&#10;    phone = models.CharField(max_length=20)&#10;    address = models.CharField(max_length=100)&#10;    city = models.CharField(max_length=50)&#10;    province = models.CharField(max_length=30)&#10;    postal_code = models.CharField(max_length=10)&#10;    email = models.EmailField(max_length=255)&#10;&#10;    class Meta:&#10;        abstract = True&#10;&#10;&#10;class Location(models.Model):&#10;    &quot;&quot;&quot;&#10;    Represents a club location which can be the head location or a branch&#10;    &quot;&quot;&quot;&#10;    TYPE_CHOICES = [&#10;        ('head', 'Head'),&#10;        ('branch', 'Branch'),&#10;    ]&#10;    location_id = models.AutoField(primary_key=True)&#10;    name = models.CharField(max_length=100)&#10;    address = models.CharField(max_length=100)&#10;    city = models.CharField(max_length=50)&#10;    province = models.CharField(max_length=30)&#10;    postal_code = models.CharField(max_length=10)&#10;    phone = models.CharField(max_length=20)&#10;    web_address = models.URLField(max_length=255, blank=True, null=True)&#10;    type = models.CharField(max_length=10, choices=TYPE_CHOICES)&#10;    capacity = models.PositiveIntegerField()&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.name} ({self.type})&quot;&#10;&#10;&#10;class Hobbies(models.Model):&#10;    &quot;&quot;&quot;&#10;    A list of hobbies that can be associated with club members&#10;    &quot;&quot;&quot;&#10;    hobby_id = models.AutoField(primary_key=True)&#10;    name = models.CharField(max_length=50)&#10;&#10;    def __str__(self):&#10;        return self.name&#10;&#10;    class Meta:&#10;        db_table = 'hobbies'&#10;&#10;    class Meta:&#10;        db_table = 'hobbies'&#10;&#10;&#10;class EmailLog(models.Model):&#10;    &quot;&quot;&quot;&#10;    Logs every email generated by the system&#10;    &quot;&quot;&quot;&#10;    EMAIL_TYPE_CHOICES = [&#10;        ('session_notification', 'Session Notification'),&#10;        ('general', 'General'),&#10;        ('reminder', 'Reminder'),&#10;    ]&#10;    STATUS_CHOICES = [&#10;        ('sent', 'Sent'),&#10;        ('failed', 'Failed'),&#10;        ('pending', 'Pending'),&#10;    ]&#10;&#10;    log_id = models.AutoField(primary_key=True)&#10;    email_date = models.DateTimeField(auto_now_add=True)&#10;    sender_location = models.ForeignKey(Location, on_delete=models.CASCADE)&#10;    receiver_member = models.ForeignKey('ClubMember', on_delete=models.CASCADE)&#10;    receiver_email = models.EmailField(max_length=255)&#10;    subject = models.CharField(max_length=255)&#10;    body_preview = models.TextField(max_length=100)&#10;    email_type = models.CharField(max_length=20, choices=EMAIL_TYPE_CHOICES, default='session_notification')&#10;    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')&#10;    session = models.ForeignKey('Sessions', on_delete=models.CASCADE, null=True, blank=True)&#10;&#10;    class Meta:&#10;        db_table = 'email_log'&#10;&#10;&#10;    def __str__(self):&#10;        return f&quot;Email to {self.receiver_email} on {self.email_date}&quot;&#10;&#10;    class Meta:&#10;        db_table = 'email_log'&#10;&#10;&#10;class Personnel(Person):&#10;    &quot;&quot;&quot;&#10;    Represents a person working at a club location&#10;    &quot;&quot;&quot;&#10;    personnel_id = models.AutoField(primary_key=True)&#10;&#10;    def __str__(self):&#10;        return f&quot;Personnel: {self.first_name} {self.last_name}&quot;&#10;&#10;    class Meta:&#10;        db_table = 'personnel'&#10;&#10;&#10;    def current_role(self):&#10;        &quot;&quot;&quot;Get current active role&quot;&quot;&quot;&#10;        current_assignment = self.personnelassignment_set.filter(end_date__isnull=True).first()&#10;        return current_assignment.role if current_assignment else None&#10;&#10;    def current_location(self):&#10;        &quot;&quot;&quot;Get current active location&quot;&quot;&quot;&#10;        current_assignment = self.personnelassignment_set.filter(end_date__isnull=True).first()&#10;        return current_assignment.location if current_assignment else None&#10;&#10;    class Meta:&#10;        db_table = 'personnel'&#10;&#10;&#10;class PersonnelAssignment(models.Model):&#10;    &quot;&quot;&quot;&#10;    Links a personnel member to a location with specific dates, role, and mandate&#10;    &quot;&quot;&quot;&#10;    ROLE_CHOICES = [&#10;        ('general manager', 'General Manager'),&#10;        ('deputy manager', 'Deputy Manager'),&#10;        ('treasurer', 'Treasurer'),&#10;        ('secretary', 'Secretary'),&#10;        ('administrator', 'Administrator'),&#10;        ('captain', 'Captain'),&#10;        db_table = 'personnel_assignment'&#10;        ('coach', 'Coach'),&#10;        ('assistant coach', 'Assistant Coach'),&#10;        ('other', 'Other'),&#10;    ]&#10;    MANDATE_CHOICES = [&#10;        ('volunteer', 'Volunteer'),&#10;        ('salaried', 'Salaried'),&#10;    ]&#10;&#10;    personnel = models.ForeignKey(Personnel, on_delete=models.CASCADE)&#10;    location = models.ForeignKey(Location, on_delete=models.CASCADE)&#10;    assignment_id = models.PositiveIntegerField()&#10;    role = models.CharField(max_length=50, choices=ROLE_CHOICES)&#10;    mandate = models.CharField(max_length=10, choices=MANDATE_CHOICES)&#10;    start_date = models.DateField()&#10;    end_date = models.DateField(null=True, blank=True, default=None)&#10;&#10;    class Meta:&#10;        db_table = 'personnel_assignment'&#10;        constraints = [&#10;            models.CheckConstraint(&#10;    class Meta:&#10;        db_table = 'family_member'&#10;&#10;&#10;                check=models.Q(end_date__isnull=True) | models.Q(end_date__gte=models.F('start_date')),&#10;                name='valid_date_range'&#10;            ),&#10;            models.UniqueConstraint(&#10;                fields=['personnel', 'start_date'],&#10;                name='unique_personnel_start_date'&#10;            )&#10;        ]&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.personnel} as {self.role} at {self.location} from {self.start_date}&quot;&#10;&#10;&#10;class FamilyMember(Person):&#10;    &quot;&quot;&quot;&#10;    Represents a primary family member who can register minor club members&#10;    &quot;&quot;&quot;&#10;    member_id = models.AutoField(primary_key=True)&#10;    location = models.ForeignKey(Location, on_delete=models.SET_NULL, null=True, blank=True)&#10;&#10;    def __str__(self):&#10;        return f&quot;Family Member {self.first_name} {self.last_name}&quot;&#10;&#10;    class Meta:&#10;    class Meta:&#10;        db_table = 'secondary_family_member'&#10;&#10;&#10;        db_table = 'family_member'&#10;&#10;&#10;class SecondaryFamilyMember(models.Model):&#10;    &quot;&quot;&quot;&#10;    Represents a secondary contact for a family member&#10;    &quot;&quot;&quot;&#10;    RELATIONSHIP_CHOICES = [&#10;        ('father', 'Father'),&#10;        ('mother', 'Mother'),&#10;        ('grandmother', 'Grandmother'),&#10;        ('grandfather', 'Grandfather'),&#10;        ('tutor', 'Tutor'),&#10;        ('partner', 'Partner'),&#10;    class Meta:&#10;        db_table = 'club_member'&#10;&#10;        ('friend', 'Friend'),&#10;        ('other', 'Other'),&#10;    ]&#10;&#10;    secondary_id = models.AutoField(primary_key=True)&#10;    minor = models.ForeignKey('ClubMember', on_delete=models.CASCADE)&#10;    first_name = models.CharField(max_length=50)&#10;    last_name = models.CharField(max_length=50)&#10;    phone = models.CharField(max_length=20)&#10;    relationship_type = models.CharField(max_length=20, choices=RELATIONSHIP_CHOICES)&#10;&#10;    def __str__(self):&#10;        return f&quot;Secondary Contact {self.first_name} {self.last_name}&quot;&#10;&#10;    class Meta:&#10;        db_table = 'secondary_family_member'&#10;&#10;&#10;class ClubMember(Person):&#10;    &quot;&quot;&quot;&#10;    Represents a club member who can be a minor or an adult&#10;    &quot;&quot;&quot;&#10;    GENDER_CHOICES = [&#10;        ('M', 'Male'),&#10;        ('F', 'Female'),&#10;        ('O', 'Other'),&#10;        db_table = 'member_hobbies'&#10;    ]&#10;&#10;    member_id = models.AutoField(primary_key=True)&#10;    location = models.ForeignKey(Location, on_delete=models.CASCADE)&#10;    activity = models.BooleanField(default=False)&#10;    height = models.PositiveIntegerField()&#10;    weight = models.PositiveIntegerField()&#10;    gender = models.CharField(max_length=1, choices=GENDER_CHOICES)&#10;    minor = models.BooleanField(null=True, blank=True)&#10;&#10;    class Meta:&#10;        db_table = 'club_member'&#10;&#10;    def __str__(self):&#10;        return f&quot;Member: {self.first_name} {self.last_name}&quot;&#10;&#10;    @property&#10;    def age(self):&#10;        today = date.today()&#10;        return today.year - self.birthdate.year - ((today.month, today.day) &lt; (self.birthdate.month, self.birthdate.day))&#10;&#10;    @property&#10;    def is_minor(self):&#10;        return self.age &lt; 18&#10;&#10;    @property&#10;    def is_major(self):&#10;        db_table = 'family_relationship'&#10;        return self.age &gt;= 18&#10;&#10;    @property&#10;    def annual_fee(self):&#10;        &quot;&quot;&quot;Constraint: $100 for minors, $200 for majors&quot;&quot;&quot;&#10;        return 100.00 if self.is_minor else 200.00&#10;&#10;&#10;class MemberHobbies(models.Model):&#10;    &quot;&quot;&quot;&#10;    Through model for ClubMember and Hobbies many-to-many relationship&#10;    &quot;&quot;&quot;&#10;    member = models.ForeignKey(ClubMember, on_delete=models.CASCADE)&#10;    hobby = models.ForeignKey(Hobbies, on_delete=models.CASCADE)&#10;&#10;    class Meta:&#10;        db_table = 'member_hobbies'&#10;        constraints = [&#10;            models.UniqueConstraint(fields=['member', 'hobby'], name='unique_member_hobby')&#10;        ]&#10;&#10;&#10;class FamilyRelationship(models.Model):&#10;    &quot;&quot;&quot;&#10;    Links a minor club member to a family member and defines their relationship&#10;    &quot;&quot;&quot;&#10;    RELATIONSHIP_CHOICES = [&#10;        ('father', 'Father'),&#10;        ('mother', 'Mother'),&#10;        ('grandmother', 'Grandmother'),&#10;        ('grandfather', 'Grandfather'),&#10;        ('tutor', 'Tutor'),&#10;        ('partner', 'Partner'),&#10;        ('friend', 'Friend'),&#10;        ('other', 'Other'),&#10;    ]&#10;&#10;    minor = models.ForeignKey(ClubMember, on_delete=models.CASCADE)&#10;    major = models.ForeignKey(FamilyMember, on_delete=models.CASCADE)&#10;    relationship_id = models.PositiveIntegerField()&#10;    relationship_type = models.CharField(max_length=20, choices=RELATIONSHIP_CHOICES)&#10;        db_table = 'payments'&#10;    start_date = models.DateField()&#10;    end_date = models.DateField(null=True, blank=True, default=None)&#10;    is_primary = models.BooleanField(default=True)&#10;    emergency_contact = models.BooleanField(default=True)&#10;&#10;    class Meta:&#10;        db_table = 'family_relationship'&#10;        constraints = [&#10;            models.CheckConstraint(&#10;                check=models.Q(end_date__isnull=True) | models.Q(end_date__gte=models.F('start_date')),&#10;                name='valid_association_date_range'&#10;            ),&#10;            models.UniqueConstraint(&#10;                fields=['minor', 'major', 'start_date'],&#10;                name='unique_minor_family_start_date'&#10;            )&#10;        ]&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.minor.first_name} ({self.relationship_type}) with {self.major.first_name}&quot;&#10;&#10;&#10;class Payments(models.Model):&#10;    &quot;&quot;&quot;&#10;    Records a payment made by a club member&#10;    &quot;&quot;&quot;&#10;    METHOD_CHOICES = [&#10;        ('cash', 'Cash'),&#10;        ('debit', 'Debit Card'),&#10;        ('credit', 'Credit Card'),&#10;    ]&#10;    PAYMENT_TYPE_CHOICES = [&#10;        ('membership', 'Membership'),&#10;        ('donation', 'Donation'),&#10;    ]&#10;&#10;    payment_id = models.AutoField(primary_key=True)&#10;    member = models.ForeignKey(ClubMember, on_delete=models.CASCADE)&#10;    payment_date = models.DateField()&#10;    amount = models.DecimalField(max_digits=10, decimal_places=2)&#10;    class Meta:&#10;        db_table = 'sessions'&#10;&#10;&#10;    payment_method = models.CharField(max_length=10, choices=METHOD_CHOICES)&#10;    membership_year = models.PositiveIntegerField()&#10;    payment_type = models.CharField(max_length=20, choices=PAYMENT_TYPE_CHOICES, default='membership')&#10;    installment_number = models.PositiveIntegerField(null=True, blank=True)&#10;&#10;    def __str__(self):&#10;        return f&quot;Payment by {self.member} for year {self.membership_year}&quot;&#10;&#10;    class Meta:&#10;        db_table = 'payments'&#10;        constraints = [&#10;            models.CheckConstraint(&#10;                check=models.Q(amount__gt=0),&#10;                name='positive_amount'&#10;            ),&#10;            models.CheckConstraint(&#10;                check=models.Q(installment_number__isnull=True) |&#10;                      models.Q(installment_number__gte=1, installment_number__lte=4),&#10;        db_table = 'session_teams'&#10;                name='valid_installment_number'&#10;            )&#10;        ]&#10;&#10;&#10;class Sessions(models.Model):&#10;    &quot;&quot;&quot;&#10;    Represents a session (game or training)&#10;    &quot;&quot;&quot;&#10;    SESSION_TYPE_CHOICES = [&#10;        ('game', 'Game'),&#10;        ('training', 'Training'),&#10;    ]&#10;    STATUS_CHOICES = [&#10;        ('scheduled', 'Scheduled'),&#10;        ('completed', 'Completed'),&#10;        ('cancelled', 'Cancelled'),&#10;    ]&#10;&#10;    session_id = models.AutoField(primary_key=True)&#10;    session_type = models.CharField(max_length=10, choices=SESSION_TYPE_CHOICES)&#10;    session_date = models.DateField()&#10;    session_time = models.TimeField()&#10;    address = models.CharField(max_length=255)&#10;    city = models.CharField(max_length=50, null=True, blank=True)&#10;    province = models.CharField(max_length=30, null=True, blank=True)&#10;    postal_code = models.CharField(max_length=10, null=True, blank=True)&#10;    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='scheduled')&#10;    created_date = models.DateTimeField(auto_now_add=True)&#10;&#10;    def __str__(self):&#10;        db_table = 'player_assignment'&#10;        return f&quot;{self.session_type.title()} on {self.session_date} at {self.session_time}&quot;&#10;&#10;    class Meta:&#10;        db_table = 'sessions'&#10;&#10;&#10;class SessionTeams(models.Model):&#10;    &quot;&quot;&quot;&#10;    Represents teams for a specific session&#10;    &quot;&quot;&quot;&#10;    GENDER_CHOICES = [&#10;        ('M', 'Male'),&#10;        ('F', 'Female'),&#10;    ]&#10;&#10;    team_id = models.AutoField(primary_key=True)&#10;    session = models.ForeignKey(Sessions, on_delete=models.CASCADE)&#10;    team_name = models.CharField(max_length=100)&#10;    location = models.ForeignKey(Location, on_delete=models.CASCADE)&#10;    head_coach = models.ForeignKey(Personnel, on_delete=models.CASCADE)&#10;    team_number = models.PositiveSmallIntegerField()&#10;    score = models.PositiveIntegerField(null=True, blank=True, default=None)&#10;    gender = models.CharField(max_length=1, choices=GENDER_CHOICES)&#10;&#10;    class Meta:&#10;        db_table = 'session_teams'&#10;        constraints = [&#10;            models.CheckConstraint(&#10;                check=models.Q(team_number__in=[1, 2]),&#10;                name='valid_team_number'&#10;            ),&#10;            models.UniqueConstraint(&#10;                fields=['session', 'team_number'],&#10;                name='unique_session_team'&#10;            )&#10;        ]&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.team_name} (Team {self.team_number}) - {self.session}&quot;&#10;&#10;&#10;class PlayerAssignment(models.Model):&#10;    &quot;&quot;&quot;&#10;    Links a club member to a team formation and assigns their role&#10;    &quot;&quot;&quot;&#10;    POSITION_CHOICES = [&#10;        ('Setter', 'Setter'),&#10;        ('Outside Hitter', 'Outside Hitter'),&#10;        ('Opposite Hitter', 'Opposite Hitter'),&#10;        ('Middle Blocker', 'Middle Blocker'),&#10;        ('Defensive Specialist', 'Defensive Specialist'),&#10;        ('Libero', 'Libero'),&#10;    ]&#10;&#10;    roster_id = models.AutoField(primary_key=True)&#10;    team = models.ForeignKey(SessionTeams, on_delete=models.CASCADE)&#10;    member = models.ForeignKey(ClubMember, on_delete=models.CASCADE)&#10;    position = models.CharField(max_length=50, choices=POSITION_CHOICES)&#10;    is_starter = models.BooleanField(default=True)&#10;&#10;    class Meta:&#10;        db_table = 'player_assignment'&#10;        constraints = [&#10;            models.UniqueConstraint(&#10;                fields=['team', 'member'],&#10;                name='unique_member_team'&#10;            )&#10;        ]&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.member.first_name} as {self.position} in {self.team.team_name}&quot;&#10;" />
              <option name="updatedContent" value="import uuid&#10;&#10;from django.db import models&#10;from django.core.exceptions import ValidationError&#10;from datetime import date, timedelta&#10;&#10;class Person(models.Model):&#10;    &quot;&quot;&quot;&#10;    Person model that serves as a base for all people-related models&#10;    &quot;&quot;&quot;&#10;    first_name = models.CharField(max_length=50)&#10;    last_name = models.CharField(max_length=50)&#10;    birthdate = models.DateField()&#10;    ssn = models.CharField(max_length=11, unique=True, null=False, blank=False)&#10;    medicare_number = models.CharField(max_length=20, unique=True)&#10;    phone = models.CharField(max_length=20)&#10;    address = models.CharField(max_length=100)&#10;    city = models.CharField(max_length=50)&#10;    province = models.CharField(max_length=30)&#10;    postal_code = models.CharField(max_length=10)&#10;    email = models.EmailField(max_length=255)&#10;&#10;    class Meta:&#10;        abstract = True&#10;&#10;&#10;class Location(models.Model):&#10;    &quot;&quot;&quot;&#10;    Represents a club location which can be the head location or a branch&#10;    &quot;&quot;&quot;&#10;    TYPE_CHOICES = [&#10;        ('head', 'Head'),&#10;        ('branch', 'Branch'),&#10;    ]&#10;    location_id = models.AutoField(primary_key=True)&#10;    name = models.CharField(max_length=100)&#10;    address = models.CharField(max_length=100)&#10;    city = models.CharField(max_length=50)&#10;    province = models.CharField(max_length=30)&#10;    postal_code = models.CharField(max_length=10)&#10;    phone = models.CharField(max_length=20)&#10;    web_address = models.URLField(max_length=255, blank=True, null=True)&#10;    type = models.CharField(max_length=10, choices=TYPE_CHOICES)&#10;    capacity = models.PositiveIntegerField()&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.name} ({self.type})&quot;&#10;&#10;&#10;class Hobbies(models.Model):&#10;    &quot;&quot;&quot;&#10;    A list of hobbies that can be associated with club members&#10;    &quot;&quot;&quot;&#10;    hobby_id = models.AutoField(primary_key=True)&#10;    name = models.CharField(max_length=50)&#10;&#10;    def __str__(self):&#10;        return self.name&#10;&#10;&#10;class EmailLog(models.Model):&#10;    &quot;&quot;&quot;&#10;    Logs every email generated by the system&#10;    &quot;&quot;&quot;&#10;    EMAIL_TYPE_CHOICES = [&#10;        ('session_notification', 'Session Notification'),&#10;        ('general', 'General'),&#10;        ('reminder', 'Reminder'),&#10;    ]&#10;    STATUS_CHOICES = [&#10;        ('sent', 'Sent'),&#10;        ('failed', 'Failed'),&#10;        ('pending', 'Pending'),&#10;    ]&#10;&#10;    log_id = models.AutoField(primary_key=True)&#10;    email_date = models.DateTimeField(auto_now_add=True)&#10;    sender_location = models.ForeignKey(Location, on_delete=models.CASCADE)&#10;    receiver_member = models.ForeignKey('ClubMember', on_delete=models.CASCADE)&#10;    receiver_email = models.EmailField(max_length=255)&#10;    subject = models.CharField(max_length=255)&#10;    body_preview = models.TextField(max_length=100)&#10;    email_type = models.CharField(max_length=20, choices=EMAIL_TYPE_CHOICES, default='session_notification')&#10;    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')&#10;    session = models.ForeignKey('Sessions', on_delete=models.CASCADE, null=True, blank=True)&#10;&#10;    def __str__(self):&#10;        return f&quot;Email to {self.receiver_email} on {self.email_date}&quot;&#10;&#10;class Personnel(Person):&#10;    &quot;&quot;&quot;&#10;    Represents a person working at a club location&#10;    &quot;&quot;&quot;&#10;    personnel_id = models.AutoField(primary_key=True)&#10;&#10;    def __str__(self):&#10;        return f&quot;Personnel: {self.first_name} {self.last_name}&quot;&#10;&#10;    def current_role(self):&#10;        &quot;&quot;&quot;Get current active role&quot;&quot;&quot;&#10;        current_assignment = self.personnelassignment_set.filter(end_date__isnull=True).first()&#10;        return current_assignment.role if current_assignment else None&#10;&#10;    def current_location(self):&#10;        &quot;&quot;&quot;Get current active location&quot;&quot;&quot;&#10;        current_assignment = self.personnelassignment_set.filter(end_date__isnull=True).first()&#10;        return current_assignment.location if current_assignment else None&#10;&#10;class PersonnelAssignment(models.Model):&#10;    &quot;&quot;&quot;&#10;    Links a personnel member to a location with specific dates, role, and mandate&#10;    &quot;&quot;&quot;&#10;    ROLE_CHOICES = [&#10;        ('general manager', 'General Manager'),&#10;        ('deputy manager', 'Deputy Manager'),&#10;        ('treasurer', 'Treasurer'),&#10;        ('secretary', 'Secretary'),&#10;        ('administrator', 'Administrator'),&#10;        ('captain', 'Captain'),&#10;        ('coach', 'Coach'),&#10;        ('assistant coach', 'Assistant Coach'),&#10;        ('other', 'Other'),&#10;    ]&#10;    MANDATE_CHOICES = [&#10;        ('volunteer', 'Volunteer'),&#10;        ('salaried', 'Salaried'),&#10;    ]&#10;&#10;    personnel = models.ForeignKey(Personnel, on_delete=models.CASCADE)&#10;    location = models.ForeignKey(Location, on_delete=models.CASCADE)&#10;    assignment_id = models.PositiveIntegerField()&#10;    role = models.CharField(max_length=50, choices=ROLE_CHOICES)&#10;    mandate = models.CharField(max_length=10, choices=MANDATE_CHOICES)&#10;    start_date = models.DateField()&#10;    end_date = models.DateField(null=True, blank=True, default=None)&#10;&#10;    class Meta:&#10;        constraints = [&#10;            models.CheckConstraint(&#10;                check=models.Q(end_date__isnull=True) | models.Q(end_date__gte=models.F('start_date')),&#10;                name='valid_date_range'&#10;            ),&#10;            models.UniqueConstraint(&#10;                fields=['personnel', 'start_date'],&#10;                name='unique_personnel_start_date'&#10;            )&#10;        ]&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.personnel} as {self.role} at {self.location} from {self.start_date}&quot;&#10;&#10;&#10;class FamilyMember(Person):&#10;    &quot;&quot;&quot;&#10;    Represents a primary family member who can register minor club members&#10;    &quot;&quot;&quot;&#10;    member_id = models.AutoField(primary_key=True)&#10;    location = models.ForeignKey(Location, on_delete=models.SET_NULL, null=True, blank=True)&#10;&#10;    def __str__(self):&#10;        return f&quot;Family Member {self.first_name} {self.last_name}&quot;&#10;&#10;class SecondaryFamilyMember(models.Model):&#10;    &quot;&quot;&quot;&#10;    Represents a secondary contact for a family member&#10;    &quot;&quot;&quot;&#10;    RELATIONSHIP_CHOICES = [&#10;        ('father', 'Father'),&#10;        ('mother', 'Mother'),&#10;        ('grandmother', 'Grandmother'),&#10;        ('grandfather', 'Grandfather'),&#10;        ('tutor', 'Tutor'),&#10;        ('partner', 'Partner'),&#10;        ('friend', 'Friend'),&#10;        ('other', 'Other'),&#10;    ]&#10;&#10;    secondary_id = models.AutoField(primary_key=True)&#10;    minor = models.ForeignKey('ClubMember', on_delete=models.CASCADE)&#10;    first_name = models.CharField(max_length=50)&#10;    last_name = models.CharField(max_length=50)&#10;    phone = models.CharField(max_length=20)&#10;    relationship_type = models.CharField(max_length=20, choices=RELATIONSHIP_CHOICES)&#10;&#10;    def __str__(self):&#10;        return f&quot;Secondary Contact {self.first_name} {self.last_name}&quot;&#10;&#10;class ClubMember(Person):&#10;    &quot;&quot;&quot;&#10;    Represents a club member who can be a minor or an adult&#10;    &quot;&quot;&quot;&#10;    GENDER_CHOICES = [&#10;        ('M', 'Male'),&#10;        ('F', 'Female'),&#10;        ('O', 'Other'),&#10;    ]&#10;&#10;    member_id = models.AutoField(primary_key=True)&#10;    location = models.ForeignKey(Location, on_delete=models.CASCADE)&#10;    activity = models.BooleanField(default=False)&#10;    height = models.PositiveIntegerField()&#10;    weight = models.PositiveIntegerField()&#10;    gender = models.CharField(max_length=1, choices=GENDER_CHOICES)&#10;    minor = models.BooleanField(null=True, blank=True)&#10;&#10;    def __str__(self):&#10;        return f&quot;Member: {self.first_name} {self.last_name}&quot;&#10;&#10;    @property&#10;    def age(self):&#10;        today = date.today()&#10;        return today.year - self.birthdate.year - ((today.month, today.day) &lt; (self.birthdate.month, self.birthdate.day))&#10;&#10;    @property&#10;    def is_minor(self):&#10;        return self.age &lt; 18&#10;&#10;    @property&#10;    def is_major(self):&#10;        return self.age &gt;= 18&#10;&#10;    @property&#10;    def annual_fee(self):&#10;        &quot;&quot;&quot;Constraint: $100 for minors, $200 for majors&quot;&quot;&quot;&#10;        return 100.00 if self.is_minor else 200.00&#10;&#10;&#10;class MemberHobbies(models.Model):&#10;    &quot;&quot;&quot;&#10;    Through model for ClubMember and Hobbies many-to-many relationship&#10;    &quot;&quot;&quot;&#10;    member = models.ForeignKey(ClubMember, on_delete=models.CASCADE)&#10;    hobby = models.ForeignKey(Hobbies, on_delete=models.CASCADE)&#10;&#10;    class Meta:&#10;        constraints = [&#10;            models.UniqueConstraint(fields=['member', 'hobby'], name='unique_member_hobby')&#10;        ]&#10;&#10;&#10;class FamilyRelationship(models.Model):&#10;    &quot;&quot;&quot;&#10;    Links a minor club member to a family member and defines their relationship&#10;    &quot;&quot;&quot;&#10;    RELATIONSHIP_CHOICES = [&#10;        ('father', 'Father'),&#10;        ('mother', 'Mother'),&#10;        ('grandmother', 'Grandmother'),&#10;        ('grandfather', 'Grandfather'),&#10;        ('tutor', 'Tutor'),&#10;        ('partner', 'Partner'),&#10;        ('friend', 'Friend'),&#10;        ('other', 'Other'),&#10;    ]&#10;&#10;    minor = models.ForeignKey(ClubMember, on_delete=models.CASCADE)&#10;    major = models.ForeignKey(FamilyMember, on_delete=models.CASCADE)&#10;    relationship_id = models.PositiveIntegerField()&#10;    relationship_type = models.CharField(max_length=20, choices=RELATIONSHIP_CHOICES)&#10;    start_date = models.DateField()&#10;    end_date = models.DateField(null=True, blank=True, default=None)&#10;    is_primary = models.BooleanField(default=True)&#10;    emergency_contact = models.BooleanField(default=True)&#10;&#10;    class Meta:&#10;        constraints = [&#10;            models.CheckConstraint(&#10;                check=models.Q(end_date__isnull=True) | models.Q(end_date__gte=models.F('start_date')),&#10;                name='valid_association_date_range'&#10;            ),&#10;            models.UniqueConstraint(&#10;                fields=['minor', 'major', 'start_date'],&#10;                name='unique_minor_family_start_date'&#10;            )&#10;        ]&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.minor.first_name} ({self.relationship_type}) with {self.major.first_name}&quot;&#10;&#10;&#10;class Payments(models.Model):&#10;    &quot;&quot;&quot;&#10;    Records a payment made by a club member&#10;    &quot;&quot;&quot;&#10;    METHOD_CHOICES = [&#10;        ('cash', 'Cash'),&#10;        ('debit', 'Debit Card'),&#10;        ('credit', 'Credit Card'),&#10;    ]&#10;    PAYMENT_TYPE_CHOICES = [&#10;        ('membership', 'Membership'),&#10;        ('donation', 'Donation'),&#10;    ]&#10;&#10;    payment_id = models.AutoField(primary_key=True)&#10;    member = models.ForeignKey(ClubMember, on_delete=models.CASCADE)&#10;    payment_date = models.DateField()&#10;    amount = models.DecimalField(max_digits=10, decimal_places=2)&#10;    payment_method = models.CharField(max_length=10, choices=METHOD_CHOICES)&#10;    membership_year = models.PositiveIntegerField()&#10;    payment_type = models.CharField(max_length=20, choices=PAYMENT_TYPE_CHOICES, default='membership')&#10;    installment_number = models.PositiveIntegerField(null=True, blank=True)&#10;&#10;    def __str__(self):&#10;        return f&quot;Payment by {self.member} for year {self.membership_year}&quot;&#10;&#10;    class Meta:&#10;        constraints = [&#10;            models.CheckConstraint(&#10;                check=models.Q(amount__gt=0),&#10;                name='positive_amount'&#10;            ),&#10;            models.CheckConstraint(&#10;                check=models.Q(installment_number__isnull=True) |&#10;                      models.Q(installment_number__gte=1, installment_number__lte=4),&#10;                name='valid_installment_number'&#10;            )&#10;        ]&#10;&#10;&#10;class Sessions(models.Model):&#10;    &quot;&quot;&quot;&#10;    Represents a session (game or training)&#10;    &quot;&quot;&quot;&#10;    SESSION_TYPE_CHOICES = [&#10;        ('game', 'Game'),&#10;        ('training', 'Training'),&#10;    ]&#10;    STATUS_CHOICES = [&#10;        ('scheduled', 'Scheduled'),&#10;        ('completed', 'Completed'),&#10;        ('cancelled', 'Cancelled'),&#10;    ]&#10;&#10;    session_id = models.AutoField(primary_key=True)&#10;    session_type = models.CharField(max_length=10, choices=SESSION_TYPE_CHOICES)&#10;    session_date = models.DateField()&#10;    session_time = models.TimeField()&#10;    address = models.CharField(max_length=255)&#10;    city = models.CharField(max_length=50, null=True, blank=True)&#10;    province = models.CharField(max_length=30, null=True, blank=True)&#10;    postal_code = models.CharField(max_length=10, null=True, blank=True)&#10;    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='scheduled')&#10;    created_date = models.DateTimeField(auto_now_add=True)&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.session_type.title()} on {self.session_date} at {self.session_time}&quot;&#10;&#10;class SessionTeams(models.Model):&#10;    &quot;&quot;&quot;&#10;    Represents teams for a specific session&#10;    &quot;&quot;&quot;&#10;    GENDER_CHOICES = [&#10;        ('M', 'Male'),&#10;        ('F', 'Female'),&#10;    ]&#10;&#10;    team_id = models.AutoField(primary_key=True)&#10;    session = models.ForeignKey(Sessions, on_delete=models.CASCADE)&#10;    team_name = models.CharField(max_length=100)&#10;    location = models.ForeignKey(Location, on_delete=models.CASCADE)&#10;    head_coach = models.ForeignKey(Personnel, on_delete=models.CASCADE)&#10;    team_number = models.PositiveSmallIntegerField()&#10;    score = models.PositiveIntegerField(null=True, blank=True, default=None)&#10;    gender = models.CharField(max_length=1, choices=GENDER_CHOICES)&#10;&#10;    class Meta:&#10;        constraints = [&#10;            models.CheckConstraint(&#10;                check=models.Q(team_number__in=[1, 2]),&#10;                name='valid_team_number'&#10;            ),&#10;            models.UniqueConstraint(&#10;                fields=['session', 'team_number'],&#10;                name='unique_session_team'&#10;            )&#10;        ]&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.team_name} (Team {self.team_number}) - {self.session}&quot;&#10;&#10;&#10;class PlayerAssignment(models.Model):&#10;    &quot;&quot;&quot;&#10;    Links a club member to a team formation and assigns their role&#10;    &quot;&quot;&quot;&#10;    POSITION_CHOICES = [&#10;        ('Setter', 'Setter'),&#10;        ('Outside Hitter', 'Outside Hitter'),&#10;        ('Opposite Hitter', 'Opposite Hitter'),&#10;        ('Middle Blocker', 'Middle Blocker'),&#10;        ('Defensive Specialist', 'Defensive Specialist'),&#10;        ('Libero', 'Libero'),&#10;    ]&#10;&#10;    roster_id = models.AutoField(primary_key=True)&#10;    team = models.ForeignKey(SessionTeams, on_delete=models.CASCADE)&#10;    member = models.ForeignKey(ClubMember, on_delete=models.CASCADE)&#10;    position = models.CharField(max_length=50, choices=POSITION_CHOICES)&#10;    is_starter = models.BooleanField(default=True)&#10;&#10;    class Meta:&#10;        constraints = [&#10;            models.UniqueConstraint(&#10;                fields=['team', 'member'],&#10;                name='unique_member_team'&#10;            )&#10;        ]&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.member.first_name} as {self.position} in {self.team.team_name}&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/mysql_tables_creation.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/mysql_tables_creation.sql" />
              <option name="originalContent" value="CREATE DATABASE IF NOT EXISTS mvc_db;&#10;USE mvc_db;&#10;&#10;CREATE TABLE club_location (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    type ENUM('Head', 'Branch') NOT NULL,&#10;    name VARCHAR(255) UNIQUE NOT NULL,&#10;    address VARCHAR(255) NOT NULL,&#10;    city VARCHAR(100) NOT NULL,&#10;    province VARCHAR(100) NOT NULL,&#10;    postal_code VARCHAR(10) NOT NULL,&#10;    phone_number VARCHAR(20) NOT NULL,&#10;    web_address VARCHAR(200),&#10;    max_capacity INT UNSIGNED NOT NULL&#10;);&#10;&#10;CREATE TABLE club_hobby (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(50) UNIQUE NOT NULL&#10;);&#10;&#10;CREATE TABLE club_log (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    date DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;    sender VARCHAR(255) NOT NULL,&#10;    receiver VARCHAR(254) NOT NULL,&#10;    subject VARCHAR(255) NOT NULL,&#10;    body_snippet TEXT&#10;);&#10;&#10;CREATE TABLE club_personnel (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    first_name VARCHAR(100) NOT NULL,&#10;    last_name VARCHAR(100) NOT NULL,&#10;    date_of_birth DATE NOT NULL,&#10;    social_security_number VARCHAR(20) UNIQUE NOT NULL,&#10;    medicare_card_number VARCHAR(20) UNIQUE NOT NULL,&#10;    telephone_number VARCHAR(20) NOT NULL,&#10;    address VARCHAR(255) NOT NULL,&#10;    city VARCHAR(100) NOT NULL,&#10;    province VARCHAR(100) NOT NULL,&#10;    postal_code VARCHAR(10) NOT NULL,&#10;    email_address VARCHAR(254) UNIQUE NOT NULL&#10;);&#10;&#10;CREATE TABLE club_personnelassignment (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    personnel_id INT NOT NULL,&#10;    location_id INT NOT NULL,&#10;    role ENUM('Administrator', 'General Manager', 'Deputy Manager', 'Treasurer', 'Secretary', 'Captain', 'Coach', 'Assistant Coach', 'Other') NOT NULL,&#10;    mandate ENUM('Volunteer', 'Salaried') NOT NULL,&#10;    start_date DATE NOT NULL,&#10;    end_date DATE NULL,&#10;    FOREIGN KEY (personnel_id)&#10;        REFERENCES club_personnel (id)&#10;        ON DELETE CASCADE,&#10;    FOREIGN KEY (location_id)&#10;        REFERENCES club_location (id)&#10;        ON DELETE CASCADE,&#10;    CONSTRAINT valid_date_range CHECK (end_date IS NULL&#10;        OR end_date &gt;= start_date),&#10;    UNIQUE KEY unique_personnel_start_date (personnel_id , start_date)&#10;);&#10;&#10;CREATE TABLE club_familymember (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    first_name VARCHAR(100) NOT NULL,&#10;    last_name VARCHAR(100) NOT NULL,&#10;    date_of_birth DATE NOT NULL,&#10;    social_security_number VARCHAR(20) UNIQUE NOT NULL,&#10;    medicare_card_number VARCHAR(20) UNIQUE NOT NULL,&#10;    telephone_number VARCHAR(20) NOT NULL,&#10;    address VARCHAR(255) NOT NULL,&#10;    city VARCHAR(100) NOT NULL,&#10;    province VARCHAR(100) NOT NULL,&#10;    postal_code VARCHAR(10) NOT NULL,&#10;    email_address VARCHAR(254) UNIQUE NOT NULL,&#10;    location_id INT NULL,&#10;    FOREIGN KEY (location_id)&#10;        REFERENCES club_location (id)&#10;        ON DELETE SET NULL&#10;);&#10;&#10;CREATE TABLE club_secondaryfamilymember (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    primary_family_member_id INT NOT NULL,&#10;    first_name VARCHAR(100) NOT NULL,&#10;    last_name VARCHAR(100) NOT NULL,&#10;    telephone_number VARCHAR(20) NOT NULL,&#10;    relationship VARCHAR(50) NOT NULL,&#10;    FOREIGN KEY (primary_family_member_id)&#10;        REFERENCES club_familymember (id)&#10;        ON DELETE CASCADE&#10;);&#10;&#10;CREATE TABLE club_clubmember (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    membership_number CHAR(36) UNIQUE NOT NULL,&#10;    first_name VARCHAR(100) NOT NULL,&#10;    last_name VARCHAR(100) NOT NULL,&#10;    date_of_birth DATE NOT NULL,&#10;    social_security_number VARCHAR(20) UNIQUE NOT NULL,&#10;    medicare_card_number VARCHAR(20) UNIQUE NOT NULL,&#10;    telephone_number VARCHAR(20) NOT NULL,&#10;    address VARCHAR(255) NOT NULL,&#10;    city VARCHAR(100) NOT NULL,&#10;    province VARCHAR(100) NOT NULL,&#10;    postal_code VARCHAR(10) NOT NULL,&#10;    email_address VARCHAR(254) UNIQUE NOT NULL,&#10;    height DECIMAL(5,2) NOT NULL,&#10;    weight DECIMAL(5,2) NOT NULL,&#10;    location_id INT NULL,&#10;    date_joined DATE DEFAULT (CURRENT_DATE),&#10;    gender ENUM('M', 'F') DEFAULT 'M',&#10;    FOREIGN KEY (location_id) REFERENCES club_location(id) ON DELETE SET NULL&#10;);&#10;&#10;CREATE TABLE club_clubmember_hobbies (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    clubmember_id INT NOT NULL,&#10;    hobby_id INT NOT NULL,&#10;    FOREIGN KEY (clubmember_id)&#10;        REFERENCES club_clubmember (id)&#10;        ON DELETE CASCADE,&#10;    FOREIGN KEY (hobby_id)&#10;        REFERENCES club_hobby (id)&#10;        ON DELETE CASCADE,&#10;    UNIQUE KEY unique_member_hobby (clubmember_id , hobby_id)&#10;);&#10;&#10;CREATE TABLE club_minormemberassociation (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    minor_member_id INT NOT NULL,&#10;    relationship ENUM('Father', 'Mother', 'Grand-father', 'Grand-mother', 'Tutor', 'Partner', 'Friend', 'Other') NOT NULL,&#10;    start_date DATE NOT NULL,&#10;    end_date DATE NULL,&#10;    FOREIGN KEY (minor_member_id)&#10;        REFERENCES club_clubmember (id)&#10;        ON DELETE CASCADE,&#10;    FOREIGN KEY (family_member_id)&#10;        REFERENCES club_familymember (id)&#10;        ON DELETE CASCADE,&#10;    UNIQUE KEY unique_minor_start_date (minor_member_id , start_date)&#10;);&#10;CREATE TABLE club_payment (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    club_member_id INT NOT NULL,&#10;    payment_date DATE NOT NULL,&#10;    amount DECIMAL(10 , 2 ) NOT NULL,&#10;    method_of_payment ENUM('Cash', 'Debit', 'Credit') NOT NULL,&#10;    for_year INT UNSIGNED NOT NULL,&#10;    FOREIGN KEY (club_member_id)&#10;        REFERENCES club_clubmember (id)&#10;        ON DELETE CASCADE&#10;);&#10;&#10;CREATE TABLE club_teamformation (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    location_id INT NOT NULL,&#10;    team_name VARCHAR(100) NOT NULL,&#10;    head_coach_id INT NOT NULL,&#10;    session_date DATE NOT NULL,&#10;    start_time TIME NOT NULL,&#10;    is_game BOOLEAN DEFAULT FALSE,&#10;    score_team1 INT UNSIGNED NULL,&#10;    score_team2 INT UNSIGNED NULL,&#10;    FOREIGN KEY (location_id)&#10;        REFERENCES club_location (id)&#10;        ON DELETE CASCADE,&#10;    FOREIGN KEY (head_coach_id)&#10;        REFERENCES club_personnel (id)&#10;        ON DELETE CASCADE&#10;);&#10;&#10;CREATE TABLE club_playerassignment (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    club_member_id INT NOT NULL,&#10;    team_formation_id INT NOT NULL,&#10;    role ENUM('Setter', 'Outside hitter', 'Opposite hitter', 'Middle blocker', 'Defensive specialist', 'Libero') NOT NULL,&#10;    FOREIGN KEY (club_member_id)&#10;        REFERENCES club_clubmember (id)&#10;        ON DELETE CASCADE,&#10;    FOREIGN KEY (team_formation_id)&#10;        REFERENCES club_teamformation (id)&#10;        ON DELETE CASCADE,&#10;    UNIQUE KEY unique_member_formation (club_member_id , team_formation_id)&#10;);&#10;&#10;-- trigger to prevent overlapping personnel assignments&#10;CREATE TRIGGER enforce_no_overlap_personnel_bcnf&#10;    BEFORE INSERT ON club_personnelassignment&#10;    FOR EACH ROW&#10;BEGIN&#10;    DECLARE overlap_count INT DEFAULT 0;&#10;&#10;SELECT&#10;    COUNT(*)&#10;INTO overlap_count FROM&#10;    club_personnelassignment&#10;WHERE&#10;    personnel_id = NEW.personnel_id&#10;        AND ((NEW.start_date BETWEEN start_date AND COALESCE(end_date, '9999-12-31'))&#10;        OR (COALESCE(NEW.end_date, '9999-12-31') BETWEEN start_date AND COALESCE(end_date, '9999-12-31'))&#10;        OR (NEW.start_date &lt;= start_date&#10;        AND COALESCE(NEW.end_date, '9999-12-31') &gt;= COALESCE(end_date, '9999-12-31')));&#10;&#10;    IF overlap_count &gt; 0 THEN&#10;        SIGNAL SQLSTATE '45000'&#10;        SET MESSAGE_TEXT = 'Personnel cannot have overlapping assignments';&#10;    END IF;&#10;END$$&#10;&#10;DELIMITER ;&#10;" />
              <option name="updatedContent" value="CREATE DATABASE IF NOT EXISTS mvc_db;&#10;USE mvc_db;&#10;&#10;CREATE TABLE club_location (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    type ENUM('Head', 'Branch') NOT NULL,&#10;    name VARCHAR(255) UNIQUE NOT NULL,&#10;    address VARCHAR(255) NOT NULL,&#10;    city VARCHAR(100) NOT NULL,&#10;    province VARCHAR(100) NOT NULL,&#10;    postal_code VARCHAR(10) NOT NULL,&#10;    phone_number VARCHAR(20) NOT NULL,&#10;    web_address VARCHAR(200),&#10;    max_capacity INT UNSIGNED NOT NULL&#10;);&#10;&#10;CREATE TABLE club_hobby (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(50) UNIQUE NOT NULL&#10;);&#10;&#10;CREATE TABLE club_log (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    date DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;    sender VARCHAR(255) NOT NULL,&#10;    receiver VARCHAR(254) NOT NULL,&#10;    subject VARCHAR(255) NOT NULL,&#10;    body_snippet TEXT&#10;);&#10;&#10;CREATE TABLE club_personnel (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    first_name VARCHAR(100) NOT NULL,&#10;    last_name VARCHAR(100) NOT NULL,&#10;    date_of_birth DATE NOT NULL,&#10;    social_security_number VARCHAR(20) UNIQUE NOT NULL,&#10;    medicare_card_number VARCHAR(20) UNIQUE NOT NULL,&#10;    telephone_number VARCHAR(20) NOT NULL,&#10;    address VARCHAR(255) NOT NULL,&#10;    city VARCHAR(100) NOT NULL,&#10;    province VARCHAR(100) NOT NULL,&#10;    postal_code VARCHAR(10) NOT NULL,&#10;    email_address VARCHAR(254) UNIQUE NOT NULL&#10;);&#10;&#10;CREATE TABLE club_personnelassignment (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    personnel_id INT NOT NULL,&#10;    location_id INT NOT NULL,&#10;    role ENUM('Administrator', 'General Manager', 'Deputy Manager', 'Treasurer', 'Secretary', 'Captain', 'Coach', 'Assistant Coach', 'Other') NOT NULL,&#10;    mandate ENUM('Volunteer', 'Salaried') NOT NULL,&#10;    start_date DATE NOT NULL,&#10;    end_date DATE NULL,&#10;    FOREIGN KEY (personnel_id)&#10;        REFERENCES club_personnel (id)&#10;        ON DELETE CASCADE,&#10;    FOREIGN KEY (location_id)&#10;        REFERENCES club_location (id)&#10;        ON DELETE CASCADE,&#10;    CONSTRAINT valid_date_range CHECK (end_date IS NULL&#10;        OR end_date &gt;= start_date),&#10;    UNIQUE KEY unique_personnel_start_date (personnel_id , start_date)&#10;);&#10;&#10;CREATE TABLE club_familymember (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    first_name VARCHAR(100) NOT NULL,&#10;    last_name VARCHAR(100) NOT NULL,&#10;    date_of_birth DATE NOT NULL,&#10;    social_security_number VARCHAR(20) UNIQUE NOT NULL,&#10;    medicare_card_number VARCHAR(20) UNIQUE NOT NULL,&#10;    telephone_number VARCHAR(20) NOT NULL,&#10;    address VARCHAR(255) NOT NULL,&#10;    city VARCHAR(100) NOT NULL,&#10;    province VARCHAR(100) NOT NULL,&#10;    postal_code VARCHAR(10) NOT NULL,&#10;    email_address VARCHAR(254) UNIQUE NOT NULL,&#10;    location_id INT NULL,&#10;    FOREIGN KEY (location_id)&#10;        REFERENCES club_location (id)&#10;        ON DELETE SET NULL&#10;);&#10;&#10;CREATE TABLE club_secondaryfamilymember (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    primary_family_member_id INT NOT NULL,&#10;    first_name VARCHAR(100) NOT NULL,&#10;    last_name VARCHAR(100) NOT NULL,&#10;    telephone_number VARCHAR(20) NOT NULL,&#10;    relationship VARCHAR(50) NOT NULL,&#10;    FOREIGN KEY (primary_family_member_id)&#10;        REFERENCES club_familymember (id)&#10;        ON DELETE CASCADE&#10;);&#10;&#10;CREATE TABLE club_clubmember (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    membership_number CHAR(36) UNIQUE NOT NULL,&#10;    first_name VARCHAR(100) NOT NULL,&#10;    last_name VARCHAR(100) NOT NULL,&#10;    date_of_birth DATE NOT NULL,&#10;    social_security_number VARCHAR(20) UNIQUE NOT NULL,&#10;    medicare_card_number VARCHAR(20) UNIQUE NOT NULL,&#10;    telephone_number VARCHAR(20) NOT NULL,&#10;    address VARCHAR(255) NOT NULL,&#10;    city VARCHAR(100) NOT NULL,&#10;    province VARCHAR(100) NOT NULL,&#10;    postal_code VARCHAR(10) NOT NULL,&#10;    email_address VARCHAR(254) UNIQUE NOT NULL,&#10;    height DECIMAL(5,2) NOT NULL,&#10;    weight DECIMAL(5,2) NOT NULL,&#10;    location_id INT NULL,&#10;    date_joined DATE DEFAULT (CURRENT_DATE),&#10;    gender ENUM('M', 'F') DEFAULT 'M',&#10;    FOREIGN KEY (location_id) REFERENCES club_location(id) ON DELETE SET NULL&#10;);&#10;&#10;CREATE TABLE club_clubmember_hobbies (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    clubmember_id INT NOT NULL,&#10;    hobby_id INT NOT NULL,&#10;    FOREIGN KEY (clubmember_id)&#10;        REFERENCES club_clubmember (id)&#10;        ON DELETE CASCADE,&#10;    FOREIGN KEY (hobby_id)&#10;        REFERENCES club_hobby (id)&#10;        ON DELETE CASCADE,&#10;    UNIQUE KEY unique_member_hobby (clubmember_id , hobby_id)&#10;);&#10;&#10;CREATE TABLE club_minormemberassociation (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    minor_member_id INT NOT NULL,&#10;    family_member_id INT NOT NULL,&#10;    relationship ENUM('Father', 'Mother', 'Grand-father', 'Grand-mother', 'Tutor', 'Partner', 'Friend', 'Other') NOT NULL,&#10;    start_date DATE NOT NULL,&#10;    end_date DATE NULL,&#10;    FOREIGN KEY (minor_member_id)&#10;        REFERENCES club_clubmember (id)&#10;        ON DELETE CASCADE,&#10;    FOREIGN KEY (family_member_id)&#10;        REFERENCES club_familymember (id)&#10;        ON DELETE CASCADE,&#10;    UNIQUE KEY unique_minor_start_date (minor_member_id , start_date)&#10;);&#10;CREATE TABLE club_payment (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    club_member_id INT NOT NULL,&#10;    payment_date DATE NOT NULL,&#10;    amount DECIMAL(10 , 2 ) NOT NULL,&#10;    method_of_payment ENUM('Cash', 'Debit', 'Credit') NOT NULL,&#10;    for_year INT UNSIGNED NOT NULL,&#10;    FOREIGN KEY (club_member_id)&#10;        REFERENCES club_clubmember (id)&#10;        ON DELETE CASCADE&#10;);&#10;&#10;CREATE TABLE club_teamformation (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    location_id INT NOT NULL,&#10;    team_name VARCHAR(100) NOT NULL,&#10;    head_coach_id INT NOT NULL,&#10;    session_date DATE NOT NULL,&#10;    start_time TIME NOT NULL,&#10;    is_game BOOLEAN DEFAULT FALSE,&#10;    score_team1 INT UNSIGNED NULL,&#10;    score_team2 INT UNSIGNED NULL,&#10;    FOREIGN KEY (location_id)&#10;        REFERENCES club_location (id)&#10;        ON DELETE CASCADE,&#10;    FOREIGN KEY (head_coach_id)&#10;        REFERENCES club_personnel (id)&#10;        ON DELETE CASCADE&#10;);&#10;&#10;CREATE TABLE club_playerassignment (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    club_member_id INT NOT NULL,&#10;    team_formation_id INT NOT NULL,&#10;    role ENUM('Setter', 'Outside hitter', 'Opposite hitter', 'Middle blocker', 'Defensive specialist', 'Libero') NOT NULL,&#10;    FOREIGN KEY (club_member_id)&#10;        REFERENCES club_clubmember (id)&#10;        ON DELETE CASCADE,&#10;    FOREIGN KEY (team_formation_id)&#10;        REFERENCES club_teamformation (id)&#10;        ON DELETE CASCADE,&#10;    UNIQUE KEY unique_member_formation (club_member_id , team_formation_id)&#10;);&#10;&#10;-- trigger to prevent overlapping personnel assignments&#10;CREATE TRIGGER enforce_no_overlap_personnel_bcnf&#10;    BEFORE INSERT ON club_personnelassignment&#10;    FOR EACH ROW&#10;BEGIN&#10;    DECLARE overlap_count INT DEFAULT 0;&#10;&#10;SELECT&#10;    COUNT(*)&#10;INTO overlap_count FROM&#10;    club_personnelassignment&#10;WHERE&#10;    personnel_id = NEW.personnel_id&#10;        AND ((NEW.start_date BETWEEN start_date AND COALESCE(end_date, '9999-12-31'))&#10;        OR (COALESCE(NEW.end_date, '9999-12-31') BETWEEN start_date AND COALESCE(end_date, '9999-12-31'))&#10;        OR (NEW.start_date &lt;= start_date&#10;        AND COALESCE(NEW.end_date, '9999-12-31') &gt;= COALESCE(end_date, '9999-12-31')));&#10;&#10;    IF overlap_count &gt; 0 THEN&#10;        SIGNAL SQLSTATE '45000'&#10;        SET MESSAGE_TEXT = 'Personnel cannot have overlapping assignments';&#10;    END IF;&#10;END$$&#10;&#10;DELIMITER ;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/club_member_confirm_delete.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/club_member_confirm_delete.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Delete Club Member - MVC System&lt;/title&gt;&#10;    &lt;h1&gt;Delete Club Member&lt;/h1&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;Delete Club Member&lt;/h1&gt;&#10;&#10;    &lt;p&gt;Are you sure you want to delete &lt;strong&gt;{{ member.first_name }} {{ member.last_name }}&lt;/strong&gt; (Membership #{{ member.membership_number }})?&lt;/p&gt;&#10;&#10;        &lt;button type=&quot;submit&quot; style=&quot;background: red; color: white; padding: 8px 16px;&quot;&gt;Yes, delete&lt;/button&gt;&#10;        &lt;a href=&quot;{% url 'club_member_detail' member.pk %}&quot;&gt;Cancel&lt;/a&gt;&#10;        &lt;button type=&quot;submit&quot; style=&quot;background: red; color: white; padding: 8px 16px;&quot;&gt;Yes, delete&lt;/button&gt;&#10;        &lt;a href=&quot;{% url 'club_member_detail' member.pk %}&quot;&gt;Cancel&lt;/a&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#13;&#10;&lt;html lang=&quot;en&quot;&gt;&#13;&#10;&lt;head&gt;&#13;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#13;&#10;    &lt;title&gt;Delete Club Member - MVC System&lt;/title&gt;&#13;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#13;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#13;&#10;&lt;/head&gt;&#13;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#13;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;Delete Club Member&lt;/h1&gt;&#13;&#10;    &lt;div class=&quot;alert alert-danger&quot;&gt;&#13;&#10;        &lt;p&gt;Are you sure you want to delete &lt;strong&gt;{{ member.first_name }} {{ member.last_name }}&lt;/strong&gt; (Membership #{{ member.membership_number }})?&lt;/p&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;    &lt;form method=&quot;post&quot;&gt;&#13;&#10;        {% csrf_token %}&#13;&#10;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-danger&quot;&gt;Yes, delete&lt;/button&gt;&#13;&#10;        &lt;a href=&quot;{% url 'club_member_detail' member.pk %}&quot; class=&quot;btn btn-secondary&quot;&gt;Cancel&lt;/a&gt;&#13;&#10;    &lt;/form&gt;&#13;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#13;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#13;&#10;&lt;/body&gt;&#13;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/club_member_detail.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/club_member_detail.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Club Member Details - MVC System&lt;/title&gt;&#10;    &lt;h1&gt;Club Member Details&lt;/h1&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;Club Member Details&lt;/h1&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Medicare:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ member.medicare_card_number }}&lt;/td&gt;&lt;/tr&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;border-collapse: collapse; width: 100%;&quot;&gt;&#10;&#10;    &lt;h3&gt;Hobbies&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;        {% for hobby in member.hobbies.all %}&#10;    &lt;ul&gt;&#10;        {% empty %}&#10;            &lt;li&gt;{{ hobby.name }}&lt;/li&gt;&#10;        {% endfor %}&#10;            &lt;li&gt;No hobbies listed&lt;/li&gt;&#10;&#10;    &lt;ul&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;    &lt;ul&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;            &lt;li&gt;{{ hobby.name }}&lt;/li&gt;&#10;                &lt;th&gt;Relationship&lt;/th&gt;&#10;            &lt;li&gt;No hobbies listed&lt;/li&gt;&#10;                &lt;th&gt;End Date&lt;/th&gt;&#10;    &lt;ul&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;    &lt;ul&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;            &lt;li&gt;{{ hobby.name }}&lt;/li&gt;&#10;                    &lt;td&gt;{{ association.family_member.first_name }} {{ association.family_member.last_name }}&lt;/td&gt;&#10;            &lt;li&gt;No hobbies listed&lt;/li&gt;&#10;                    &lt;td&gt;{{ association.start_date }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ association.end_date|default:&quot;Active&quot; }}&lt;/td&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;        &lt;thead&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;        &lt;thead&gt;&#10;                &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&#10;    &lt;h3&gt;Payment History&lt;/h3&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;        &lt;thead&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;        &lt;thead&gt;&#10;                &lt;th&gt;Amount&lt;/th&gt;&#10;                &lt;th&gt;Method&lt;/th&gt;&#10;                &lt;th&gt;For Year&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;        &lt;thead&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;        &lt;thead&gt;&#10;                    &lt;td&gt;{{ payment.payment_date }}&lt;/td&gt;&#10;                    &lt;td&gt;${{ payment.amount }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ payment.method_of_payment }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ payment.for_year }}&lt;/td&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;        &lt;thead&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;        &lt;thead&gt;&#10;                &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&#10;    &lt;h3&gt;Team Assignments&lt;/h3&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;        &lt;thead&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;        &lt;thead&gt;&#10;                &lt;th&gt;Role&lt;/th&gt;&#10;                &lt;th&gt;Session Date&lt;/th&gt;&#10;                &lt;th&gt;Session Type&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;        &lt;thead&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;        &lt;thead&gt;&#10;                    &lt;td&gt;{{ assignment.team_formation.team_name }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ assignment.role }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ assignment.team_formation.session_date }}&lt;/td&gt;&#10;                    &lt;td&gt;{% if assignment.team_formation.is_game %}Game{% else %}Training{% endif %}&lt;/td&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;        &lt;thead&gt;&#10;    &lt;table border=&quot;1&quot; style=&quot;width: 100%; border-collapse: collapse; margin-top: 10px;&quot;&gt;&#10;        &lt;thead&gt;&#10;                &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&#10;    &lt;br&gt;&#10;    &lt;a href=&quot;{% url 'club_member_edit' member.pk %}&quot;&gt;Edit&lt;/a&gt; |&#10;    &lt;a href=&quot;{% url 'club_member_delete' member.pk %}&quot; style=&quot;color: red;&quot;&gt;Delete&lt;/a&gt; |&#10;    &lt;a href=&quot;{% url 'club_member_edit' member.pk %}&quot;&gt;Edit&lt;/a&gt; |&#10;    &lt;a href=&quot;{% url 'club_member_delete' member.pk %}&quot; style=&quot;color: red;&quot;&gt;Delete&lt;/a&gt; |&#10;    &lt;a href=&quot;{% url 'club_member_list' %}&quot;&gt;Back to list&lt;/a&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Club Member Details - MVC System&lt;/title&gt;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;Club Member Details&lt;/h1&gt;&#10;&#10;    &lt;table class=&quot;table table-bordered&quot;&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Membership Number:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ member.membership_number }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Name:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ member.first_name }} {{ member.last_name }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Age:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ age }} ({% if is_minor %}Minor{% else %}Major{% endif %})&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Date of Birth:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ member.date_of_birth }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Email:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ member.email_address }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Phone:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ member.telephone_number }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Address:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ member.address }}, {{ member.city }}, {{ member.province }} {{ member.postal_code }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Height:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ member.height }} cm&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Weight:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ member.weight }} kg&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Location:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ member.location.name|default:&quot;No Location&quot; }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Date Joined:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ member.date_joined }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;SSN:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ member.social_security_number }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Medicare:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ member.medicare_card_number }}&lt;/td&gt;&lt;/tr&gt;&#10;    &lt;/table&gt;&#10;&#10;    &lt;h3&gt;Hobbies&lt;/h3&gt;&#10;    &lt;ul class=&quot;list-group&quot;&gt;&#10;        {% for hobby in member.hobbies.all %}&#10;            &lt;li class=&quot;list-group-item&quot;&gt;{{ hobby.name }}&lt;/li&gt;&#10;        {% empty %}&#10;            &lt;li class=&quot;list-group-item&quot;&gt;No hobbies listed&lt;/li&gt;&#10;        {% endfor %}&#10;    &lt;/ul&gt;&#10;&#10;    &lt;h3&gt;Family Associations&lt;/h3&gt;&#10;    &lt;table class=&quot;table table-bordered&quot;&gt;&#10;        &lt;thead class=&quot;table-dark&quot;&gt;&#10;            &lt;tr&gt;&#10;                &lt;th&gt;Family Member&lt;/th&gt;&#10;                &lt;th&gt;Relationship&lt;/th&gt;&#10;                &lt;th&gt;Start Date&lt;/th&gt;&#10;                &lt;th&gt;End Date&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;        &lt;/thead&gt;&#10;        &lt;tbody&gt;&#10;            {% for association in family_associations %}&#10;                &lt;tr&gt;&#10;                    &lt;td&gt;{{ association.family_member.first_name }} {{ association.family_member.last_name }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ association.relationship }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ association.start_date }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ association.end_date|default:&quot;Active&quot; }}&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            {% empty %}&#10;                &lt;tr&gt;&#10;                    &lt;td colspan=&quot;4&quot;&gt;No family associations.&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&#10;    &lt;h3&gt;Payment History&lt;/h3&gt;&#10;    &lt;table class=&quot;table table-bordered&quot;&gt;&#10;        &lt;thead class=&quot;table-dark&quot;&gt;&#10;            &lt;tr&gt;&#10;                &lt;th&gt;Payment Date&lt;/th&gt;&#10;                &lt;th&gt;Amount&lt;/th&gt;&#10;                &lt;th&gt;Method&lt;/th&gt;&#10;                &lt;th&gt;For Year&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;        &lt;/thead&gt;&#10;        &lt;tbody&gt;&#10;            {% for payment in payments %}&#10;                &lt;tr&gt;&#10;                    &lt;td&gt;{{ payment.payment_date }}&lt;/td&gt;&#10;                    &lt;td&gt;${{ payment.amount }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ payment.method_of_payment }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ payment.for_year }}&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            {% empty %}&#10;                &lt;tr&gt;&#10;                    &lt;td colspan=&quot;4&quot;&gt;No payments recorded.&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&#10;    &lt;h3&gt;Team Assignments&lt;/h3&gt;&#10;    &lt;table class=&quot;table table-bordered&quot;&gt;&#10;        &lt;thead class=&quot;table-dark&quot;&gt;&#10;            &lt;tr&gt;&#10;                &lt;th&gt;Team&lt;/th&gt;&#10;                &lt;th&gt;Role&lt;/th&gt;&#10;                &lt;th&gt;Session Date&lt;/th&gt;&#10;                &lt;th&gt;Session Type&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;        &lt;/thead&gt;&#10;        &lt;tbody&gt;&#10;            {% for assignment in team_assignments %}&#10;                &lt;tr&gt;&#10;                    &lt;td&gt;{{ assignment.team_formation.team_name }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ assignment.role }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ assignment.team_formation.session_date }}&lt;/td&gt;&#10;                    &lt;td&gt;{% if assignment.team_formation.is_game %}Game{% else %}Training{% endif %}&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            {% empty %}&#10;                &lt;tr&gt;&#10;                    &lt;td colspan=&quot;4&quot;&gt;No team assignments.&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&#10;    &lt;br&gt;&#10;    &lt;a href=&quot;{% url 'club_member_edit' member.pk %}&quot; class=&quot;btn btn-primary&quot;&gt;Edit&lt;/a&gt;&#10;    &lt;a href=&quot;{% url 'club_member_delete' member.pk %}&quot; class=&quot;btn btn-danger&quot;&gt;Delete&lt;/a&gt;&#10;    &lt;a href=&quot;{% url 'club_member_list' %}&quot; class=&quot;btn btn-secondary&quot;&gt;Back to list&lt;/a&gt;&#10;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/club_member_form.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/club_member_form.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;{{ action }} Club Member - MVC System&lt;/title&gt;&#10;    &lt;h1&gt;{{ action }} Club Member&lt;/h1&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;{{ action }} Club Member&lt;/h1&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;{{ action }} Club Member - MVC System&lt;/title&gt;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;{{ action }} Club Member&lt;/h1&gt;&#10;&#10;    &lt;form method=&quot;post&quot; class=&quot;needs-validation&quot; novalidate&gt;&#10;        {% csrf_token %}&#10;        &lt;table class=&quot;table&quot;&gt;&#10;            {{ form.as_table }}&#10;        &lt;/table&gt;&#10;        &lt;br&gt;&#10;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;{{ action }} club member&lt;/button&gt;&#10;        &lt;a href=&quot;{% if member %}{% url 'club_member_detail' member.pk %}{% else %}{% url 'club_member_list' %}{% endif %}&quot; class=&quot;btn btn-secondary&quot;&gt;Cancel&lt;/a&gt;&#10;    &lt;/form&gt;&#10;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/club_member_list.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/club_member_list.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Club Members - MVC System&lt;/title&gt;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;Club Member Management&lt;/h1&gt;&#10;&#10;    {% if messages %}&#10;        {% for message in messages %}&#10;            &lt;div class=&quot;alert alert-info&quot;&gt;{{ message }}&lt;/div&gt;&#10;        {% endfor %}&#10;    {% endif %}&#10;&#10;    &lt;div class=&quot;mb-3&quot;&gt;&#10;        &lt;a class=&quot;btn btn-success&quot; href=&quot;{% url 'create_member' %}&quot;&gt;Add new club member&lt;/a&gt;&#10;        &lt;a class=&quot;btn btn-secondary&quot; href=&quot;{% url 'main_interface' %}&quot;&gt;Back to main&lt;/a&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;table class=&quot;table table-bordered&quot;&gt;&#10;        &lt;thead class=&quot;table-dark&quot;&gt;&#10;            &lt;tr&gt;&#10;                &lt;th&gt;First Name&lt;/th&gt;&#10;                &lt;th&gt;Last Name&lt;/th&gt;&#10;                &lt;th&gt;Membership Number&lt;/th&gt;&#10;                &lt;th&gt;Actions&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;        &lt;/thead&gt;&#10;        &lt;tbody&gt;&#10;            {% for member in members %}&#10;            &lt;tr&gt;&#10;                &lt;td&gt;{{ member.first_name }}&lt;/td&gt;&#10;                &lt;td&gt;{{ member.last_name }}&lt;/td&gt;&#10;                &lt;td&gt;{{ member.membership_number }}&lt;/td&gt;&#10;                &lt;td&gt;&#10;                    &lt;a class=&quot;btn btn-info btn-sm&quot; href=&quot;{% url 'club_member_detail' member.pk %}&quot;&gt;View&lt;/a&gt;&#10;                    &lt;a class=&quot;btn btn-danger btn-sm&quot; href=&quot;{% url 'club_member_delete' member.pk %}&quot;&gt;Delete&lt;/a&gt;&#10;                &lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Club Members - MVC System&lt;/title&gt;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;Club Member Management&lt;/h1&gt;&#10;&#10;    {% if messages %}&#10;        {% for message in messages %}&#10;            &lt;div class=&quot;alert alert-info&quot;&gt;{{ message }}&lt;/div&gt;&#10;        {% endfor %}&#10;    {% endif %}&#10;&#10;    &lt;div class=&quot;mb-3&quot;&gt;&#10;        &lt;a class=&quot;btn btn-success&quot; href=&quot;{% url 'create_member' %}&quot;&gt;Add new club member&lt;/a&gt;&#10;        &lt;a class=&quot;btn btn-secondary&quot; href=&quot;{% url 'main_interface' %}&quot;&gt;Back to main&lt;/a&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;table class=&quot;table table-bordered&quot;&gt;&#10;        &lt;thead class=&quot;table-dark&quot;&gt;&#10;            &lt;tr&gt;&#10;                &lt;th&gt;First Name&lt;/th&gt;&#10;                &lt;th&gt;Last Name&lt;/th&gt;&#10;                &lt;th&gt;Membership Number&lt;/th&gt;&#10;                &lt;th&gt;Actions&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;        &lt;/thead&gt;&#10;        &lt;tbody&gt;&#10;            {% for member in club_members %}&#10;            &lt;tr&gt;&#10;                &lt;td&gt;{{ member.first_name }}&lt;/td&gt;&#10;                &lt;td&gt;{{ member.last_name }}&lt;/td&gt;&#10;                &lt;td&gt;{{ member.membership_number }}&lt;/td&gt;&#10;                &lt;td&gt;&#10;                    &lt;a class=&quot;btn btn-info btn-sm&quot; href=&quot;{% url 'club_member_detail' member.pk %}&quot;&gt;View&lt;/a&gt;&#10;                    &lt;a class=&quot;btn btn-danger btn-sm&quot; href=&quot;{% url 'club_member_delete' member.pk %}&quot;&gt;Delete&lt;/a&gt;&#10;                &lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/family_member_confirm_delete.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/family_member_confirm_delete.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Delete Family Member - MVC System&lt;/title&gt;&#10;    &lt;h1&gt;Delete Family Member&lt;/h1&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;Delete Family Member&lt;/h1&gt;&#10;&#10;    &lt;p&gt;Are you sure you want to delete &lt;strong&gt;{{ family_member.first_name }} {{ family_member.last_name }}&lt;/strong&gt;?&lt;/p&gt;&#10;&#10;        &lt;button type=&quot;submit&quot; style=&quot;background: red; color: white; padding: 8px 16px;&quot;&gt;Yes, Delete&lt;/button&gt;&#10;        &lt;a href=&quot;{% url 'family_member_detail' family_member.pk %}&quot;&gt;Cancel&lt;/a&gt;&#10;        &lt;button type=&quot;submit&quot; style=&quot;background: red; color: white; padding: 8px 16px;&quot;&gt;Yes, Delete&lt;/button&gt;&#10;        &lt;a href=&quot;{% url 'family_member_detail' family_member.pk %}&quot;&gt;Cancel&lt;/a&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Delete Family Member - MVC System&lt;/title&gt;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;Delete Family Member&lt;/h1&gt;&#10;    &lt;div class=&quot;alert alert-danger&quot;&gt;&#10;        &lt;p&gt;Are you sure you want to delete &lt;strong&gt;{{ family_member.first_name }} {{ family_member.last_name }}&lt;/strong&gt;?&lt;/p&gt;&#10;    &lt;/div&gt;&#10;    &lt;form method=&quot;post&quot;&gt;&#10;        {% csrf_token %}&#10;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-danger&quot;&gt;Yes, Delete&lt;/button&gt;&#10;        &lt;a href=&quot;{% url 'family_member_detail' family_member.pk %}&quot; class=&quot;btn btn-secondary&quot;&gt;Cancel&lt;/a&gt;&#10;    &lt;/form&gt;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/family_member_detail.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/family_member_detail.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Family Member Details - MVC System&lt;/title&gt;&#10;    &lt;h1&gt;Family Member Details&lt;/h1&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;Family Member Details&lt;/h1&gt;&#10;&#10;    &lt;table border=&quot;1&quot;&gt;&#10;        &lt;thead&gt;&#10;    &lt;table border=&quot;1&quot;&gt;&#10;        &lt;thead&gt;&#10;                &lt;th&gt;Phone&lt;/th&gt;&#10;                &lt;th&gt;Relationship&lt;/th&gt;&#10;    &lt;a href=&quot;{% url 'secondary_family_member_create' family_member.pk %}&quot;&gt;Add Secondary Contact&lt;/a&gt;&#10;            &lt;/tr&gt;&#10;    &lt;a href=&quot;{% url 'secondary_family_member_create' family_member.pk %}&quot;&gt;Add Secondary Contact&lt;/a&gt;&#10;        &lt;thead&gt;&#10;    &lt;table border=&quot;1&quot;&gt;&#10;        &lt;thead&gt;&#10;                    &lt;td&gt;{{ secondary.first_name }} {{ secondary.last_name }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ secondary.telephone_number }}&lt;/td&gt;&#10;    &lt;a href=&quot;{% url 'secondary_family_member_create' family_member.pk %}&quot;&gt;Add Secondary Contact&lt;/a&gt;&#10;                    &lt;td&gt;&#10;    &lt;a href=&quot;{% url 'secondary_family_member_create' family_member.pk %}&quot;&gt;Add Secondary Contact&lt;/a&gt;&#10;        &lt;thead&gt;&#10;    &lt;table border=&quot;1&quot;&gt;&#10;        &lt;thead&gt;&#10;            {% empty %}&#10;                &lt;tr&gt;&#10;                    &lt;td colspan=&quot;4&quot;&gt;No secondary contacts.&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;                        &lt;a href=&quot;{% url 'secondary_family_member_edit' secondary.pk %}&quot;&gt;Edit&lt;/a&gt; |&#10;                        &lt;a href=&quot;{% url 'secondary_family_member_delete' secondary.pk %}&quot;&gt;Delete&lt;/a&gt;&#10;                        &lt;a href=&quot;{% url 'secondary_family_member_edit' secondary.pk %}&quot;&gt;Edit&lt;/a&gt; |&#10;                        &lt;a href=&quot;{% url 'secondary_family_member_delete' secondary.pk %}&quot;&gt;Delete&lt;/a&gt;&#10;    &lt;h3&gt;Associated Club Members&lt;/h3&gt;&#10;    &lt;table border=&quot;1&quot;&gt;&#10;        &lt;thead&gt;&#10;    &lt;table border=&quot;1&quot;&gt;&#10;                        &lt;a href=&quot;{% url 'secondary_family_member_edit' secondary.pk %}&quot;&gt;Edit&lt;/a&gt; |&#10;                        &lt;a href=&quot;{% url 'secondary_family_member_delete' secondary.pk %}&quot;&gt;Delete&lt;/a&gt;&#10;                        &lt;a href=&quot;{% url 'secondary_family_member_edit' secondary.pk %}&quot;&gt;Edit&lt;/a&gt; |&#10;                        &lt;a href=&quot;{% url 'secondary_family_member_delete' secondary.pk %}&quot;&gt;Delete&lt;/a&gt;&#10;            &lt;/tr&gt;&#10;    &lt;table border=&quot;1&quot;&gt;&#10;        &lt;thead&gt;&#10;    &lt;table border=&quot;1&quot;&gt;&#10;        &lt;thead&gt;&#10;                    &lt;td&gt;{{ association.minor_member.first_name }} {{ association.minor_member.last_name }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ association.relationship }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ association.start_date }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ association.end_date|default:&quot;Active&quot; }}&lt;/td&gt;&#10;    &lt;table border=&quot;1&quot;&gt;&#10;        &lt;thead&gt;&#10;    &lt;table border=&quot;1&quot;&gt;&#10;        &lt;thead&gt;&#10;                &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&#10;    &lt;br&gt;&#10;    &lt;a href=&quot;{% url 'family_member_edit' family_member.pk %}&quot;&gt;Edit&lt;/a&gt; |&#10;    &lt;a href=&quot;{% url 'family_member_delete' family_member.pk %}&quot;&gt;Delete&lt;/a&gt; |&#10;    &lt;a href=&quot;{% url 'family_member_edit' family_member.pk %}&quot;&gt;Edit&lt;/a&gt; |&#10;    &lt;a href=&quot;{% url 'family_member_delete' family_member.pk %}&quot;&gt;Delete&lt;/a&gt; |&#10;    &lt;a href=&quot;{% url 'family_member_list' %}&quot;&gt;Back to List&lt;/a&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Family Member Details - MVC System&lt;/title&gt;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;Family Member Details&lt;/h1&gt;&#10;&#10;    &lt;table class=&quot;table table-bordered&quot;&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Name:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ family_member.first_name }} {{ family_member.last_name }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Email:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ family_member.email_address }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Phone:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ family_member.telephone_number }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Date of Birth:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ family_member.date_of_birth }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Address:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ family_member.address }}, {{ family_member.city }}, {{ family_member.province }} {{ family_member.postal_code }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Location:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ family_member.location.name|default:&quot;No Location&quot; }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;SSN:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ family_member.social_security_number }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Medicare:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ family_member.medicare_card_number }}&lt;/td&gt;&lt;/tr&gt;&#10;    &lt;/table&gt;&#10;&#10;    &lt;h3&gt;Secondary Contacts&lt;/h3&gt;&#10;    &lt;a href=&quot;{% url 'secondary_family_member_create' family_member.pk %}&quot; class=&quot;btn btn-success mb-3&quot;&gt;Add Secondary Contact&lt;/a&gt;&#10;&#10;    &lt;table class=&quot;table table-bordered&quot;&gt;&#10;        &lt;thead class=&quot;table-dark&quot;&gt;&#10;            &lt;tr&gt;&#10;                &lt;th&gt;Name&lt;/th&gt;&#10;                &lt;th&gt;Phone&lt;/th&gt;&#10;                &lt;th&gt;Relationship&lt;/th&gt;&#10;                &lt;th&gt;Actions&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;        &lt;/thead&gt;&#10;        &lt;tbody&gt;&#10;            {% for secondary in secondary_contacts %}&#10;                &lt;tr&gt;&#10;                    &lt;td&gt;{{ secondary.first_name }} {{ secondary.last_name }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ secondary.telephone_number }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ secondary.relationship }}&lt;/td&gt;&#10;                    &lt;td&gt;&#10;                        &lt;a href=&quot;{% url 'secondary_family_member_edit' secondary.pk %}&quot; class=&quot;btn btn-warning btn-sm&quot;&gt;Edit&lt;/a&gt;&#10;                        &lt;a href=&quot;{% url 'secondary_family_member_delete' secondary.pk %}&quot; class=&quot;btn btn-danger btn-sm&quot;&gt;Delete&lt;/a&gt;&#10;                    &lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            {% empty %}&#10;                &lt;tr&gt;&#10;                    &lt;td colspan=&quot;4&quot;&gt;No secondary contacts.&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&#10;    &lt;h3&gt;Associated Club Members&lt;/h3&gt;&#10;    &lt;table class=&quot;table table-bordered&quot;&gt;&#10;        &lt;thead class=&quot;table-dark&quot;&gt;&#10;            &lt;tr&gt;&#10;                &lt;th&gt;Member Name&lt;/th&gt;&#10;                &lt;th&gt;Relationship&lt;/th&gt;&#10;                &lt;th&gt;Start Date&lt;/th&gt;&#10;                &lt;th&gt;End Date&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;        &lt;/thead&gt;&#10;        &lt;tbody&gt;&#10;            {% for association in associated_members %}&#10;                &lt;tr&gt;&#10;                    &lt;td&gt;{{ association.minor_member.first_name }} {{ association.minor_member.last_name }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ association.relationship }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ association.start_date }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ association.end_date|default:&quot;Active&quot; }}&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            {% empty %}&#10;                &lt;tr&gt;&#10;                    &lt;td colspan=&quot;4&quot;&gt;No associated club members.&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&#10;    &lt;br&gt;&#10;    &lt;a href=&quot;{% url 'family_member_edit' family_member.pk %}&quot; class=&quot;btn btn-primary&quot;&gt;Edit&lt;/a&gt;&#10;    &lt;a href=&quot;{% url 'family_member_delete' family_member.pk %}&quot; class=&quot;btn btn-danger&quot;&gt;Delete&lt;/a&gt;&#10;    &lt;a href=&quot;{% url 'family_member_list' %}&quot; class=&quot;btn btn-secondary&quot;&gt;Back to List&lt;/a&gt;&#10;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/family_member_form.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/family_member_form.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;{{ action }} Family Member - MVC System&lt;/title&gt;&#10;    &lt;h1&gt;{{ action }} Family Member&lt;/h1&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;{{ action }} Family Member&lt;/h1&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;{{ action }} Family Member - MVC System&lt;/title&gt;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;{{ action }} Family Member&lt;/h1&gt;&#10;&#10;    &lt;form method=&quot;post&quot; class=&quot;needs-validation&quot; novalidate&gt;&#10;        {% csrf_token %}&#10;        &lt;table class=&quot;table&quot;&gt;&#10;            {{ form.as_table }}&#10;        &lt;/table&gt;&#10;        &lt;br&gt;&#10;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;{{ action }} Family Member&lt;/button&gt;&#10;        &lt;a href=&quot;{% url 'family_member_list' %}&quot; class=&quot;btn btn-secondary&quot;&gt;Cancel&lt;/a&gt;&#10;    &lt;/form&gt;&#10;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/family_member_list.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/family_member_list.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Family Members - MVC System&lt;/title&gt;&#10;    &lt;h1&gt;Family Member Management&lt;/h1&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;Family Member Management&lt;/h1&gt;&#10;                &lt;th&gt;Location&lt;/th&gt;&#10;            &lt;div&gt;{{ message }}&lt;/div&gt;&#10;    &lt;a href=&quot;{% url 'main_interface' %}&quot;&gt;Back to Main&lt;/a&gt;&#10;    &lt;a href=&quot;{% url 'family_member_create' %}&quot;&gt;Add New Family Member&lt;/a&gt;&#10;    &lt;a href=&quot;{% url 'main_interface' %}&quot;&gt;Back to Main&lt;/a&gt;&#10;                &lt;th&gt;Name&lt;/th&gt;&#10;    &lt;table border=&quot;1&quot;&gt;&#10;            &lt;div&gt;{{ message }}&lt;/div&gt;&#10;                &lt;th&gt;Location&lt;/th&gt;&#10;    &lt;a href=&quot;{% url 'family_member_create' %}&quot;&gt;Add New Family Member&lt;/a&gt;&#10;    &lt;a href=&quot;{% url 'main_interface' %}&quot;&gt;Back to Main&lt;/a&gt;&#10;    &lt;a href=&quot;{% url 'family_member_create' %}&quot;&gt;Add New Family Member&lt;/a&gt;&#10;    &lt;a href=&quot;{% url 'main_interface' %}&quot;&gt;Back to Main&lt;/a&gt;&#10;                &lt;th&gt;Name&lt;/th&gt;&#10;    &lt;table border=&quot;1&quot;&gt;&#10;        &lt;thead&gt;&#10;                &lt;th&gt;Location&lt;/th&gt;&#10;                &lt;th&gt;Name&lt;/th&gt;&#10;                &lt;th&gt;Email&lt;/th&gt;&#10;                &lt;th&gt;Phone&lt;/th&gt;&#10;                &lt;th&gt;Location&lt;/th&gt;&#10;                    &lt;td&gt;&#10;                        &lt;a href=&quot;{% url 'family_member_edit' family_member.pk %}&quot;&gt;Edit&lt;/a&gt; |&#10;                &lt;tr&gt;&#10;                    &lt;td&gt;&lt;a href=&quot;{% url 'family_member_detail' family_member.pk %}&quot;&gt;{{ family_member.first_name }} {{ family_member.last_name }}&lt;/a&gt;&lt;/td&gt;&#10;                    &lt;td&gt;{{ family_member.email_address }}&lt;/td&gt;&#10;                &lt;tr&gt;&#10;                    &lt;td&gt;&lt;a href=&quot;{% url 'family_member_detail' family_member.pk %}&quot;&gt;{{ family_member.first_name }} {{ family_member.last_name }}&lt;/a&gt;&lt;/td&gt;&#10;                    &lt;td&gt;{{ family_member.email_address }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ family_member.telephone_number }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ family_member.location.name|default:&quot;No Location&quot; }}&lt;/td&gt;&#10;                    &lt;td&gt;&#10;                        &lt;a href=&quot;{% url 'family_member_edit' family_member.pk %}&quot;&gt;Edit&lt;/a&gt; |&#10;                        &lt;a href=&quot;{% url 'family_member_delete' family_member.pk %}&quot;&gt;Delete&lt;/a&gt;&#10;                    &lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            {% empty %}&#10;                &lt;tr&gt;&#10;                    &lt;td colspan=&quot;5&quot;&gt;No family members found.&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;                    &lt;td colspan=&quot;5&quot;&gt;No family members found.&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;                    &lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            {% endfor %}&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#13;&#10;&lt;html lang=&quot;en&quot;&gt;&#13;&#10;&lt;head&gt;&#13;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#13;&#10;    &lt;title&gt;Family Members - MVC System&lt;/title&gt;&#13;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#13;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#13;&#10;&lt;/head&gt;&#13;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#13;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;Family Member Management&lt;/h1&gt;&#13;&#10;&#13;&#10;    {% if messages %}&#13;&#10;        {% for message in messages %}&#13;&#10;            &lt;div class=&quot;alert alert-info&quot;&gt;{{ message }}&lt;/div&gt;&#13;&#10;        {% endfor %}&#13;&#10;    {% endif %}&#13;&#10;&#13;&#10;    &lt;div class=&quot;mb-3&quot;&gt;&#13;&#10;        &lt;a class=&quot;btn btn-success&quot; href=&quot;{% url 'family_member_create' %}&quot;&gt;Add New Family Member&lt;/a&gt;&#13;&#10;        &lt;a class=&quot;btn btn-secondary&quot; href=&quot;{% url 'main_interface' %}&quot;&gt;Back to Main&lt;/a&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&#13;&#10;    &lt;table class=&quot;table table-bordered&quot;&gt;&#13;&#10;        &lt;thead class=&quot;table-dark&quot;&gt;&#13;&#10;            &lt;tr&gt;&#13;&#10;                &lt;th&gt;First Name&lt;/th&gt;&#13;&#10;                &lt;th&gt;Last Name&lt;/th&gt;&#13;&#10;                &lt;th&gt;Relationship&lt;/th&gt;&#13;&#10;                &lt;th&gt;Actions&lt;/th&gt;&#13;&#10;            &lt;/tr&gt;&#13;&#10;        &lt;/thead&gt;&#13;&#10;        &lt;tbody&gt;&#13;&#10;            {% for family_member in family_members %}&#13;&#10;            &lt;tr&gt;&#13;&#10;                &lt;td&gt;{{ family_member.first_name }}&lt;/td&gt;&#13;&#10;                &lt;td&gt;{{ family_member.last_name }}&lt;/td&gt;&#13;&#10;                &lt;td&gt;{{ family_member.relationship }}&lt;/td&gt;&#13;&#10;                &lt;td&gt;&#13;&#10;                    &lt;a class=&quot;btn btn-info btn-sm&quot; href=&quot;{% url 'family_member_detail' family_member.pk %}&quot;&gt;View&lt;/a&gt;&#13;&#10;                    &lt;a class=&quot;btn btn-danger btn-sm&quot; href=&quot;{% url 'family_member_delete' family_member.pk %}&quot;&gt;Delete&lt;/a&gt;&#13;&#10;                &lt;/td&gt;&#13;&#10;            &lt;/tr&gt;&#13;&#10;            {% endfor %}&#13;&#10;        &lt;/tbody&gt;&#13;&#10;    &lt;/table&gt;&#13;&#10;&#13;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#13;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#13;&#10;&lt;/body&gt;&#13;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/inactive_members_report.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/inactive_members_report.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Inactive Members Report&lt;/title&gt;&#10;&lt;h1&gt;Inactive Members Report&lt;/h1&gt;&#10;&lt;body&gt;&#10;&lt;h1&gt;Inactive Members Report&lt;/h1&gt;&#10;    &lt;ul&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#13;&#10;&lt;html lang=&quot;en&quot;&gt;&#13;&#10;&lt;head&gt;&#13;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#13;&#10;    &lt;title&gt;Inactive Members Report&lt;/title&gt;&#13;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#13;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#13;&#10;&lt;/head&gt;&#13;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#13;&#10;&lt;h1 class=&quot;mb-4&quot;&gt;Inactive Members Report&lt;/h1&gt;&#13;&#10;&#13;&#10;{% if inactive_members %}&#13;&#10;    &lt;ul class=&quot;list-group&quot;&gt;&#13;&#10;        {% for member in inactive_members %}&#13;&#10;            &lt;li class=&quot;list-group-item&quot;&gt;{{ member.first_name }} {{ member.last_name }} - Joined: {{ member.date_joined }}&lt;/li&gt;&#13;&#10;        {% endfor %}&#13;&#10;    &lt;/ul&gt;&#13;&#10;{% else %}&#13;&#10;    &lt;div class=&quot;alert alert-warning&quot;&gt;No inactive members found.&lt;/div&gt;&#13;&#10;{% endif %}&#13;&#10;&#13;&#10;&lt;!-- Add Bootstrap JS --&gt;&#13;&#10;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#13;&#10;&lt;/body&gt;&#13;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/main_interface.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/main_interface.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Dashboard&lt;/title&gt;&#10;&lt;h1&gt;MVC&lt;/h1&gt;&#10;&lt;body&gt;&#10;&lt;h1&gt;MVC&lt;/h1&gt;&#10;&lt;ul&gt;&#10;&lt;button onclick=&quot;window.location.href='{% url 'queries_asked:index' %}'&quot;&gt;Go to Queries&lt;/button&gt;&#10;&lt;ul&gt;&#10;&lt;h2&gt;Club Member Management&lt;/h2&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;a href=&quot;{% url 'create_member' %}&quot;&gt;Register a new club member&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li&gt;&lt;a href=&quot;{% url 'member_list' %}&quot;&gt;View all club members&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li&gt;&lt;a href=&quot;{% url 'club_member_list' %}&quot;&gt;Manage club members&lt;/a&gt;&lt;/li&gt;&#10;&lt;h2&gt;Personnel Management&lt;/h2&gt;&#10;&lt;ul&gt;&#10;&lt;h2&gt;Personnel Management&lt;/h2&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;a href=&quot;{% url 'personnel_list' %}&quot;&gt;Manage personnel&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li&gt;&lt;a href=&quot;{% url 'personnel_create' %}&quot;&gt;Add new personnel&lt;/a&gt;&lt;/li&gt;&#10;&lt;h2&gt;Family Member Management&lt;/h2&gt;&#10;&lt;ul&gt;&#10;&lt;h2&gt;Family Member Management&lt;/h2&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;a href=&quot;{% url 'family_member_list' %}&quot;&gt;Manage family members&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li&gt;&lt;a href=&quot;{% url 'family_member_create' %}&quot;&gt;Add new family member&lt;/a&gt;&lt;/li&gt;&#10;&lt;h2&gt;Reports&lt;/h2&gt;&#10;&lt;ul&gt;&#10;&lt;h2&gt;Reports&lt;/h2&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;a href=&quot;{% url 'location_report' %}&quot;&gt;Get a report on all locations&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li&gt;&lt;a href=&quot;{% url 'inactive_members_report' %}&quot;&gt;Inactive members report&lt;/a&gt;&lt;/li&gt;&#10;&lt;h2&gt;Team Management&lt;/h2&gt;&#10;&lt;ul&gt;&#10;&lt;h2&gt;Team Management&lt;/h2&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;a href=&quot;{% url 'team_formation_list' %}&quot;&gt;View all team formations&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li&gt;&lt;a href=&quot;{% url 'team_formation_create' %}&quot;&gt;Create new team formation&lt;/a&gt;&lt;/li&gt;&#10;    {% for row in report_data %}&#10;&lt;table border=&quot;1&quot;&gt;&#10;        {% for cell in row %}&#10;        &lt;td&gt;{{ cell }}&lt;/td&gt;&#10;        {% endfor %}&#10;    &lt;/tr&gt;&#10;&lt;table border=&quot;1&quot;&gt;&#10;    &lt;/tbody&gt;&#10;&lt;/table&gt;&#10;&lt;table border=&quot;1&quot;&gt;&#10;&lt;p&gt;No results found for this report.&lt;/p&gt;&#10;{% endif %}&#10;&lt;p&gt;No results found for this report.&lt;/p&gt;&#10;&lt;h3&gt;All Club Members&lt;/h3&gt;&#10;&lt;table border=&quot;1&quot;&gt;&#10;    &lt;thead&gt;&#10;    &lt;tr&gt;&#10;        &lt;th&gt;Membership Number&lt;/th&gt;&#10;&lt;p&gt;No results found for this report.&lt;/p&gt;&#10;    {% for member in members %}&#10;&lt;p&gt;No results found for this report.&lt;/p&gt;&#10;        &lt;td&gt;{{ member.first_name }}&lt;/td&gt;&#10;&lt;table border=&quot;1&quot;&gt;&#10;        &lt;td&gt;{{ member.email_address }}&lt;/td&gt;&#10;        &lt;td&gt;{{ member.location.name|default:&quot;No Location&quot; }}&lt;/td&gt;&#10;        &lt;td&gt;{{ member.date_joined }}&lt;/td&gt;&#10;&lt;p&gt;No results found for this report.&lt;/p&gt;&#10;&lt;/table&gt;&#10;&lt;p&gt;No results found for this report.&lt;/p&gt;&#10;&lt;h3&gt;All Locations&lt;/h3&gt;&#10;&lt;table border=&quot;1&quot;&gt;&#10;    &lt;thead&gt;&#10;&lt;table border=&quot;1&quot;&gt;&#10;        &lt;th&gt;Name&lt;/th&gt;&#10;&lt;table border=&quot;1&quot;&gt;&#10;        &lt;th&gt;Address&lt;/th&gt;&#10;        &lt;th&gt;City&lt;/th&gt;&#10;        &lt;th&gt;Phone&lt;/th&gt;&#10;&lt;table border=&quot;1&quot;&gt;&#10;    &lt;/tr&gt;&#10;    &lt;/thead&gt;&#10;    &lt;tbody&gt;&#10;    {% for location in location_data %}&#10;    &lt;tr&gt;&#10;        &lt;td&gt;{{ location.name }}&lt;/td&gt;&#10;        &lt;td&gt;{{ location.type }}&lt;/td&gt;&#10;&lt;table border=&quot;1&quot;&gt;&#10;        &lt;td&gt;{{ location.city }}&lt;/td&gt;&#10;        &lt;td&gt;{{ location.phone_number }}&lt;/td&gt;&#10;        &lt;td&gt;{{ location.max_capacity }}&lt;/td&gt;&#10;&lt;table border=&quot;1&quot;&gt;&#10;    {% endfor %}&#10;    &lt;/tbody&gt;&#10;&lt;/table&gt;&#10;{% endif %}&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Dashboard&lt;/title&gt;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#10;&lt;h1 class=&quot;mb-4&quot;&gt;MVC&lt;/h1&gt;&#10;&lt;p&gt;Welcome to the main dashboard&lt;/p&gt;&#10;&lt;button class=&quot;btn btn-primary&quot; onclick=&quot;window.location.href='{% url 'queries_asked:index' %}'&quot;&gt;Go to Queries&lt;/button&gt;&#10;&#10;&lt;h2 class=&quot;mt-4&quot;&gt;Club Member Management&lt;/h2&gt;&#10;&lt;ul class=&quot;list-group&quot;&gt;&#10;    &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;{% url 'create_member' %}&quot;&gt;Register a new club member&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;{% url 'member_list' %}&quot;&gt;View all club members&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;{% url 'club_member_list' %}&quot;&gt;Manage club members&lt;/a&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2 class=&quot;mt-4&quot;&gt;Personnel Management&lt;/h2&gt;&#10;&lt;ul class=&quot;list-group&quot;&gt;&#10;    &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;{% url 'personnel_list' %}&quot;&gt;Manage personnel&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;{% url 'personnel_create' %}&quot;&gt;Add new personnel&lt;/a&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2 class=&quot;mt-4&quot;&gt;Family Member Management&lt;/h2&gt;&#10;&lt;ul class=&quot;list-group&quot;&gt;&#10;    &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;{% url 'family_member_list' %}&quot;&gt;Manage family members&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;{% url 'family_member_create' %}&quot;&gt;Add new family member&lt;/a&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2 class=&quot;mt-4&quot;&gt;Reports&lt;/h2&gt;&#10;&lt;ul class=&quot;list-group&quot;&gt;&#10;    &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;{% url 'location_report' %}&quot;&gt;Get a report on all locations&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;{% url 'inactive_members_report' %}&quot;&gt;Inactive members report&lt;/a&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2 class=&quot;mt-4&quot;&gt;Team Management&lt;/h2&gt;&#10;&lt;ul class=&quot;list-group&quot;&gt;&#10;    &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;{% url 'team_formation_list' %}&quot;&gt;View all team formations&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=&quot;{% url 'team_formation_create' %}&quot;&gt;Create new team formation&lt;/a&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;{% if report_title %}&#10;&lt;h3&gt;{{ report_title }}&lt;/h3&gt;&#10;{% if report_data %}&#10;&lt;table class=&quot;table table-bordered&quot;&gt;&#10;    &lt;thead&gt;&#10;    &lt;tr&gt;&#10;        {% for header in report_headers %}&#10;        &lt;th&gt;{{ header }}&lt;/th&gt;&#10;        {% endfor %}&#10;    &lt;/tr&gt;&#10;    &lt;/thead&gt;&#10;    &lt;tbody&gt;&#10;    {% for row in report_data %}&#10;    &lt;tr&gt;&#10;        {% for cell in row %}&#10;        &lt;td&gt;{{ cell }}&lt;/td&gt;&#10;        {% endfor %}&#10;    &lt;/tr&gt;&#10;    {% endfor %}&#10;    &lt;/tbody&gt;&#10;&lt;/table&gt;&#10;{% else %}&#10;&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;&#10;    No results found for this report.&#10;&lt;/div&gt;&#10;{% endif %}&#10;{% endif %}&#10;&#10;{% if members %}&#10;&lt;h3&gt;All Club Members&lt;/h3&gt;&#10;&lt;table class=&quot;table table-bordered&quot;&gt;&#10;    &lt;thead&gt;&#10;    &lt;tr&gt;&#10;        &lt;th&gt;Membership Number&lt;/th&gt;&#10;        &lt;th&gt;First Name&lt;/th&gt;&#10;        &lt;th&gt;Last Name&lt;/th&gt;&#10;        &lt;th&gt;Email&lt;/th&gt;&#10;        &lt;th&gt;Location&lt;/th&gt;&#10;        &lt;th&gt;Date Joined&lt;/th&gt;&#10;    &lt;/tr&gt;&#10;    &lt;/thead&gt;&#10;    &lt;tbody&gt;&#10;    {% for member in members %}&#10;    &lt;tr&gt;&#10;        &lt;td&gt;{{ member.membership_number }}&lt;/td&gt;&#10;        &lt;td&gt;{{ member.first_name }}&lt;/td&gt;&#10;        &lt;td&gt;{{ member.last_name }}&lt;/td&gt;&#10;        &lt;td&gt;{{ member.email_address }}&lt;/td&gt;&#10;        &lt;td&gt;{{ member.location.name|default:&quot;No Location&quot; }}&lt;/td&gt;&#10;        &lt;td&gt;{{ member.date_joined }}&lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    {% endfor %}&#10;    &lt;/tbody&gt;&#10;&lt;/table&gt;&#10;{% endif %}&#10;&#10;{% if location_data %}&#10;&lt;h3&gt;All Locations&lt;/h3&gt;&#10;&lt;table class=&quot;table table-bordered&quot;&gt;&#10;    &lt;thead&gt;&#10;    &lt;tr&gt;&#10;        &lt;th&gt;Name&lt;/th&gt;&#10;        &lt;th&gt;Type&lt;/th&gt;&#10;        &lt;th&gt;Address&lt;/th&gt;&#10;        &lt;th&gt;City&lt;/th&gt;&#10;        &lt;th&gt;Phone&lt;/th&gt;&#10;        &lt;th&gt;Max Capacity&lt;/th&gt;&#10;    &lt;/tr&gt;&#10;    &lt;/thead&gt;&#10;    &lt;tbody&gt;&#10;    {% for location in location_data %}&#10;    &lt;tr&gt;&#10;        &lt;td&gt;{{ location.name }}&lt;/td&gt;&#10;        &lt;td&gt;{{ location.type }}&lt;/td&gt;&#10;        &lt;td&gt;{{ location.address }}&lt;/td&gt;&#10;        &lt;td&gt;{{ location.city }}&lt;/td&gt;&#10;        &lt;td&gt;{{ location.phone_number }}&lt;/td&gt;&#10;        &lt;td&gt;{{ location.max_capacity }}&lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    {% endfor %}&#10;    &lt;/tbody&gt;&#10;&lt;/table&gt;&#10;{% endif %}&#10;&#10;&lt;!-- Add Bootstrap JS --&gt;&#10;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/member_creation.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/member_creation.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Register Club Member&lt;/title&gt;&#10;    &lt;h1&gt;Register a New Club Member&lt;/h1&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;Register a New Club Member&lt;/h1&gt;&#10;    &lt;form method=&quot;post&quot;&gt;&#10;        &lt;button type=&quot;submit&quot;&gt;Register Member&lt;/button&gt;&#10;        {{ form.as_p }}&#10;        &lt;button type=&quot;submit&quot;&gt;Register Member&lt;/button&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Register Club Member&lt;/title&gt;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;Register a New Club Member&lt;/h1&gt;&#10;    &lt;form method=&quot;post&quot; class=&quot;needs-validation&quot; novalidate&gt;&#10;        {% csrf_token %}&#10;        &lt;div class=&quot;mb-3&quot;&gt;&#10;            {{ form.as_p }}&#10;        &lt;/div&gt;&#10;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Register Member&lt;/button&gt;&#10;    &lt;/form&gt;&#10;&#10;    &lt;a href=&quot;{% url 'main_interface' %}&quot; class=&quot;btn btn-secondary mt-3&quot;&gt;Back to Dashboard&lt;/a&gt;&#10;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/personnel_confirm_delete.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/personnel_confirm_delete.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Delete Personnel - MVC System&lt;/title&gt;&#10;    &lt;h1&gt;Delete Personnel&lt;/h1&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;Delete Personnel&lt;/h1&gt;&#10;        &lt;a href=&quot;{% url 'personnel_detail' personnel.pk %}&quot;&gt;Cancel&lt;/a&gt;&#10;    &lt;p&gt;Are you sure you want to delete &lt;strong&gt;{{ personnel.first_name }} {{ personnel.last_name }}&lt;/strong&gt;?&lt;/p&gt;&#10;        &lt;a href=&quot;{% url 'personnel_detail' personnel.pk %}&quot;&gt;Cancel&lt;/a&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Delete Personnel - MVC System&lt;/title&gt;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;Delete Personnel&lt;/h1&gt;&#10;&#10;    &lt;div class=&quot;alert alert-danger&quot;&gt;&#10;        &lt;p&gt;Are you sure you want to delete &lt;strong&gt;{{ personnel.first_name }} {{ personnel.last_name }}&lt;/strong&gt;?&lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;form method=&quot;post&quot;&gt;&#10;        {% csrf_token %}&#10;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-danger&quot;&gt;Yes, Delete&lt;/button&gt;&#10;        &lt;a href=&quot;{% url 'personnel_detail' personnel.pk %}&quot; class=&quot;btn btn-secondary&quot;&gt;Cancel&lt;/a&gt;&#10;    &lt;/form&gt;&#10;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/personnel_detail.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/personnel_detail.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Personnel Details - MVC System&lt;/title&gt;&#10;    &lt;h1&gt;Personnel Details&lt;/h1&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;Personnel Details&lt;/h1&gt;&#10;    &lt;a href=&quot;{% url 'personnel_delete' personnel.pk %}&quot;&gt;Delete&lt;/a&gt; |&#10;    &lt;table border=&quot;1&quot;&gt;&#10;    &lt;a href=&quot;{% url 'personnel_delete' personnel.pk %}&quot;&gt;Delete&lt;/a&gt; |&#10;    &lt;a href=&quot;{% url 'personnel_list' %}&quot;&gt;Back to List&lt;/a&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Personnel Details - MVC System&lt;/title&gt;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;Personnel Details&lt;/h1&gt;&#10;&#10;    &lt;table class=&quot;table table-bordered&quot;&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Name:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ personnel.first_name }} {{ personnel.last_name }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Role:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ personnel.role }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Mandate:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ personnel.mandate }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Date of Birth:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ personnel.date_of_birth }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Email:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ personnel.email_address }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Phone:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ personnel.telephone_number }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Address:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ personnel.address }}, {{ personnel.city }}, {{ personnel.province }} {{ personnel.postal_code }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;SSN:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ personnel.social_security_number }}&lt;/td&gt;&lt;/tr&gt;&#10;        &lt;tr&gt;&lt;td&gt;&lt;strong&gt;Medicare:&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;{{ personnel.medicare_card_number }}&lt;/td&gt;&lt;/tr&gt;&#10;    &lt;/table&gt;&#10;&#10;    &lt;a href=&quot;{% url 'personnel_edit' personnel.pk %}&quot; class=&quot;btn btn-primary&quot;&gt;Edit&lt;/a&gt;&#10;    &lt;a href=&quot;{% url 'personnel_delete' personnel.pk %}&quot; class=&quot;btn btn-danger&quot;&gt;Delete&lt;/a&gt;&#10;    &lt;a href=&quot;{% url 'personnel_list' %}&quot; class=&quot;btn btn-secondary&quot;&gt;Back to List&lt;/a&gt;&#10;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/personnel_form.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/personnel_form.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;{{ action }} Personnel - MVC System&lt;/title&gt;&#10;&lt;h1&gt;{{ action }} Personnel&lt;/h1&gt;&#10;&lt;body&gt;&#10;&lt;h1&gt;{{ action }} Personnel&lt;/h1&gt;&#10;    {% csrf_token %}&#10;&lt;form method=&quot;post&quot;&gt;&#10;    {% csrf_token %}&#10;    &lt;table&gt;&#10;        {{ form.as_table }}&#10;    &lt;/table&gt;&#10;    &lt;br&gt;&#10;    &lt;button type=&quot;submit&quot;&gt;{{ action }} Personnel&lt;/button&gt;&#10;    &lt;a href=&quot;{% url 'personnel_list' %}&quot;&gt;Cancel&lt;/a&gt;&#10;&lt;/form&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;{{ action }} Personnel - MVC System&lt;/title&gt;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;{{ action }} Personnel&lt;/h1&gt;&#10;&#10;    &lt;form method=&quot;post&quot; class=&quot;needs-validation&quot; novalidate&gt;&#10;        {% csrf_token %}&#10;        &lt;table class=&quot;table&quot;&gt;&#10;            {{ form.as_table }}&#10;        &lt;/table&gt;&#10;        &lt;br&gt;&#10;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;{{ action }} Personnel&lt;/button&gt;&#10;        &lt;a href=&quot;{% url 'personnel_list' %}&quot; class=&quot;btn btn-secondary&quot;&gt;Cancel&lt;/a&gt;&#10;    &lt;/form&gt;&#10;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/personnel_list.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/personnel_list.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Personnel List - MVC System&lt;/title&gt;&#10;    &lt;h1&gt;Personnel Management&lt;/h1&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;Personnel Management&lt;/h1&gt;&#10;                &lt;th&gt;Email&lt;/th&gt;&#10;            &lt;div&gt;{{ message }}&lt;/div&gt;&#10;    &lt;a href=&quot;{% url 'main_interface' %}&quot;&gt;Back to Main&lt;/a&gt;&#10;    &lt;a href=&quot;{% url 'personnel_create' %}&quot;&gt;Add New Personnel&lt;/a&gt;&#10;    &lt;a href=&quot;{% url 'main_interface' %}&quot;&gt;Back to Main&lt;/a&gt;&#10;                &lt;th&gt;Name&lt;/th&gt;&#10;    &lt;table border=&quot;1&quot;&gt;&#10;            &lt;div&gt;{{ message }}&lt;/div&gt;&#10;                &lt;th&gt;Email&lt;/th&gt;&#10;    &lt;a href=&quot;{% url 'personnel_create' %}&quot;&gt;Add New Personnel&lt;/a&gt;&#10;    &lt;a href=&quot;{% url 'main_interface' %}&quot;&gt;Back to Main&lt;/a&gt;&#10;    &lt;a href=&quot;{% url 'personnel_create' %}&quot;&gt;Add New Personnel&lt;/a&gt;&#10;    &lt;a href=&quot;{% url 'main_interface' %}&quot;&gt;Back to Main&lt;/a&gt;&#10;                &lt;th&gt;Name&lt;/th&gt;&#10;    &lt;table border=&quot;1&quot;&gt;&#10;        &lt;thead&gt;&#10;                &lt;th&gt;Email&lt;/th&gt;&#10;                &lt;th&gt;Name&lt;/th&gt;&#10;                    &lt;td&gt;{{ person.role }}&lt;/td&gt;&#10;                &lt;th&gt;Mandate&lt;/th&gt;&#10;                &lt;th&gt;Email&lt;/th&gt;&#10;                &lt;th&gt;Phone&lt;/th&gt;&#10;                    &lt;td&gt;{{ person.mandate }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ person.email_address }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ person.telephone_number }}&lt;/td&gt;&#10;                    &lt;td&gt;&#10;                        &lt;a href=&quot;{% url 'personnel_edit' person.pk %}&quot;&gt;Edit&lt;/a&gt; |&#10;            {% for person in personnel_list %}&#10;                &lt;tr&gt;&#10;            {% for person in personnel_list %}&#10;                &lt;tr&gt;&#10;                    &lt;td&gt;&lt;a href=&quot;{% url 'personnel_detail' person.pk %}&quot;&gt;{{ person.first_name }} {{ person.last_name }}&lt;/a&gt;&lt;/td&gt;&#10;                    &lt;td&gt;{{ person.role }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ person.mandate }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ person.email_address }}&lt;/td&gt;&#10;                    &lt;td&gt;{{ person.telephone_number }}&lt;/td&gt;&#10;                    &lt;td&gt;&#10;                        &lt;a href=&quot;{% url 'personnel_edit' person.pk %}&quot;&gt;Edit&lt;/a&gt; |&#10;                        &lt;a href=&quot;{% url 'personnel_delete' person.pk %}&quot;&gt;Delete&lt;/a&gt;&#10;                    &lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            {% empty %}&#10;                &lt;tr&gt;&#10;                    &lt;td colspan=&quot;6&quot;&gt;No personnel found.&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            {% empty %}&#10;                        &lt;a href=&quot;{% url 'personnel_edit' person.pk %}&quot;&gt;Edit&lt;/a&gt; |&#10;                &lt;tr&gt;&#10;                    &lt;td colspan=&quot;6&quot;&gt;No personnel found.&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            {% empty %}&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#13;&#10;&lt;html lang=&quot;en&quot;&gt;&#13;&#10;&lt;head&gt;&#13;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#13;&#10;    &lt;title&gt;Personnel List - MVC System&lt;/title&gt;&#13;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#13;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#13;&#10;&lt;/head&gt;&#13;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#13;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;Personnel Management&lt;/h1&gt;&#13;&#10;&#13;&#10;    {% if messages %}&#13;&#10;        {% for message in messages %}&#13;&#10;            &lt;div class=&quot;alert alert-info&quot;&gt;{{ message }}&lt;/div&gt;&#13;&#10;        {% endfor %}&#13;&#10;    {% endif %}&#13;&#10;&#13;&#10;    &lt;div class=&quot;mb-3&quot;&gt;&#13;&#10;        &lt;a class=&quot;btn btn-success&quot; href=&quot;{% url 'personnel_create' %}&quot;&gt;Add New Personnel&lt;/a&gt;&#13;&#10;        &lt;a class=&quot;btn btn-secondary&quot; href=&quot;{% url 'main_interface' %}&quot;&gt;Back to Main&lt;/a&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&#13;&#10;    &lt;table class=&quot;table table-bordered&quot;&gt;&#13;&#10;        &lt;thead class=&quot;table-dark&quot;&gt;&#13;&#10;            &lt;tr&gt;&#13;&#10;                &lt;th&gt;First Name&lt;/th&gt;&#13;&#10;                &lt;th&gt;Last Name&lt;/th&gt;&#13;&#10;                &lt;th&gt;Role&lt;/th&gt;&#13;&#10;                &lt;th&gt;Actions&lt;/th&gt;&#13;&#10;            &lt;/tr&gt;&#13;&#10;        &lt;/thead&gt;&#13;&#10;        &lt;tbody&gt;&#13;&#10;            {% for personnel in personnel_list %}&#13;&#10;            &lt;tr&gt;&#13;&#10;                &lt;td&gt;{{ personnel.first_name }}&lt;/td&gt;&#13;&#10;                &lt;td&gt;{{ personnel.last_name }}&lt;/td&gt;&#13;&#10;                &lt;td&gt;{{ personnel.role }}&lt;/td&gt;&#13;&#10;                &lt;td&gt;&#13;&#10;                    &lt;a class=&quot;btn btn-info btn-sm&quot; href=&quot;{% url 'personnel_detail' personnel.pk %}&quot;&gt;View&lt;/a&gt;&#13;&#10;                    &lt;a class=&quot;btn btn-danger btn-sm&quot; href=&quot;{% url 'personnel_delete' personnel.pk %}&quot;&gt;Delete&lt;/a&gt;&#13;&#10;                &lt;/td&gt;&#13;&#10;            &lt;/tr&gt;&#13;&#10;            {% endfor %}&#13;&#10;        &lt;/tbody&gt;&#13;&#10;    &lt;/table&gt;&#13;&#10;&#13;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#13;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#13;&#10;&lt;/body&gt;&#13;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/player_assignment_confirm_delete.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/player_assignment_confirm_delete.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Remove Player from Team&lt;/title&gt;&#10;    &lt;h1&gt;Remove Player from Team&lt;/h1&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;Remove Player from Team&lt;/h1&gt;&#10;        &lt;h3&gt;Player: {{ assignment.club_member.first_name }} {{ assignment.club_member.last_name }}&lt;/h3&gt;&#10;    &lt;div&gt;&#10;        &lt;h3&gt;Player: {{ assignment.club_member.first_name }} {{ assignment.club_member.last_name }}&lt;/h3&gt;&#10;        &lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; {{ assignment.role }}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; {{ assignment.team_formation.team_name }}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Session Date:&lt;/strong&gt; {{ assignment.team_formation.session_date }}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Session Time:&lt;/strong&gt; {{ assignment.team_formation.start_time }}&lt;/p&gt;&#10;    &lt;div&gt;&#10;        &lt;h3&gt;Player: {{ assignment.club_member.first_name }} {{ assignment.club_member.last_name }}&lt;/h3&gt;&#10;    &lt;div&gt;&#10;        &lt;h3&gt;Player: {{ assignment.club_member.first_name }} {{ assignment.club_member.last_name }}&lt;/h3&gt;&#10;        &lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; {{ assignment.role }}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; {{ assignment.team_formation.team_name }}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Session Date:&lt;/strong&gt; {{ assignment.team_formation.session_date }}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Session Time:&lt;/strong&gt; {{ assignment.team_formation.start_time }}&lt;/p&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Remove Player from Team&lt;/title&gt;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;Remove Player from Team&lt;/h1&gt;&#10;&#10;    &lt;div class=&quot;alert alert-danger&quot;&gt;&#10;        &lt;strong&gt;Warning!&lt;/strong&gt; This will remove the player from this team formation.&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;card&quot;&gt;&#10;        &lt;div class=&quot;card-body&quot;&gt;&#10;            &lt;h3 class=&quot;card-title&quot;&gt;Player: {{ assignment.club_member.first_name }} {{ assignment.club_member.last_name }}&lt;/h3&gt;&#10;            &lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; {{ assignment.role }}&lt;/p&gt;&#10;            &lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; {{ assignment.team_formation.team_name }}&lt;/p&gt;&#10;            &lt;p&gt;&lt;strong&gt;Session Date:&lt;/strong&gt; {{ assignment.team_formation.session_date }}&lt;/p&gt;&#10;            &lt;p&gt;&lt;strong&gt;Session Time:&lt;/strong&gt; {{ assignment.team_formation.start_time }}&lt;/p&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;p class=&quot;mt-3&quot;&gt;Are you sure you want to remove this player from the team formation?&lt;/p&gt;&#10;&#10;    &lt;form method=&quot;post&quot;&gt;&#10;        {% csrf_token %}&#10;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-danger&quot;&gt;Yes, Remove Player&lt;/button&gt;&#10;        &lt;a href=&quot;{% url 'team_formation_detail' assignment.team_formation.pk %}&quot; class=&quot;btn btn-secondary&quot;&gt;Cancel&lt;/a&gt;&#10;    &lt;/form&gt;&#10;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/player_assignment_form.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/player_assignment_form.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Add Player to {{ formation.team_name }}&lt;/title&gt;&#10;    &lt;h1&gt;Add Player to Team Formation&lt;/h1&gt;&#10;        &lt;p&gt;&lt;strong&gt;Date:&lt;/strong&gt; {{ formation.session_date }}&lt;/p&gt;&#10;    &lt;h1&gt;Add Player to Team Formation&lt;/h1&gt;&#10;        &lt;p&gt;&lt;strong&gt;Date:&lt;/strong&gt; {{ formation.session_date }}&lt;/p&gt;&#10;    &lt;div&gt;&#10;        &lt;h3&gt;{{ formation.team_name }}&lt;/h3&gt;&#10;        &lt;p&gt;&lt;strong&gt;Date:&lt;/strong&gt; {{ formation.session_date }}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; {{ formation.start_time }}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; {% if formation.is_game %}Game{% else %}Training{% endif %}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Current Players:&lt;/strong&gt; {{ formation.players.count }}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;            {{ form.club_member }}&#10;        &lt;div&gt;&#10;            &lt;label for=&quot;{{ form.club_member.id_for_label }}&quot;&gt;Select Player:&lt;/label&gt;&#10;            {{ form.club_member }}&#10;            {% if form.club_member.errors %}&#10;                &lt;div&gt;{{ form.club_member.errors }}&lt;/div&gt;&#10;    &lt;form method=&quot;post&quot;&gt;&#10;        {% csrf_token %}&#10;            {{ form.club_member }}&#10;        &lt;div&gt;&#10;            &lt;label for=&quot;{{ form.club_member.id_for_label }}&quot;&gt;Select Player:&lt;/label&gt;&#10;            {{ form.club_member }}&#10;            {% if form.club_member.errors %}&#10;                &lt;div&gt;{{ form.club_member.errors }}&lt;/div&gt;&#10;            {% endif %}&#10;        &lt;/div&gt;&#10;            {{ form.role }}&#10;        &lt;div&gt;&#10;            &lt;label for=&quot;{{ form.role.id_for_label }}&quot;&gt;Player Role:&lt;/label&gt;&#10;            {{ form.role }}&#10;            {% if form.role.errors %}&#10;                &lt;div&gt;{{ form.role.errors }}&lt;/div&gt;&#10;            {% endif %}&#10;        &lt;/div&gt;&#10;        {% endif %}&#10;        {% if form.non_field_errors %}&#10;            &lt;div&gt;{{ form.non_field_errors }}&lt;/div&gt;&#10;        {% endif %}&#10;    &lt;/form&gt;&#10;        &lt;button type=&quot;submit&quot;&gt;Add Player&lt;/button&gt;&#10;        &lt;a href=&quot;{% url 'team_formation_detail' formation.pk %}&quot;&gt;Cancel&lt;/a&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Add Player to {{ formation.team_name }}&lt;/title&gt;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container mt-5&quot;&gt;&#10;        &lt;h1 class=&quot;mb-4&quot;&gt;Add Player to Team Formation&lt;/h1&gt;&#10;&#10;        &lt;div class=&quot;mb-4&quot;&gt;&#10;            &lt;h3&gt;{{ formation.team_name }}&lt;/h3&gt;&#10;            &lt;p&gt;&lt;strong&gt;Date:&lt;/strong&gt; {{ formation.session_date }}&lt;/p&gt;&#10;            &lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; {{ formation.start_time }}&lt;/p&gt;&#10;            &lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; {% if formation.is_game %}Game{% else %}Training{% endif %}&lt;/p&gt;&#10;            &lt;p&gt;&lt;strong&gt;Current Players:&lt;/strong&gt; {{ formation.players.count }}&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form method=&quot;post&quot; class=&quot;needs-validation&quot; novalidate&gt;&#10;            {% csrf_token %}&#10;&#10;            &lt;div class=&quot;mb-3&quot;&gt;&#10;                &lt;label for=&quot;{{ form.club_member.id_for_label }}&quot; class=&quot;form-label&quot;&gt;Select Player:&lt;/label&gt;&#10;                {{ form.club_member }}&#10;                {% if form.club_member.errors %}&#10;                    &lt;div class=&quot;text-danger&quot;&gt;{{ form.club_member.errors }}&lt;/div&gt;&#10;                {% endif %}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;mb-3&quot;&gt;&#10;                &lt;label for=&quot;{{ form.role.id_for_label }}&quot; class=&quot;form-label&quot;&gt;Player Role:&lt;/label&gt;&#10;                {{ form.role }}&#10;                {% if form.role.errors %}&#10;                    &lt;div class=&quot;text-danger&quot;&gt;{{ form.role.errors }}&lt;/div&gt;&#10;                {% endif %}&#10;            &lt;/div&gt;&#10;&#10;            {% if form.non_field_errors %}&#10;                &lt;div class=&quot;text-danger&quot;&gt;{{ form.non_field_errors }}&lt;/div&gt;&#10;            {% endif %}&#10;&#10;            &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Add Player&lt;/button&gt;&#10;            &lt;a href=&quot;{% url 'team_formation_detail' formation.pk %}&quot; class=&quot;btn btn-secondary&quot;&gt;Cancel&lt;/a&gt;&#10;        &lt;/form&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/secondary_family_member_confirm_delete.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/secondary_family_member_confirm_delete.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Delete Secondary Family Member - MVC System&lt;/title&gt;&#10;    &lt;h1&gt;Delete Secondary Family Member&lt;/h1&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;Delete Secondary Family Member&lt;/h1&gt;&#10;&#10;    &lt;p&gt;Are you sure you want to delete &lt;strong&gt;{{ secondary.first_name }} {{ secondary.last_name }}&lt;/strong&gt; as a secondary contact?&lt;/p&gt;&#10;&#10;        &lt;button type=&quot;submit&quot;&gt;Yes, Delete&lt;/button&gt;&#10;        &lt;a href=&quot;{% url 'family_member_detail' secondary.primary_family_member.pk %}&quot;&gt;Cancel&lt;/a&gt;&#10;        &lt;button type=&quot;submit&quot;&gt;Yes, Delete&lt;/button&gt;&#10;        &lt;a href=&quot;{% url 'family_member_detail' secondary.primary_family_member.pk %}&quot;&gt;Cancel&lt;/a&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Delete Secondary Family Member - MVC System&lt;/title&gt;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;Delete Secondary Family Member&lt;/h1&gt;&#10;    &lt;div class=&quot;alert alert-danger&quot;&gt;&#10;        &lt;p&gt;Are you sure you want to delete &lt;strong&gt;{{ secondary.first_name }} {{ secondary.last_name }}&lt;/strong&gt; as a secondary contact?&lt;/p&gt;&#10;    &lt;/div&gt;&#10;    &lt;form method=&quot;post&quot;&gt;&#10;        {% csrf_token %}&#10;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-danger&quot;&gt;Yes, Delete&lt;/button&gt;&#10;        &lt;a href=&quot;{% url 'family_member_detail' secondary.primary_family_member.pk %}&quot; class=&quot;btn btn-secondary&quot;&gt;Cancel&lt;/a&gt;&#10;    &lt;/form&gt;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/secondary_family_member_form.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/secondary_family_member_form.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;{{ action }} Secondary Family Member - MVC System&lt;/title&gt;&#10;    &lt;h1&gt;{{ action }} Secondary Family Member&lt;/h1&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;{{ action }} Secondary Family Member&lt;/h1&gt;&#10;&#10;    &lt;form method=&quot;post&quot;&gt;&#10;        &lt;table&gt;&#10;        &lt;table&gt;&#10;            {{ form.as_table }}&#10;        &lt;/table&gt;&#10;        &lt;br&gt;&#10;        &lt;button type=&quot;submit&quot;&gt;{{ action }} Secondary Family Member&lt;/button&gt;&#10;        &lt;a href=&quot;{% if family_member %}{% url 'family_member_detail' family_member.pk %}{% elif secondary %}{% url 'family_member_detail' secondary.primary_family_member.pk %}{% endif %}&quot;&gt;Cancel&lt;/a&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#13;&#10;&lt;html lang=&quot;en&quot;&gt;&#13;&#10;&lt;head&gt;&#13;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#13;&#10;    &lt;title&gt;{{ action }} Secondary Family Member - MVC System&lt;/title&gt;&#13;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#13;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#13;&#10;&lt;/head&gt;&#13;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#13;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;{{ action }} Secondary Family Member&lt;/h1&gt;&#13;&#10;    &lt;form method=&quot;post&quot; class=&quot;needs-validation&quot; novalidate&gt;&#13;&#10;        {% csrf_token %}&#13;&#10;        &lt;div class=&quot;mb-3&quot;&gt;&#13;&#10;            &lt;table class=&quot;table&quot;&gt;&#13;&#10;                {{ form.as_table }}&#13;&#10;            &lt;/table&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;{{ action }} Secondary Family Member&lt;/button&gt;&#13;&#10;        &lt;a href=&quot;{% if family_member %}{% url 'family_member_detail' family_member.pk %}{% elif secondary %}{% url 'family_member_detail' secondary.primary_family_member.pk %}{% endif %}&quot; class=&quot;btn btn-secondary&quot;&gt;Cancel&lt;/a&gt;&#13;&#10;    &lt;/form&gt;&#13;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#13;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#13;&#10;&lt;/body&gt;&#13;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/templates/team_formation_confirm_delete.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/templates/team_formation_confirm_delete.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Delete Team Formation&lt;/title&gt;&#10;    &lt;h1&gt;Delete Team Formation&lt;/h1&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;Delete Team Formation&lt;/h1&gt;&#10;&#10;    &lt;div&gt;&#10;&#10;&#10;&#10;    &lt;div&gt;&#10;        &lt;h3&gt;{{ formation.team_name }}&lt;/h3&gt;&#10;        &lt;p&gt;&lt;strong&gt;Date:&lt;/strong&gt; {{ formation.session_date }}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; {{ formation.start_time }}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; {% if formation.is_game %}Game{% else %}Training{% endif %}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Location:&lt;/strong&gt; {{ formation.location.name }}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Head Coach:&lt;/strong&gt; {{ formation.head_coach.first_name }} {{ formation.head_coach.last_name }}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Players:&lt;/strong&gt; {{ formation.players.count }}&lt;/p&gt;&#10;    &lt;p&gt;Are you sure you want to delete this team formation?&lt;/p&gt;&#10;&#10;    &lt;p&gt;Are you sure you want to delete this team formation?&lt;/p&gt;&#10;&#10;&#10;&#10;&#10;&#10;        &lt;button type=&quot;submit&quot;&gt;Yes, Delete&lt;/button&gt;&#10;        &lt;a href=&quot;{% url 'team_formation_detail' formation.pk %}&quot;&gt;Cancel&lt;/a&gt;&#10;        &lt;a href=&quot;{% url 'team_formation_detail' formation.pk %}&quot;&gt;Cancel&lt;/a&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#13;&#10;&lt;html&gt;&#13;&#10;&lt;head&gt;&#13;&#10;    &lt;title&gt;Delete Team Formation&lt;/title&gt;&#13;&#10;    &lt;!-- Add Bootstrap CSS --&gt;&#13;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#13;&#10;&lt;/head&gt;&#13;&#10;&lt;body class=&quot;container mt-5&quot;&gt;&#13;&#10;    &lt;h1 class=&quot;mb-4&quot;&gt;Delete Team Formation&lt;/h1&gt;&#13;&#10;    &lt;div class=&quot;alert alert-danger&quot;&gt;&#13;&#10;        &lt;strong&gt;Warning!&lt;/strong&gt; This action cannot be undone. Deleting this team formation will also remove all player assignments.&#13;&#10;    &lt;/div&gt;&#13;&#10;    &lt;div class=&quot;card&quot;&gt;&#13;&#10;        &lt;div class=&quot;card-body&quot;&gt;&#13;&#10;            &lt;h3 class=&quot;card-title&quot;&gt;{{ formation.team_name }}&lt;/h3&gt;&#13;&#10;            &lt;p&gt;&lt;strong&gt;Date:&lt;/strong&gt; {{ formation.session_date }}&lt;/p&gt;&#13;&#10;            &lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; {{ formation.start_time }}&lt;/p&gt;&#13;&#10;            &lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; {% if formation.is_game %}Game{% else %}Training{% endif %}&lt;/p&gt;&#13;&#10;            &lt;p&gt;&lt;strong&gt;Location:&lt;/strong&gt; {{ formation.location.name }}&lt;/p&gt;&#13;&#10;            &lt;p&gt;&lt;strong&gt;Head Coach:&lt;/strong&gt; {{ formation.head_coach.first_name }} {{ formation.head_coach.last_name }}&lt;/p&gt;&#13;&#10;            &lt;p&gt;&lt;strong&gt;Players:&lt;/strong&gt; {{ formation.players.count }}&lt;/p&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;    &lt;form method=&quot;post&quot;&gt;&#13;&#10;        {% csrf_token %}&#13;&#10;        &lt;button type=&quot;submit&quot; class=&quot;btn btn-danger&quot;&gt;Confirm Delete&lt;/button&gt;&#13;&#10;        &lt;a href=&quot;{% url 'team_formation_list' %}&quot; class=&quot;btn btn-secondary&quot;&gt;Cancel&lt;/a&gt;&#13;&#10;    &lt;/form&gt;&#13;&#10;    &lt;!-- Add Bootstrap JS --&gt;&#13;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#13;&#10;&lt;/body&gt;&#13;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/tests.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/tests.py" />
              <option name="originalContent" value="from datetime import date, timedelta&#10;from decimal import Decimal&#10;&#10;from .models import (&#10;    Location, Personnel, FamilyMember, SecondaryFamilyMember,&#10;    ClubMember, Payments, SessionTeams, PlayerAssignment,&#10;    FamilyRelationship, Hobbies, EmailLog&#10;from django.test import TestCase, Client&#10;from django.urls import reverse&#10;&#10;&#10;class ModelConstraintsTestCase(TestCase):&#10;    &quot;&quot;&quot;Test model constraints and business rules from the project documentation&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        &quot;&quot;&quot;Set up test data&quot;&quot;&quot;&#10;        self.location = Location.objects.create(&#10;            type='Head',&#10;            type='Head',&#10;            name='Test Location',&#10;            address='123 Test St',&#10;            province='Quebec',&#10;            postal_code='H1A 1A1',&#10;            phone_number='514-555-0100',&#10;            phone_number='514-555-0100',&#10;            max_capacity=100&#10;&#10;        self.coach = Personnel.objects.create(&#10;            first_name='Test',&#10;            last_name='Coach',&#10;            date_of_birth=date(1980, 1, 1),&#10;            social_security_number='123-45-6789',&#10;            date_of_birth=date(1980, 1, 1),&#10;            social_security_number='123-45-6789',&#10;            medicare_card_number='TEST123456',&#10;            telephone_number='514-555-1001',&#10;            province='Quebec',&#10;            postal_code='H1B 1B1',&#10;            email_address='coach@test.com',&#10;            role='Coach',&#10;            email_address='coach@test.com',&#10;            role='Coach',&#10;            mandate='Salaried'&#10;        )&#10;&#10;    def test_unique_social_security_number(self):&#10;        &quot;&quot;&quot;Test that SSN must be unique across all people&quot;&quot;&quot;&#10;        # Create first person with SSN&#10;        Personnel.objects.create(&#10;            first_name='First',&#10;            last_name='Person',&#10;            date_of_birth=date(1985, 1, 1),&#10;            social_security_number='111-11-1111',&#10;            medicare_card_number='FIRST11111',&#10;            telephone_number='514-555-0001',&#10;            address='123 First St',&#10;            city='Montreal',&#10;            email_address='first@test.com',&#10;            role='Administrator',&#10;            mandate='Salaried'&#10;            postal_code='H1C 1C1',&#10;            email_address='first@test.com',&#10;            role='Administrator',&#10;            mandate='Salaried'&#10;        )&#10;&#10;        # Try to create second person with same SSN - should fail&#10;                date_of_birth=date(1986, 1, 1),&#10;                social_security_number='111-11-1111',  # Same SSN&#10;                medicare_card_number='SECOND1111',&#10;                telephone_number='514-555-0002',&#10;                date_of_birth=date(1986, 1, 1),&#10;                social_security_number='111-11-1111',  # Same SSN&#10;                email_address='second@test.com',&#10;                role='Secretary',&#10;                mandate='Volunteer'&#10;                telephone_number='514-555-0002',&#10;                address='123 Second St',&#10;                city='Montreal',&#10;                province='Quebec',&#10;                postal_code='H1D 1D1',&#10;                email_address='second@test.com',&#10;                role='Secretary',&#10;                mandate='Volunteer'&#10;            date_of_birth=date(1985, 1, 1),&#10;            social_security_number='222-22-2222',&#10;            medicare_card_number='MEDICARE123',&#10;            telephone_number='514-555-0001',&#10;        # Create first person with Medicare card&#10;        Personnel.objects.create(&#10;            email_address='first@test.com',&#10;            role='Administrator',&#10;            mandate='Salaried'&#10;            last_name='Person',&#10;            date_of_birth=date(1985, 1, 1),&#10;            social_security_number='222-22-2222',&#10;            medicare_card_number='MEDICARE123',&#10;            telephone_number='514-555-0001',&#10;            address='123 First St',&#10;            city='Montreal',&#10;                date_of_birth=date(1986, 1, 1),&#10;                social_security_number='333-33-3333',&#10;                medicare_card_number='MEDICARE123',  # Same Medicare card&#10;                telephone_number='514-555-0002',&#10;                address='123 Second St',&#10;                city='Montreal',&#10;                province='Quebec',&#10;                postal_code='H1D 1D1',&#10;                email_address='second@test.com',&#10;    def test_club_member_age_requirement(self):&#10;        &quot;&quot;&quot;Test that club members must be at least 11 years old&quot;&quot;&quot;&#10;            )&#10;        too_young_date = date(today.year - 10, today.month, today.day)  # 10 years old&#10;        valid_age_date = date(today.year - 12, today.month, today.day)  # 12 years old&#10;&#10;        # This should work - 12 years old&#10;        valid_member = ClubMember.objects.create(&#10;        # Create first person with email&#10;        Personnel.objects.create(&#10;            date_of_birth=valid_age_date,&#10;            social_security_number='666-66-6666',&#10;            medicare_card_number='VALID66666',&#10;            telephone_number='514-555-0006',&#10;            medicare_card_number='FIRST44444',&#10;            telephone_number='514-555-0001',&#10;            email_address='valid@test.com',&#10;            height=Decimal('150.0'),&#10;            weight=Decimal('40.0'),&#10;            location=self.location&#10;            mandate='Salaried'&#10;        self.assertIsNotNone(valid_member.pk)&#10;&#10;        # Age validation is handled in forms, not model constraints&#10;            Personnel.objects.create(&#10;                first_name='Second',&#10;                last_name='Person',&#10;    def test_unique_membership_number(self):&#10;        &quot;&quot;&quot;Test that membership numbers are unique and auto-generated&quot;&quot;&quot;&#10;        member1 = ClubMember.objects.create(&#10;            first_name='Member',&#10;            last_name='One',&#10;            date_of_birth=date(2000, 1, 1),&#10;            social_security_number='777-77-7777',&#10;            type='Head',&#10;            medicare_card_number='MEMBER7777',&#10;            telephone_number='514-555-0007',&#10;            address='123 Member St',&#10;            province='Quebec',&#10;            phone_number='514-555-0100',&#10;            max_capacity=100&#10;            height=Decimal('170.0'),&#10;            weight=Decimal('60.0'),&#10;            location=self.location&#10;        )&#10;                date_of_birth=date(1986, 1, 1),&#10;                social_security_number='555-55-5555',&#10;        member2 = ClubMember.objects.create(&#10;            first_name='Member',&#10;            last_name='Two',&#10;            date_of_birth=date(2001, 1, 1),&#10;            social_security_number='888-88-8888',&#10;            medicare_card_number='MEMBER8888',&#10;            telephone_number='514-555-0008',&#10;            address='123 Member2 St',&#10;            city='Montreal',&#10;            email_address='minor@test.com',&#10;            height=Decimal('160.0'),&#10;            weight=Decimal('50.0'),&#10;            location=self.location&#10;        )&#10;&#10;        # Membership numbers should be unique&#10;        self.assertNotEqual(member1.membership_number, member2.membership_number)&#10;        # Both should have membership numbers assigned&#10;        self.assertIsNotNone(member1.membership_number)&#10;            date_of_birth=date(2005, 1, 1),  # 20 years old&#10;            social_security_number='101-01-0101',&#10;            medicare_card_number='MAJOR10101',&#10;            telephone_number='514-555-0010',&#10;            date_of_birth=date(2011, 1, 1),  # 14 years old&#10;            social_security_number='999-99-9999',&#10;            medicare_card_number='MINOR99999',&#10;            telephone_number='514-555-0009',&#10;                role='Secretary',&#10;                mandate='Volunteer'&#10;            email_address='major@test.com',&#10;            height=Decimal('175.0'),&#10;            weight=Decimal('70.0'),&#10;            location=self.location&#10;                social_security_number='333-33-3333',&#10;                medicare_card_number='MEDICARE123',  # Same Medicare card&#10;                telephone_number='514-555-0002',&#10;                address='123 Second St',&#10;                city='Montreal',&#10;                province='Quebec',&#10;                postal_code='H1D 1D1',&#10;                email_address='second@test.com',&#10;            club_member=self.minor_member,&#10;                mandate='Volunteer'&#10;            )&#10;&#10;    def test_unique_email_address(self):&#10;            method_of_payment='Cash',&#10;            for_year=current_year&#10;            last_name='Person',&#10;            date_of_birth=date(1985, 1, 1),&#10;            social_security_number='444-44-4444',&#10;            medicare_card_number='FIRST44444',&#10;            telephone_number='514-555-0001',&#10;            club_member=self.major_member,&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1C 1C1',&#10;            email_address='duplicate@test.com',&#10;            method_of_payment='Credit',&#10;            for_year=current_year&#10;        # Try to create second person with same email - should fail&#10;        with self.assertRaises(Exception):&#10;            Personnel.objects.create(&#10;    def test_overpayment_as_donation(self):&#10;        &quot;&quot;&quot;Test that overpayments are considered donations&quot;&quot;&quot;&#10;        current_year = date.today().year&#10;&#10;        # Minor member overpays (pays $150 instead of $100)&#10;        overpayment = Payments.objects.create(&#10;            club_member=self.minor_member,&#10;            payment_date=date.today(),&#10;            amount=Decimal('150.00'),  # $50 overpayment = donation&#10;            method_of_payment='Credit',&#10;            for_year=current_year&#10;        )&#10;&#10;            type='Head',&#10;        # The payment is recorded, overpayment logic would be handled in business layer&#10;&#10;        # Calculate donation amount (this would be done in business logic)&#10;        expected_fee = Decimal('100.00')  # Minor fee&#10;            phone_number='514-555-0100',&#10;            max_capacity=100&#10;&#10;    def test_inactive_member_identification(self):&#10;        &quot;&quot;&quot;Test identification of inactive members (no payment for previous year)&quot;&quot;&quot;&#10;        current_year = date.today().year&#10;        previous_year = current_year - 1&#10;&#10;            date_of_birth=date(1980, 1, 1),&#10;            social_security_number='202-02-0202',&#10;            medicare_card_number='COACH20202',&#10;            telephone_number='514-555-0020',&#10;            amount=Decimal('100.00'),&#10;            method_of_payment='Cash',&#10;            for_year=current_year&#10;        )&#10;            email_address='headcoach@test.com',&#10;            role='Coach',&#10;            mandate='Salaried'&#10;        # No payment for previous year - member should be considered inactive&#10;        previous_year_payments = Payments.objects.filter(&#10;            club_member=self.minor_member,&#10;            for_year=previous_year&#10;        )&#10;            date_of_birth=date(2000, 1, 1),&#10;            social_security_number='303-03-0303',&#10;            medicare_card_number='TEAM030303',&#10;            telephone_number='514-555-0030',&#10;                city='Montreal',&#10;                province='Quebec',&#10;            email_address='teammember@test.com',&#10;            height=Decimal('175.0'),&#10;            weight=Decimal('70.0'),&#10;            location=self.location&#10;        )&#10;&#10;    def test_team_formation_creation(self):&#10;            start_time='18:00',&#10;            session_address='123 Training St',&#10;            is_game=False&#10;            team_name='Test Training Team',&#10;            head_coach=self.coach,&#10;            date_of_birth=valid_age_date,&#10;            social_security_number='666-66-6666',&#10;            medicare_card_number='VALID66666',&#10;            telephone_number='514-555-0006',&#10;            address='123 Valid St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1E 1E1',&#10;            email_address='valid@test.com',&#10;        self.assertFalse(training.is_game)&#10;        self.assertIsNone(training.score_team1)&#10;        self.assertIsNone(training.score_team2)&#10;            height=Decimal('150.0'),&#10;            weight=Decimal('40.0'),&#10;            location=self.location&#10;        )&#10;            team_name='Test Game Team',&#10;        # Create game session with scores&#10;        game = SessionTeams.objects.create(&#10;    def test_unique_membership_number(self):&#10;            session_date=tomorrow,&#10;            start_time='20:00',&#10;            session_address='123 Game St',&#10;            is_game=True,&#10;            score_team1=25,&#10;            score_team2=23&#10;        self.assertTrue(game.is_game)&#10;        &quot;&quot;&quot;Test assigning players to team formations&quot;&quot;&quot;&#10;        self.assertEqual(game.score_team2, 23)&#10;            medicare_card_number='MEMBER7777',&#10;            telephone_number='514-555-0007',&#10;        team_formation = SessionTeams.objects.create(&#10;            location=self.location,&#10;        member2 = ClubMember.objects.create(&#10;            last_name='Two',&#10;            date_of_birth=date(2001, 1, 1),&#10;            social_security_number='888-88-8888',&#10;            medicare_card_number='MEMBER8888',&#10;            telephone_number='514-555-0008',&#10;            address='123 Member2 St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1G 1G1',&#10;            session_date=tomorrow,&#10;            start_time='18:00',&#10;            session_address='123 Test St',&#10;            is_game=False&#10;            weight=Decimal('55.0'),&#10;            location=self.location&#10;        )&#10;&#10;        # Membership numbers should be unique&#10;            club_member=self.member,&#10;            team_formation=team_formation,&#10;            role='Setter'&#10;        )&#10;&#10;        self.assertEqual(assignment.club_member, self.member)&#10;        self.assertEqual(assignment.team_formation, team_formation)&#10;        self.assertEqual(assignment.role, 'Setter')&#10;&#10;    def test_unique_player_per_formation(self):&#10;        &quot;&quot;&quot;Test that a player can only be assigned once per team formation&quot;&quot;&quot;&#10;        tomorrow = date.today() + timedelta(days=1)&#10;&#10;        team_formation = SessionTeams.objects.create(&#10;            location=self.location,&#10;            type='Head',&#10;            team_name='Test Team',&#10;            session_date=tomorrow,&#10;            start_time='18:00',&#10;            session_address='123 Test St',&#10;            phone_number='514-555-0100',&#10;            max_capacity=100&#10;        PlayerAssignment.objects.create(&#10;            club_member=self.member,&#10;            team_formation=team_formation,&#10;            role='Setter'&#10;        )&#10;&#10;        # Second assignment to same formation should fail due to unique_together constraint&#10;        with self.assertRaises(Exception):&#10;            PlayerAssignment.objects.create(&#10;                club_member=self.member,&#10;                team_formation=team_formation,&#10;                role='Libero'  # Different role, same member and formation&#10;            )&#10;&#10;            email_address='parent@test.com',&#10;        self.location = Location.objects.create(&#10;            date_of_birth=date(1975, 1, 1),&#10;            social_security_number='404-04-0404',&#10;            medicare_card_number='PARENT0404',&#10;            telephone_number='514-555-0040',&#10;            province='Quebec',&#10;            date_of_birth=date(2010, 1, 1),  # 15 years old&#10;            social_security_number='505-05-0505',&#10;            medicare_card_number='CHILD50505',&#10;            telephone_number='514-555-0050',&#10;&#10;        # Create a minor member (14 years old)&#10;        self.minor_member = ClubMember.objects.create(&#10;            first_name='Minor',&#10;            email_address='child@test.com',&#10;            height=Decimal('160.0'),&#10;            weight=Decimal('50.0'),&#10;            location=self.location&#10;            province='Quebec',&#10;            postal_code='H1H 1H1',&#10;            email_address='minor@test.com',&#10;            height=Decimal('160.0'),&#10;            weight=Decimal('50.0'),&#10;            primary_family_member=self.family_member,&#10;        )&#10;&#10;        # Create a major member (20 years old)&#10;        self.major_member = ClubMember.objects.create(&#10;            first_name='Major',&#10;            telephone_number='514-555-0060',&#10;            relationship='Partner'&#10;            social_security_number='101-01-0101',&#10;            medicare_card_number='MAJOR10101',&#10;        self.assertEqual(secondary.primary_family_member, self.family_member)&#10;        self.assertEqual(secondary.relationship, 'Partner')&#10;            city='Montreal',&#10;        # Test that secondary contact is linked to primary&#10;        secondary_contacts = self.family_member.secondary_contacts.all()&#10;        self.assertIn(secondary, secondary_contacts)&#10;&#10;    def test_minor_member_family_association(self):&#10;            postal_code='H1I 1I1',&#10;        association = FamilyRelationship.objects.create(&#10;            minor_member=self.minor_member,&#10;            family_member=self.family_member,&#10;            relationship='Father',&#10;            start_date=date.today()&#10;        )&#10;&#10;        self.assertEqual(association.minor_member, self.minor_member)&#10;        self.assertEqual(association.family_member, self.family_member)&#10;        self.assertEqual(association.relationship, 'Father')&#10;        self.assertIsNone(association.end_date)  # Should be active&#10;&#10;    def test_family_member_can_have_multiple_children(self):&#10;        &quot;&quot;&quot;Test that one family member can be associated with multiple children&quot;&quot;&quot;&#10;        # Create second child&#10;        child2 = ClubMember.objects.create(&#10;            first_name='Child2',&#10;            last_name='Test',&#10;            date_of_birth=date(2012, 1, 1),  # 13 years old&#10;            type='Head',&#10;            social_security_number='606-06-0606',&#10;            telephone_number='514-555-0061',&#10;            address='123 Parent St',&#10;            city='Montreal',&#10;            phone_number='514-555-0100',&#10;            max_capacity=100&#10;            email_address='child2@test.com',&#10;            height=Decimal('150.0'),&#10;        # Associate first child&#10;        association1 = FamilyRelationship.objects.create(&#10;            minor_member=self.minor_member,&#10;            family_member=self.family_member,&#10;            relationship='Father',&#10;            start_date=date.today()&#10;        )&#10;&#10;        # Associate second child&#10;        association2 = FamilyRelationship.objects.create(&#10;            minor_member=child2,&#10;        # Test READ&#10;        response = self.client.get(reverse('personnel_detail', args=[personnel.pk]))&#10;        self.assertEqual(response.status_code, 200)&#10;        self.assertContains(response, 'Test Personnel')&#10;        # Verify update&#10;        personnel.refresh_from_db()&#10;            type='Head',&#10;        self.assertEqual(personnel.first_name, 'Updated')&#10;        self.assertEqual(personnel.telephone_number, '514-555-0071')&#10;&#10;        # Test DELETE&#10;            phone_number='514-555-0100',&#10;            max_capacity=100&#10;&#10;        # Verify deletion&#10;        with self.assertRaises(Personnel.DoesNotExist):&#10;        # Create test members with different payment statuses&#10;        self.active_member = ClubMember.objects.create(&#10;            first_name='Active',&#10;        # Test CREATE&#10;            date_of_birth=date(2020, 1, 1),  # Joined recently, should be active&#10;            social_security_number='111-11-1111',&#10;            medicare_card_number='ACTIVE1111',&#10;            telephone_number='514-555-1111',&#10;            address='123 Active St',&#10;            'medicare_card_number': 'FAM080808',&#10;            'telephone_number': '514-555-0080',&#10;            'address': '123 Family St',&#10;            postal_code='H1P 1P1',&#10;            email_address='active@test.com',&#10;            height=Decimal('160.0'),&#10;            weight=Decimal('50.0'),&#10;            'location': self.location.pk&#10;            date_joined=date(2023, 1, 1)  # Joined 2+ years ago&#10;        # Verify creation&#10;        club_member = ClubMember.objects.get(email_address='clubmember@test.com')&#10;        self.inactive_member = ClubMember.objects.create(&#10;            first_name='Inactive',&#10;&#10;&#10;class ReportingTestCase(TestCase):&#10;    &quot;&quot;&quot;Test reporting functionality&quot;&quot;&quot;&#10;&#10;            family_member=self.family_member,&#10;        # Test UPDATE&#10;        response = self.client.post(reverse('personnel_edit', args=[personnel.pk]), {&#10;            'first_name': 'Updated',&#10;            'last_name': 'Personnel',&#10;            'date_of_birth': '1980-01-01',&#10;            'social_security_number': '707-07-0707',&#10;            'medicare_card_number': 'PERS070707',&#10;            'telephone_number': '514-555-0071',  # Changed phone&#10;            'address': '123 Personnel St',&#10;            'city': 'Montreal',&#10;            'province': 'Quebec',&#10;            'postal_code': 'H1M 1M1',&#10;            'email_address': 'personnel@test.com',&#10;            'role': 'Assistant Coach',  # Changed role&#10;            'mandate': 'Salaried'&#10;        })&#10;        self.assertEqual(response.status_code, 302)  # Redirect after successful update&#10;        )&#10;    def test_personnel_crud_operations(self):&#10;        &quot;&quot;&quot;Test Personnel Create, Read, Update, Delete operations&quot;&quot;&quot;&#10;        # Test CREATE&#10;        response = self.client.post(reverse('personnel_create'), {&#10;            'first_name': 'Test',&#10;            'last_name': 'Personnel',&#10;            'date_of_birth': '1980-01-01',&#10;            'social_security_number': '707-07-0707',&#10;            'medicare_card_number': 'PERS070707',&#10;            date_of_birth=date(2000, 1, 1),&#10;            social_security_number='222-22-2222',&#10;            medicare_card_number='INACTIVE22',&#10;            telephone_number='514-555-2222',&#10;            address='123 Inactive St',&#10;            'postal_code': 'H1M 1M1',&#10;            'email_address': 'personnel@test.com',&#10;            postal_code='H1Q 1Q1',&#10;            email_address='inactive@test.com',&#10;            height=Decimal('170.0'),&#10;            weight=Decimal('60.0'),&#10;&#10;            date_joined=date(2021, 1, 1)  # Joined 3+ years ago&#10;        self.assertEqual(personnel.role, 'Coach')&#10;            for_year=current_year&#10;        # Create payment for active member only&#10;        Payments.objects.create(&#10;            club_member=self.active_member,&#10;            payment_date=date.today(),&#10;            amount=Decimal('100.00'),&#10;            method_of_payment='Cash',&#10;            for_year=2024&#10;        )&#10;        self.assertEqual(major_payment.amount, Decimal('200.00'))&#10;&#10;    def test_overpayment_as_donation(self):&#10;    def test_location_report(self):&#10;        &quot;&quot;&quot;Test location report functionality&quot;&quot;&quot;&#10;        response = self.client.get(reverse('location_report'))&#10;        self.assertEqual(response.status_code, 200)&#10;        self.assertContains(response, 'Test Location')&#10;        self.assertContains(response, 'Head')&#10;&#10;    def test_inactive_members_report(self):&#10;        &quot;&quot;&quot;Test inactive members report&quot;&quot;&quot;&#10;        response = self.client.get(reverse('inactive_members_report'))&#10;        self.assertEqual(response.status_code, 200)&#10;        self.assertContains(response, 'Inactive Members Report')&#10;&#10;        # Should contain inactive member but not active member&#10;        self.assertContains(response, 'Inactive Member')&#10;            club_member=self.minor_member,&#10;            payment_date=date.today(),&#10;            amount=Decimal('150.00'),  # $50 overpayment = donation&#10;            method_of_payment='Credit',&#10;            for_year=current_year&#10;        )&#10;&#10;        # The payment is recorded, overpayment logic would be handled in business layer&#10;        self.assertEqual(overpayment.amount, Decimal('150.00'))&#10;&#10;        # Calculate donation amount (this would be done in business logic)&#10;        expected_fee = Decimal('100.00')  # Minor fee&#10;        donation_amount = overpayment.amount - expected_fee&#10;        self.assertEqual(donation_amount, Decimal('50.00'))&#10;&#10;    def test_inactive_member_identification(self):&#10;        &quot;&quot;&quot;Test identification of inactive members (no payment for previous year)&quot;&quot;&quot;&#10;        current_year = date.today().year&#10;        previous_year = current_year - 1&#10;&#10;        # Create payment for current year only&#10;        Payments.objects.create(&#10;            club_member=self.minor_member,&#10;            payment_date=date.today(),&#10;            amount=Decimal('100.00'),&#10;            method_of_payment='Cash',&#10;            for_year=current_year&#10;        )&#10;&#10;        # No payment for previous year - member should be considered inactive&#10;        previous_year_payments = Payments.objects.filter(&#10;            club_member=self.minor_member,&#10;            for_year=previous_year&#10;        )&#10;        self.assertEqual(previous_year_payments.count(), 0)&#10;&#10;&#10;class SessionTeamsTestCase(TestCase):&#10;    &quot;&quot;&quot;Test team formation rules and constraints&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        self.location = Location.objects.create(&#10;            type='Head',&#10;            name='Test Location',&#10;            address='123 Test St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1A 1A1',&#10;            phone_number='514-555-0100',&#10;            max_capacity=100&#10;        )&#10;&#10;        self.coach = Personnel.objects.create(&#10;            first_name='Head',&#10;            last_name='Coach',&#10;            date_of_birth=date(1980, 1, 1),&#10;            social_security_number='202-02-0202',&#10;            medicare_card_number='COACH20202',&#10;            telephone_number='514-555-0020',&#10;            address='123 Coach St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1J 1J1',&#10;            email_address='headcoach@test.com',&#10;            role='Coach',&#10;            mandate='Salaried'&#10;        )&#10;&#10;        self.member = ClubMember.objects.create(&#10;            first_name='Team',&#10;            last_name='Member',&#10;            date_of_birth=date(2000, 1, 1),&#10;            social_security_number='303-03-0303',&#10;            medicare_card_number='TEAM030303',&#10;            telephone_number='514-555-0030',&#10;            address='123 Team St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1K 1K1',&#10;            email_address='teammember@test.com',&#10;            height=Decimal('175.0'),&#10;            weight=Decimal('70.0'),&#10;            location=self.location&#10;        )&#10;&#10;    def test_team_formation_creation(self):&#10;        &quot;&quot;&quot;Test creating team formations for games and training&quot;&quot;&quot;&#10;        tomorrow = date.today() + timedelta(days=1)&#10;&#10;        # Create training session&#10;        training = SessionTeams.objects.create(&#10;            location=self.location,&#10;            team_name='Test Training Team',&#10;            head_coach=self.coach,&#10;            session_date=tomorrow,&#10;            start_time='18:00',&#10;            session_address='123 Training St',&#10;            is_game=False&#10;        )&#10;        self.assertFalse(training.is_game)&#10;        self.assertIsNone(training.score_team1)&#10;        self.assertIsNone(training.score_team2)&#10;&#10;        # Create game session with scores&#10;        game = SessionTeams.objects.create(&#10;            location=self.location,&#10;            team_name='Test Game Team',&#10;            head_coach=self.coach,&#10;            session_date=tomorrow,&#10;            start_time='20:00',&#10;            session_address='123 Game St',&#10;            is_game=True,&#10;            score_team1=25,&#10;            score_team2=23&#10;        )&#10;        self.assertTrue(game.is_game)&#10;        self.assertEqual(game.score_team1, 25)&#10;        self.assertEqual(game.score_team2, 23)&#10;&#10;    def test_player_assignment_to_team(self):&#10;        &quot;&quot;&quot;Test assigning players to team formations&quot;&quot;&quot;&#10;        tomorrow = date.today() + timedelta(days=1)&#10;&#10;        team_formation = SessionTeams.objects.create(&#10;            location=self.location,&#10;            team_name='Test Team',&#10;            head_coach=self.coach,&#10;            session_date=tomorrow,&#10;            start_time='18:00',&#10;            session_address='123 Test St',&#10;            is_game=False&#10;        )&#10;&#10;        # Assign player to team&#10;        assignment = PlayerAssignment.objects.create(&#10;            club_member=self.member,&#10;            team_formation=team_formation,&#10;            role='Setter'&#10;        )&#10;&#10;        self.assertEqual(assignment.club_member, self.member)&#10;        self.assertEqual(assignment.team_formation, team_formation)&#10;        self.assertEqual(assignment.role, 'Setter')&#10;&#10;    def test_unique_player_per_formation(self):&#10;        &quot;&quot;&quot;Test that a player can only be assigned once per team formation&quot;&quot;&quot;&#10;        tomorrow = date.today() + timedelta(days=1)&#10;&#10;        team_formation = SessionTeams.objects.create(&#10;            location=self.location,&#10;            team_name='Test Team',&#10;            head_coach=self.coach,&#10;            session_date=tomorrow,&#10;            start_time='18:00',&#10;            session_address='123 Test St',&#10;            is_game=False&#10;        )&#10;&#10;        # First assignment should work&#10;        PlayerAssignment.objects.create(&#10;            club_member=self.member,&#10;            team_formation=team_formation,&#10;            role='Setter'&#10;        )&#10;&#10;        # Second assignment to same formation should fail due to unique_together constraint&#10;        with self.assertRaises(Exception):&#10;            PlayerAssignment.objects.create(&#10;                club_member=self.member,&#10;                team_formation=team_formation,&#10;                role='Libero'  # Different role, same member and formation&#10;            )&#10;&#10;&#10;class FamilyMemberTestCase(TestCase):&#10;    &quot;&quot;&quot;Test family member relationships and constraints&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        self.location = Location.objects.create(&#10;            type='Head',&#10;            name='Test Location',&#10;            address='123 Test St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1A 1A1',&#10;            phone_number='514-555-0100',&#10;            max_capacity=100&#10;        )&#10;&#10;        self.family_member = FamilyMember.objects.create(&#10;            first_name='Parent',&#10;            last_name='Test',&#10;            date_of_birth=date(1975, 1, 1),&#10;            social_security_number='404-04-0404',&#10;            medicare_card_number='PARENT0404',&#10;            telephone_number='514-555-0040',&#10;            address='123 Parent St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1L 1L1',&#10;            email_address='parent@test.com',&#10;            location=self.location&#10;        )&#10;&#10;        self.minor_member = ClubMember.objects.create(&#10;            first_name='Child',&#10;            last_name='Test',&#10;            date_of_birth=date(2010, 1, 1),  # 15 years old&#10;            social_security_number='505-05-0505',&#10;            medicare_card_number='CHILD50505',&#10;            telephone_number='514-555-0050',&#10;            address='123 Parent St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1L 1L1',&#10;            email_address='child@test.com',&#10;            height=Decimal('160.0'),&#10;            weight=Decimal('50.0'),&#10;            location=self.location&#10;        )&#10;&#10;    def test_secondary_family_member_creation(self):&#10;        &quot;&quot;&quot;Test creating secondary family member contacts&quot;&quot;&quot;&#10;        secondary = SecondaryFamilyMember.objects.create(&#10;            primary_family_member=self.family_member,&#10;            first_name='Emergency',&#10;            last_name='Contact',&#10;            telephone_number='514-555-0060',&#10;            relationship='Partner'&#10;        )&#10;&#10;        self.assertEqual(secondary.primary_family_member, self.family_member)&#10;        self.assertEqual(secondary.relationship, 'Partner')&#10;&#10;        # Test that secondary contact is linked to primary&#10;        secondary_contacts = self.family_member.secondary_contacts.all()&#10;        self.assertIn(secondary, secondary_contacts)&#10;&#10;    def test_minor_member_family_association(self):&#10;        &quot;&quot;&quot;Test associating minor members with family members&quot;&quot;&quot;&#10;        association = FamilyRelationship.objects.create(&#10;            minor_member=self.minor_member,&#10;            family_member=self.family_member,&#10;            relationship='Father',&#10;            start_date=date.today()&#10;        )&#10;&#10;        self.assertEqual(association.minor_member, self.minor_member)&#10;        self.assertEqual(association.family_member, self.family_member)&#10;        self.assertEqual(association.relationship, 'Father')&#10;        self.assertIsNone(association.end_date)  # Should be active&#10;&#10;    def test_family_member_can_have_multiple_children(self):&#10;        &quot;&quot;&quot;Test that one family member can be associated with multiple children&quot;&quot;&quot;&#10;        # Create second child&#10;        child2 = ClubMember.objects.create(&#10;            first_name='Child2',&#10;            last_name='Test',&#10;            date_of_birth=date(2012, 1, 1),  # 13 years old&#10;            social_security_number='606-06-0606',&#10;            medicare_card_number='CHILD60606',&#10;            telephone_number='514-555-0061',&#10;            address='123 Parent St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1L 1L1',&#10;            email_address='child2@test.com',&#10;            height=Decimal('150.0'),&#10;            weight=Decimal('40.0'),&#10;            location=self.location&#10;        )&#10;&#10;        # Associate first child&#10;        association1 = FamilyRelationship.objects.create(&#10;            minor_member=self.minor_member,&#10;            family_member=self.family_member,&#10;            relationship='Father',&#10;            start_date=date.today()&#10;        )&#10;&#10;        # Associate second child&#10;        association2 = FamilyRelationship.objects.create(&#10;            minor_member=child2,&#10;            family_member=self.family_member,&#10;            relationship='Father',&#10;            start_date=date.today()&#10;        )&#10;&#10;        # Both associations should exist&#10;        associations = FamilyRelationship.objects.filter(family_member=self.family_member)&#10;        self.assertEqual(associations.count(), 2)&#10;&#10;&#10;class CRUDOperationsTestCase(TestCase):&#10;    &quot;&quot;&quot;Test CRUD operations through views&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        self.client = Client()&#10;        self.location = Location.objects.create(&#10;            type='Head',&#10;            name='Test Location',&#10;            address='123 Test St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1A 1A1',&#10;            phone_number='514-555-0100',&#10;            max_capacity=100&#10;        )&#10;&#10;    def test_personnel_crud_operations(self):&#10;        &quot;&quot;&quot;Test Personnel Create, Read, Update, Delete operations&quot;&quot;&quot;&#10;        # Test CREATE&#10;        response = self.client.post(reverse('personnel_create'), {&#10;            'first_name': 'Test',&#10;            'last_name': 'Personnel',&#10;            'date_of_birth': '1980-01-01',&#10;            'social_security_number': '707-07-0707',&#10;            'medicare_card_number': 'PERS070707',&#10;            'telephone_number': '514-555-0070',&#10;            'address': '123 Personnel St',&#10;            'city': 'Montreal',&#10;            'province': 'Quebec',&#10;            'postal_code': 'H1M 1M1',&#10;            'email_address': 'personnel@test.com',&#10;            'role': 'Coach',&#10;            'mandate': 'Salaried'&#10;        })&#10;        self.assertEqual(response.status_code, 302)  # Redirect after successful creation&#10;&#10;        # Verify personnel was created&#10;        personnel = Personnel.objects.get(email_address='personnel@test.com')&#10;        self.assertEqual(personnel.first_name, 'Test')&#10;        self.assertEqual(personnel.role, 'Coach')&#10;&#10;        # Test READ&#10;        response = self.client.get(reverse('personnel_detail', args=[personnel.pk]))&#10;        self.assertEqual(response.status_code, 200)&#10;        self.assertContains(response, 'Test Personnel')&#10;&#10;        # Test UPDATE&#10;        response = self.client.post(reverse('personnel_edit', args=[personnel.pk]), {&#10;            'first_name': 'Updated',&#10;            'last_name': 'Personnel',&#10;            'date_of_birth': '1980-01-01',&#10;            'social_security_number': '707-07-0707',&#10;            'medicare_card_number': 'PERS070707',&#10;            'telephone_number': '514-555-0071',  # Changed phone&#10;            'address': '123 Personnel St',&#10;            'city': 'Montreal',&#10;            'province': 'Quebec',&#10;            'postal_code': 'H1M 1M1',&#10;            'email_address': 'personnel@test.com',&#10;            'role': 'Assistant Coach',  # Changed role&#10;            'mandate': 'Salaried'&#10;        })&#10;        self.assertEqual(response.status_code, 302)  # Redirect after successful update&#10;&#10;        # Verify update&#10;        personnel.refresh_from_db()&#10;        self.assertEqual(personnel.first_name, 'Updated')&#10;        self.assertEqual(personnel.role, 'Assistant Coach')&#10;        self.assertEqual(personnel.telephone_number, '514-555-0071')&#10;&#10;        # Test DELETE&#10;        response = self.client.post(reverse('personnel_delete', args=[personnel.pk]))&#10;        self.assertEqual(response.status_code, 302)  # Redirect after successful deletion&#10;&#10;        # Verify deletion&#10;        with self.assertRaises(Personnel.DoesNotExist):&#10;            Personnel.objects.get(pk=personnel.pk)&#10;&#10;    def test_family_member_crud_operations(self):&#10;        &quot;&quot;&quot;Test Family Member CRUD operations&quot;&quot;&quot;&#10;        # Test CREATE&#10;        response = self.client.post(reverse('family_member_create'), {&#10;            'first_name': 'Test',&#10;            'last_name': 'Family',&#10;            'date_of_birth': '1975-01-01',&#10;            'social_security_number': '808-08-0808',&#10;            'medicare_card_number': 'FAM080808',&#10;            'telephone_number': '514-555-0080',&#10;            'address': '123 Family St',&#10;            'city': 'Montreal',&#10;            'province': 'Quebec',&#10;            'postal_code': 'H1N 1N1',&#10;            'email_address': 'family@test.com',&#10;            'location': self.location.pk&#10;        })&#10;        self.assertEqual(response.status_code, 302)&#10;&#10;        # Verify creation&#10;        family_member = FamilyMember.objects.get(email_address='family@test.com')&#10;        self.assertEqual(family_member.first_name, 'Test')&#10;&#10;        # Test READ&#10;        response = self.client.get(reverse('family_member_detail', args=[family_member.pk]))&#10;        self.assertEqual(response.status_code, 200)&#10;        self.assertContains(response, 'Test Family')&#10;&#10;    def test_club_member_crud_operations(self):&#10;        &quot;&quot;&quot;Test Club Member CRUD operations&quot;&quot;&quot;&#10;        # Test CREATE&#10;        response = self.client.post(reverse('create_member'), {&#10;            'first_name': 'Test',&#10;            'last_name': 'Member',&#10;            'date_of_birth': '2000-01-01',&#10;            'social_security_number': '909-09-0909',&#10;            'medicare_card_number': 'CLUB090909',&#10;            'telephone_number': '514-555-0090',&#10;            'address': '123 Member St',&#10;            'city': 'Montreal',&#10;            'province': 'Quebec',&#10;            'postal_code': 'H1O 1O1',&#10;            'email_address': 'clubmember@test.com',&#10;            'height': '175.0',&#10;            'weight': '70.0',&#10;            'location': self.location.pk&#10;        })&#10;        self.assertEqual(response.status_code, 302)&#10;&#10;        # Verify creation&#10;        club_member = ClubMember.objects.get(email_address='clubmember@test.com')&#10;        self.assertEqual(club_member.first_name, 'Test')&#10;        self.assertIsNotNone(club_member.membership_number)  # Should have auto-generated membership number&#10;&#10;&#10;class ReportingTestCase(TestCase):&#10;    &quot;&quot;&quot;Test reporting functionality&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        self.client = Client()&#10;        self.location = Location.objects.create(&#10;            type='Head',&#10;            name='Test Location',&#10;            address='123 Test St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1A 1A1',&#10;            phone_number='514-555-0100',&#10;            max_capacity=100&#10;        )&#10;&#10;        # Create test members with different payment statuses&#10;        self.active_member = ClubMember.objects.create(&#10;            first_name='Active',&#10;            last_name='Member',&#10;            date_of_birth=date(2020, 1, 1),  # Joined recently, should be active&#10;            social_security_number='111-11-1111',&#10;            medicare_card_number='ACTIVE1111',&#10;            telephone_number='514-555-1111',&#10;            address='123 Active St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1P 1P1',&#10;            email_address='active@test.com',&#10;            height=Decimal('160.0'),&#10;            weight=Decimal('50.0'),&#10;            location=self.location,&#10;            date_joined=date(2023, 1, 1)  # Joined 2+ years ago&#10;        )&#10;&#10;        self.inactive_member = ClubMember.objects.create(&#10;            first_name='Inactive',&#10;            last_name='Member',&#10;            date_of_birth=date(2000, 1, 1),&#10;            social_security_number='222-22-2222',&#10;            medicare_card_number='INACTIVE22',&#10;            telephone_number='514-555-2222',&#10;            address='123 Inactive St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1Q 1Q1',&#10;            email_address='inactive@test.com',&#10;            height=Decimal('170.0'),&#10;            weight=Decimal('60.0'),&#10;            location=self.location,&#10;            date_joined=date(2021, 1, 1)  # Joined 3+ years ago&#10;        )&#10;&#10;        # Create payment for active member only&#10;        Payments.objects.create(&#10;            club_member=self.active_member,&#10;            payment_date=date.today(),&#10;            amount=Decimal('100.00'),&#10;            method_of_payment='Cash',&#10;            for_year=2024&#10;        )&#10;&#10;    def test_location_report(self):&#10;        &quot;&quot;&quot;Test location report functionality&quot;&quot;&quot;&#10;        response = self.client.get(reverse('location_report'))&#10;        self.assertEqual(response.status_code, 200)&#10;        self.assertContains(response, 'Test Location')&#10;        self.assertContains(response, 'Head')&#10;&#10;    def test_inactive_members_report(self):&#10;        &quot;&quot;&quot;Test inactive members report&quot;&quot;&quot;&#10;        response = self.client.get(reverse('inactive_members_report'))&#10;        self.assertEqual(response.status_code, 200)&#10;        self.assertContains(response, 'Inactive Members Report')&#10;&#10;        # Should contain inactive member but not active member&#10;        self.assertContains(response, 'Inactive Member')" />
              <option name="updatedContent" value="from datetime import date, timedelta&#10;from decimal import Decimal&#10;&#10;from club.models import (&#10;    Location, Personnel, FamilyMember, SecondaryFamilyMember,&#10;    ClubMember, Payments, SessionTeams, PlayerAssignment,&#10;    FamilyRelationship, Hobbies, EmailLog, PersonnelAssignment,&#10;    Sessions, MemberHobbies&#10;)&#10;from django.test import TestCase, Client&#10;from django.urls import reverse&#10;&#10;&#10;class ModelConstraintsTestCase(TestCase):&#10;    &quot;&quot;&quot;Test model constraints and business rules from the project documentation&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        &quot;&quot;&quot;Set up test data&quot;&quot;&quot;&#10;        self.location = Location.objects.create(&#10;            name='Test Location',&#10;            type='head',&#10;            address='123 Test St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1A 1A1',&#10;            phone='514-555-0100',&#10;            capacity=100&#10;        )&#10;&#10;        self.coach = Personnel.objects.create(&#10;            first_name='Test',&#10;            last_name='Coach',&#10;            birthdate=date(1980, 1, 1),&#10;            ssn='123-45-6789',&#10;            medicare_number='TEST123456',&#10;            phone='514-555-1001',&#10;            address='123 Coach St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1B 1B1',&#10;            email='coach@test.com'&#10;        )&#10;&#10;    def test_unique_social_security_number(self):&#10;        &quot;&quot;&quot;Test that SSN must be unique across all people&quot;&quot;&quot;&#10;        # Create first person with SSN&#10;        Personnel.objects.create(&#10;            first_name='First',&#10;            last_name='Person',&#10;            birthdate=date(1985, 1, 1),&#10;            ssn='111-11-1111',&#10;            medicare_number='FIRST11111',&#10;            phone='514-555-0001',&#10;            address='123 First St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1C 1C1',&#10;            email='first@test.com'&#10;        )&#10;&#10;        # Try to create second person with same SSN - should fail&#10;        with self.assertRaises(Exception):&#10;            Personnel.objects.create(&#10;                first_name='Second',&#10;                last_name='Person',&#10;                birthdate=date(1986, 1, 1),&#10;                ssn='111-11-1111',  # Same SSN&#10;                medicare_number='SECOND1111',&#10;                phone='514-555-0002',&#10;                address='123 Second St',&#10;                city='Montreal',&#10;                province='Quebec',&#10;                postal_code='H1D 1D1',&#10;                email='second@test.com'&#10;            )&#10;&#10;    def test_unique_medicare_card_number(self):&#10;        &quot;&quot;&quot;Test that Medicare card number must be unique&quot;&quot;&quot;&#10;        # Create first person with Medicare card&#10;        Personnel.objects.create(&#10;            first_name='First',&#10;            last_name='Person',&#10;            birthdate=date(1985, 1, 1),&#10;            ssn='222-22-2222',&#10;            medicare_number='MEDICARE123',&#10;            phone='514-555-0001',&#10;            address='123 First St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1C 1C1',&#10;            email='first@test.com'&#10;        )&#10;&#10;        # Try to create second person with same Medicare card - should fail&#10;        with self.assertRaises(Exception):&#10;            Personnel.objects.create(&#10;                first_name='Second',&#10;                last_name='Person',&#10;                birthdate=date(1986, 1, 1),&#10;                ssn='333-33-3333',&#10;                medicare_number='MEDICARE123',  # Same Medicare card&#10;                phone='514-555-0002',&#10;                address='123 Second St',&#10;                city='Montreal',&#10;                province='Quebec',&#10;                postal_code='H1D 1D1',&#10;                email='second@test.com'&#10;            )&#10;&#10;    def test_club_member_age_calculation(self):&#10;        &quot;&quot;&quot;Test that club member age calculation works correctly&quot;&quot;&quot;&#10;        today = date.today()&#10;        birthdate = date(today.year - 25, today.month, today.day)  # 25 years old&#10;        &#10;        member = ClubMember.objects.create(&#10;            first_name='Valid',&#10;            last_name='Member',&#10;            birthdate=birthdate,&#10;            ssn='666-66-6666',&#10;            medicare_number='VALID66666',&#10;            phone='514-555-0006',&#10;            address='123 Valid St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1E 1E1',&#10;            email='valid@test.com',&#10;            height=150,&#10;            weight=40,&#10;            location=self.location,&#10;            gender='M',&#10;            minor=False&#10;        )&#10;        &#10;        self.assertEqual(member.age, 25)&#10;        self.assertFalse(member.is_minor)&#10;        self.assertTrue(member.is_major)&#10;&#10;&#10;class BusinessLogicTestCase(TestCase):&#10;    &quot;&quot;&quot;Test business logic and payment rules&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        self.location = Location.objects.create(&#10;            name='Test Location',&#10;            type='head',&#10;            address='123 Test St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1A 1A1',&#10;            phone='514-555-0100',&#10;            capacity=100&#10;        )&#10;&#10;        # Create a minor member (14 years old)&#10;        self.minor_member = ClubMember.objects.create(&#10;            first_name='Minor',&#10;            last_name='Member',&#10;            birthdate=date(2011, 1, 1),  # 14 years old&#10;            ssn='999-99-9999',&#10;            medicare_number='MINOR99999',&#10;            phone='514-555-0009',&#10;            address='123 Minor St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1H 1H1',&#10;            email='minor@test.com',&#10;            height=160,&#10;            weight=50,&#10;            location=self.location,&#10;            gender='M',&#10;            minor=True&#10;        )&#10;&#10;        # Create a major member (20 years old)&#10;        self.major_member = ClubMember.objects.create(&#10;            first_name='Major',&#10;            last_name='Member',&#10;            birthdate=date(2005, 1, 1),  # 20 years old&#10;            ssn='101-01-0101',&#10;            medicare_number='MAJOR10101',&#10;            phone='514-555-0010',&#10;            address='123 Major St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1I 1I1',&#10;            email='major@test.com',&#10;            height=175,&#10;            weight=70,&#10;            location=self.location,&#10;            gender='M',&#10;            minor=False&#10;        )&#10;&#10;    def test_payment_amounts_for_minor_and_major(self):&#10;        &quot;&quot;&quot;Test that payment validation follows the rules: $100 for minor, $200 for major&quot;&quot;&quot;&#10;        current_year = date.today().year&#10;&#10;        # Test minor member payment&#10;        minor_payment = Payments.objects.create(&#10;            member=self.minor_member,&#10;            payment_date=date.today(),&#10;            amount=Decimal('100.00'),&#10;            payment_method='cash',&#10;            membership_year=current_year,&#10;            payment_type='membership',&#10;            installment_number=1&#10;        )&#10;        self.assertEqual(minor_payment.amount, Decimal('100.00'))&#10;&#10;        # Test major member payment&#10;        major_payment = Payments.objects.create(&#10;            member=self.major_member,&#10;            payment_date=date.today(),&#10;            amount=Decimal('200.00'),&#10;            payment_method='credit',&#10;            membership_year=current_year,&#10;            payment_type='membership',&#10;            installment_number=1&#10;        )&#10;        self.assertEqual(major_payment.amount, Decimal('200.00'))&#10;&#10;    def test_annual_fee_calculation(self):&#10;        &quot;&quot;&quot;Test that annual fee calculation is correct&quot;&quot;&quot;&#10;        self.assertEqual(self.minor_member.annual_fee, 100.00)&#10;        self.assertEqual(self.major_member.annual_fee, 200.00)&#10;&#10;&#10;class SessionTeamsTestCase(TestCase):&#10;    &quot;&quot;&quot;Test session and team functionality&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        self.location = Location.objects.create(&#10;            name='Test Location',&#10;            type='head',&#10;            address='123 Test St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1A 1A1',&#10;            phone='514-555-0100',&#10;            capacity=100&#10;        )&#10;&#10;        self.coach = Personnel.objects.create(&#10;            first_name='Head',&#10;            last_name='Coach',&#10;            birthdate=date(1980, 1, 1),&#10;            ssn='202-02-0202',&#10;            medicare_number='COACH20202',&#10;            phone='514-555-0020',&#10;            address='123 Coach St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1J 1J1',&#10;            email='headcoach@test.com'&#10;        )&#10;&#10;        self.member = ClubMember.objects.create(&#10;            first_name='Team',&#10;            last_name='Member',&#10;            birthdate=date(2000, 1, 1),&#10;            ssn='303-03-0303',&#10;            medicare_number='TEAM030303',&#10;            phone='514-555-0030',&#10;            address='123 Team St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1K 1K1',&#10;            email='teammember@test.com',&#10;            height=175,&#10;            weight=70,&#10;            location=self.location,&#10;            gender='M',&#10;            minor=False,&#10;            activity=True&#10;        )&#10;&#10;    def test_session_creation(self):&#10;        &quot;&quot;&quot;Test creating sessions and teams&quot;&quot;&quot;&#10;        tomorrow = date.today() + timedelta(days=1)&#10;&#10;        # Create session&#10;        session = Sessions.objects.create(&#10;            session_type='training',&#10;            session_date=tomorrow,&#10;            session_time='18:00',&#10;            address='123 Training St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1A 1A1',&#10;            status='scheduled'&#10;        )&#10;&#10;        # Create session team&#10;        team = SessionTeams.objects.create(&#10;            session=session,&#10;            team_name='Test Training Team',&#10;            location=self.location,&#10;            head_coach=self.coach,&#10;            team_number=1,&#10;            gender='M'&#10;        )&#10;&#10;        self.assertEqual(team.session, session)&#10;        self.assertEqual(team.head_coach, self.coach)&#10;        self.assertEqual(team.gender, 'M')&#10;&#10;    def test_player_assignment_to_team(self):&#10;        &quot;&quot;&quot;Test assigning players to teams&quot;&quot;&quot;&#10;        tomorrow = date.today() + timedelta(days=1)&#10;&#10;        session = Sessions.objects.create(&#10;            session_type='training',&#10;            session_date=tomorrow,&#10;            session_time='18:00',&#10;            address='123 Test St',&#10;            status='scheduled'&#10;        )&#10;&#10;        team = SessionTeams.objects.create(&#10;            session=session,&#10;            team_name='Test Team',&#10;            location=self.location,&#10;            head_coach=self.coach,&#10;            team_number=1,&#10;            gender='M'&#10;        )&#10;&#10;        # Assign player to team&#10;        assignment = PlayerAssignment.objects.create(&#10;            member=self.member,&#10;            team=team,&#10;            position='Setter',&#10;            is_starter=True&#10;        )&#10;&#10;        self.assertEqual(assignment.member, self.member)&#10;        self.assertEqual(assignment.team, team)&#10;        self.assertEqual(assignment.position, 'Setter')&#10;        self.assertTrue(assignment.is_starter)&#10;&#10;&#10;class FamilyMemberTestCase(TestCase):&#10;    &quot;&quot;&quot;Test family member relationships and constraints&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        self.location = Location.objects.create(&#10;            name='Test Location',&#10;            type='head',&#10;            address='123 Test St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1A 1A1',&#10;            phone='514-555-0100',&#10;            capacity=100&#10;        )&#10;&#10;        self.family_member = FamilyMember.objects.create(&#10;            first_name='Parent',&#10;            last_name='Test',&#10;            birthdate=date(1975, 1, 1),&#10;            ssn='404-04-0404',&#10;            medicare_number='PARENT0404',&#10;            phone='514-555-0040',&#10;            address='123 Parent St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1L 1L1',&#10;            email='parent@test.com',&#10;            location=self.location&#10;        )&#10;&#10;        self.minor_member = ClubMember.objects.create(&#10;            first_name='Child',&#10;            last_name='Test',&#10;            birthdate=date(2010, 1, 1),  # 15 years old&#10;            ssn='505-05-0505',&#10;            medicare_number='CHILD50505',&#10;            phone='514-555-0050',&#10;            address='123 Parent St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1L 1L1',&#10;            email='child@test.com',&#10;            height=160,&#10;            weight=50,&#10;            location=self.location,&#10;            gender='M',&#10;            minor=True,&#10;            activity=True&#10;        )&#10;&#10;    def test_secondary_family_member_creation(self):&#10;        &quot;&quot;&quot;Test creating secondary family member contacts&quot;&quot;&quot;&#10;        secondary = SecondaryFamilyMember.objects.create(&#10;            minor=self.minor_member,&#10;            first_name='Emergency',&#10;            last_name='Contact',&#10;            phone='514-555-0060',&#10;            relationship_type='partner'&#10;        )&#10;&#10;        self.assertEqual(secondary.minor, self.minor_member)&#10;        self.assertEqual(secondary.relationship_type, 'partner')&#10;&#10;    def test_family_relationship_creation(self):&#10;        &quot;&quot;&quot;Test associating minor members with family members&quot;&quot;&quot;&#10;        relationship = FamilyRelationship.objects.create(&#10;            minor=self.minor_member,&#10;            major=self.family_member,&#10;            relationship_id=1,&#10;            relationship_type='father',&#10;            start_date=date.today(),&#10;            is_primary=True,&#10;            emergency_contact=True&#10;        )&#10;&#10;        self.assertEqual(relationship.minor, self.minor_member)&#10;        self.assertEqual(relationship.major, self.family_member)&#10;        self.assertEqual(relationship.relationship_type, 'father')&#10;        self.assertTrue(relationship.is_primary)&#10;        self.assertTrue(relationship.emergency_contact)&#10;&#10;&#10;class CRUDOperationsTestCase(TestCase):&#10;    &quot;&quot;&quot;Test CRUD operations through views&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        self.client = Client()&#10;        self.location = Location.objects.create(&#10;            name='Test Location',&#10;            type='head',&#10;            address='123 Test St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1A 1A1',&#10;            phone='514-555-0100',&#10;            capacity=100&#10;        )&#10;&#10;    def test_location_creation(self):&#10;        &quot;&quot;&quot;Test that locations can be created properly&quot;&quot;&quot;&#10;        location_count = Location.objects.count()&#10;        self.assertGreaterEqual(location_count, 1)&#10;        &#10;        location = Location.objects.first()&#10;        self.assertIsNotNone(location.name)&#10;        self.assertIsNotNone(location.type)&#10;        self.assertIsNotNone(location.capacity)&#10;&#10;&#10;class HobbiesTestCase(TestCase):&#10;    &quot;&quot;&quot;Test hobbies and member hobbies relationships&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        self.location = Location.objects.create(&#10;            name='Test Location',&#10;            type='head',&#10;            address='123 Test St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1A 1A1',&#10;            phone='514-555-0100',&#10;            capacity=100&#10;        )&#10;&#10;        self.hobby = Hobbies.objects.create(name='Volleyball')&#10;&#10;        self.member = ClubMember.objects.create(&#10;            first_name='Test',&#10;            last_name='Member',&#10;            birthdate=date(1990, 1, 1),&#10;            ssn='123-45-6789',&#10;            medicare_number='TEST123456',&#10;            phone='514-555-1001',&#10;            address='123 Member St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1A 1A1',&#10;            email='member@test.com',&#10;            height=175,&#10;            weight=70,&#10;            location=self.location,&#10;            gender='M',&#10;            minor=False,&#10;            activity=True&#10;        )&#10;&#10;    def test_hobby_creation(self):&#10;        &quot;&quot;&quot;Test that hobbies can be created&quot;&quot;&quot;&#10;        self.assertEqual(self.hobby.name, 'Volleyball')&#10;&#10;    def test_member_hobby_relationship(self):&#10;        &quot;&quot;&quot;Test creating member-hobby relationships&quot;&quot;&quot;&#10;        member_hobby = MemberHobbies.objects.create(&#10;            member=self.member,&#10;            hobby=self.hobby&#10;        )&#10;&#10;        self.assertEqual(member_hobby.member, self.member)&#10;        self.assertEqual(member_hobby.hobby, self.hobby)&#10;&#10;&#10;class EmailLogTestCase(TestCase):&#10;    &quot;&quot;&quot;Test email logging functionality&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        self.location = Location.objects.create(&#10;            name='Test Location',&#10;            type='head',&#10;            address='123 Test St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1A 1A1',&#10;            phone='514-555-0100',&#10;            capacity=100&#10;        )&#10;&#10;        self.member = ClubMember.objects.create(&#10;            first_name='Test',&#10;            last_name='Member',&#10;            birthdate=date(1990, 1, 1),&#10;            ssn='123-45-6789',&#10;            medicare_number='TEST123456',&#10;            phone='514-555-1001',&#10;            address='123 Member St',&#10;            city='Montreal',&#10;            province='Quebec',&#10;            postal_code='H1A 1A1',&#10;            email='member@test.com',&#10;            height=175,&#10;            weight=70,&#10;            location=self.location,&#10;            gender='M',&#10;            minor=False,&#10;            activity=True&#10;        )&#10;&#10;    def test_email_log_creation(self):&#10;        &quot;&quot;&quot;Test creating email log entries&quot;&quot;&quot;&#10;        email_log = EmailLog.objects.create(&#10;            sender_location=self.location,&#10;            receiver_member=self.member,&#10;            receiver_email='member@test.com',&#10;            subject='Test Email',&#10;            body_preview='This is a test email...',&#10;            email_type='general',&#10;            status='sent'&#10;        )&#10;&#10;        self.assertEqual(email_log.sender_location, self.location)&#10;        self.assertEqual(email_log.receiver_member, self.member)&#10;        self.assertEqual(email_log.subject, 'Test Email')&#10;        self.assertEqual(email_log.email_type, 'general')&#10;        self.assertEqual(email_log.status, 'sent')" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/project_name/club/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/project_name/club/views.py" />
              <option name="originalContent" value="from datetime import date, timedelta&#10;&#10;from django import forms&#10;from django.contrib import messages&#10;from django.shortcuts import render, redirect, get_object_or_404&#10;from django.utils import timezone&#10;&#10;from .forms import ClubMemberForm, PersonnelForm, FamilyMemberForm, SecondaryFamilyMemberForm, SessionTeamsForm, PlayerAssignmentForm&#10;from .models import Location, ClubMember, Personnel, FamilyMember, SecondaryFamilyMember, SessionTeams, PlayerAssignment&#10;&#10;&#10;# Personnel CRUD Views&#10;def personnel_list(request):&#10;    personnel = Personnel.objects.all().order_by('last_name', 'first_name')&#10;    context = {'personnel_list': personnel}&#10;    return render(request, 'personnel_list.html', context)&#10;&#10;&#10;def personnel_create(request):&#10;    if request.method == 'POST':&#10;        form = PersonnelForm(request.POST)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, 'Personnel created successfully!')&#10;            return redirect('personnel_list')&#10;    else:&#10;        form = PersonnelForm()&#10;    return render(request, 'personnel_form.html', {'form': form, 'action': 'Create'})&#10;&#10;&#10;def personnel_detail(request, pk):&#10;    personnel = get_object_or_404(Personnel, pk=pk)&#10;    return render(request, 'personnel_detail.html', {'personnel': personnel})&#10;&#10;&#10;def personnel_edit(request, pk):&#10;    personnel = get_object_or_404(Personnel, pk=pk)&#10;    if request.method == 'POST':&#10;        form = PersonnelForm(request.POST, instance=personnel)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, 'Personnel updated successfully!')&#10;            return redirect('personnel_detail', pk=pk)&#10;    else:&#10;        form = PersonnelForm(instance=personnel)&#10;    return render(request, 'personnel_form.html', {'form': form, 'action': 'Edit', 'personnel': personnel})&#10;&#10;&#10;def personnel_delete(request, pk):&#10;    personnel = get_object_or_404(Personnel, pk=pk)&#10;    if request.method == 'POST':&#10;        personnel.delete()&#10;        messages.success(request, 'Personnel deleted successfully!')&#10;        return redirect('personnel_list')&#10;    return render(request, 'personnel_confirm_delete.html', {'personnel': personnel})&#10;&#10;&#10;# Family Member CRUD Views&#10;def family_member_list(request):&#10;    family_members = FamilyMember.objects.all().order_by('last_name', 'first_name')&#10;    context = {'family_members': family_members}&#10;    return render(request, 'family_member_list.html', context)&#10;&#10;&#10;def family_member_create(request):&#10;    if request.method == 'POST':&#10;        form = FamilyMemberForm(request.POST)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, 'Family member created successfully!')&#10;            return redirect('family_member_list')&#10;    else:&#10;        form = FamilyMemberForm()&#10;    return render(request, 'family_member_form.html', {'form': form, 'action': 'Create'})&#10;&#10;&#10;def family_member_detail(request, pk):&#10;    family_member = get_object_or_404(FamilyMember, pk=pk)&#10;    secondary_contacts = family_member.secondary_contacts.all()&#10;    associated_members = family_member.minormemberassociation_set.all()&#10;    context = {&#10;        'family_member': family_member,&#10;        'secondary_contacts': secondary_contacts,&#10;        'associated_members': associated_members&#10;    }&#10;    return render(request, 'family_member_detail.html', context)&#10;&#10;&#10;def family_member_edit(request, pk):&#10;    family_member = get_object_or_404(FamilyMember, pk=pk)&#10;    if request.method == 'POST':&#10;        form = FamilyMemberForm(request.POST, instance=family_member)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, 'Family member updated successfully!')&#10;            return redirect('family_member_detail', pk=pk)&#10;    else:&#10;        form = FamilyMemberForm(instance=family_member)&#10;    return render(request, 'family_member_form.html', {'form': form, 'action': 'Edit', 'family_member': family_member})&#10;&#10;&#10;def family_member_delete(request, pk):&#10;    family_member = get_object_or_404(FamilyMember, pk=pk)&#10;    if request.method == 'POST':&#10;        family_member.delete()&#10;        messages.success(request, 'Family member deleted successfully!')&#10;        return redirect('family_member_list')&#10;    return render(request, 'family_member_confirm_delete.html', {'family_member': family_member})&#10;&#10;&#10;# Secondary Family Member CRUD Views&#10;def secondary_family_member_create(request, family_member_pk):&#10;    family_member = get_object_or_404(FamilyMember, pk=family_member_pk)&#10;    if request.method == 'POST':&#10;        form = SecondaryFamilyMemberForm(request.POST)&#10;        if form.is_valid():&#10;            secondary = form.save(commit=False)&#10;            secondary.primary_family_member = family_member&#10;            secondary.save()&#10;            messages.success(request, 'Secondary family member created successfully!')&#10;            return redirect('family_member_detail', pk=family_member_pk)&#10;    else:&#10;        form = SecondaryFamilyMemberForm()&#10;        form.fields['primary_family_member'].initial = family_member&#10;        form.fields['primary_family_member'].widget = forms.HiddenInput()&#10;    return render(request, 'secondary_family_member_form.html',&#10;                  {'form': form, 'family_member': family_member, 'action': 'Create'})&#10;&#10;&#10;def secondary_family_member_edit(request, pk):&#10;    secondary = get_object_or_404(SecondaryFamilyMember, pk=pk)&#10;    if request.method == 'POST':&#10;        form = SecondaryFamilyMemberForm(request.POST, instance=secondary)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, 'Secondary family member updated successfully!')&#10;            return redirect('family_member_detail', pk=secondary.primary_family_member.pk)&#10;    else:&#10;        form = SecondaryFamilyMemberForm(instance=secondary)&#10;    return render(request, 'secondary_family_member_form.html',&#10;                  {'form': form, 'secondary': secondary, 'action': 'Edit'})&#10;&#10;&#10;def secondary_family_member_delete(request, pk):&#10;    secondary = get_object_or_404(SecondaryFamilyMember, pk=pk)&#10;    family_member_pk = secondary.primary_family_member.pk&#10;    if request.method == 'POST':&#10;        secondary.delete()&#10;        messages.success(request, 'Secondary family member deleted successfully!')&#10;        return redirect('family_member_detail', pk=family_member_pk)&#10;    return render(request, 'secondary_family_member_confirm_delete.html', {'secondary': secondary})&#10;&#10;&#10;# Club Member CRUD Views (Enhanced)&#10;def club_member_list(request):&#10;    members = ClubMember.objects.all().order_by('last_name', 'first_name')&#10;    context = {'club_members': members}&#10;    return render(request, 'club_member_list.html', context)&#10;&#10;&#10;def club_member_detail(request, pk):&#10;    member = get_object_or_404(ClubMember, pk=pk)&#10;    payments = member.payment_set.all().order_by('-payment_date')&#10;    family_associations = member.minormemberassociation_set.all()&#10;    team_assignments = member.playerassignment_set.all()&#10;&#10;    # Calculate age and status&#10;    today = date.today()&#10;    age = today.year - member.date_of_birth.year - (&#10;            (today.month, today.day) &lt; (member.date_of_birth.month, member.date_of_birth.day))&#10;    is_minor = age &lt; 18&#10;&#10;    context = {&#10;        'member': member,&#10;        'payments': payments,&#10;        'family_associations': family_associations,&#10;        'team_assignments': team_assignments,&#10;        'age': age,&#10;        'is_minor': is_minor&#10;    }&#10;    return render(request, 'club_member_detail.html', context)&#10;&#10;&#10;def club_member_edit(request, pk):&#10;    member = get_object_or_404(ClubMember, pk=pk)&#10;    if request.method == 'POST':&#10;        form = ClubMemberForm(request.POST, instance=member)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, 'Club member updated successfully!')&#10;            return redirect('club_member_detail', pk=pk)&#10;    else:&#10;        form = ClubMemberForm(instance=member)&#10;    return render(request, 'club_member_form.html', {'form': form, 'action': 'Edit', 'member': member})&#10;&#10;&#10;def club_member_delete(request, pk):&#10;    member = get_object_or_404(ClubMember, pk=pk)&#10;    if request.method == 'POST':&#10;        member.delete()&#10;        messages.success(request, 'Club member deleted successfully!')&#10;        return redirect('club_member_list')&#10;    return render(request, 'club_member_confirm_delete.html', {'member': member})&#10;&#10;&#10;def create_member(request):&#10;    if request.method == 'POST':&#10;        form = ClubMemberForm(request.POST)&#10;        if form.is_valid():&#10;            form.save()&#10;            return redirect('main_interface')&#10;    else:&#10;        form = ClubMemberForm()&#10;&#10;    return render(request, 'member_creation.html', {'form': form})&#10;&#10;&#10;def inactive_members_report(request):&#10;    # Query inactive members who meet the criteria&#10;    inactive_members = ClubMember.objects.filter(&#10;        is_active=False,&#10;        location__isnull=False,&#10;        date_joined__lte=timezone.now() - timedelta(days=730)&#10;    ).exclude(&#10;        payment__for_year=timezone.now().year - 1&#10;    ).distinct()&#10;&#10;    context = {&#10;        'inactive_members': inactive_members&#10;    }&#10;    return render(request, 'inactive_members_report.html', context)&#10;&#10;&#10;def location_report(request):&#10;    locations = Location.objects.all().order_by('name')&#10;    context = {&#10;        'location_data': locations&#10;    }&#10;    return render(request, 'main_interface.html', context)&#10;&#10;&#10;def main_interface(request):&#10;    return render(request, 'main_interface.html')&#10;&#10;&#10;def member_list(request):&#10;    members = ClubMember.objects.all().order_by('last_name', 'first_name')&#10;    context = {&#10;        'members': members&#10;    }&#10;    return render(request, 'main_interface.html', context)&#10;&#10;&#10;# Team Formation Views&#10;def team_formation_list(request):&#10;    &quot;&quot;&quot;View all team formations&quot;&quot;&quot;&#10;    formations = SessionTeams.objects.all().order_by('-session_date', '-start_time')&#10;    context = {'formations': formations}&#10;    return render(request, 'team_formation_list.html', context)&#10;&#10;&#10;def team_formation_create(request):&#10;    &quot;&quot;&quot;Create a new team formation&quot;&quot;&quot;&#10;    if request.method == 'POST':&#10;        form = SessionTeamsForm(request.POST)&#10;        if form.is_valid():&#10;            team_formation = form.save()&#10;            messages.success(request, 'Team formation created successfully!')&#10;            return redirect('team_formation_detail', pk=team_formation.pk)&#10;    else:&#10;        form = SessionTeamsForm()&#10;    return render(request, 'team_formation_form.html', {'form': form, 'action': 'Create'})&#10;&#10;&#10;def team_formation_detail(request, pk):&#10;    &quot;&quot;&quot;View team formation details with players&quot;&quot;&quot;&#10;    formation = get_object_or_404(SessionTeams, pk=pk)&#10;    players = PlayerAssignment.objects.filter(team=formation).select_related('member')&#10;    context = {&#10;        'formation': formation,&#10;        'players': players&#10;    }&#10;    return render(request, 'team_formation_detail.html', context)&#10;&#10;&#10;def team_formation_edit(request, pk):&#10;    &quot;&quot;&quot;Edit a team formation&quot;&quot;&quot;&#10;    formation = get_object_or_404(SessionTeams, pk=pk)&#10;    if request.method == 'POST':&#10;        form = SessionTeamsForm(request.POST, instance=formation)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, 'Team formation updated successfully!')&#10;            return redirect('team_formation_detail', pk=pk)&#10;    else:&#10;        form = SessionTeamsForm(instance=formation)&#10;    return render(request, 'team_formation_form.html', {'form': form, 'action': 'Edit', 'formation': formation})&#10;&#10;&#10;def team_formation_delete(request, pk):&#10;    &quot;&quot;&quot;Delete a team formation&quot;&quot;&quot;&#10;    formation = get_object_or_404(SessionTeams, pk=pk)&#10;    if request.method == 'POST':&#10;        formation.delete()&#10;        messages.success(request, 'Team formation deleted successfully!')&#10;        return redirect('team_formation_list')&#10;    return render(request, 'team_formation_confirm_delete.html', {'formation': formation})&#10;&#10;&#10;def player_assignment_create(request, formation_pk):&#10;    &quot;&quot;&quot;Add a player to a team formation&quot;&quot;&quot;&#10;    formation = get_object_or_404(SessionTeams, pk=formation_pk)&#10;    if request.method == 'POST':&#10;        form = PlayerAssignmentForm(request.POST)&#10;        if form.is_valid():&#10;            assignment = form.save(commit=False)&#10;            assignment.team = formation&#10;            assignment.save()&#10;            messages.success(request, f'{assignment.member.first_name} {assignment.member.last_name} added to team!')&#10;            return redirect('team_formation_detail', pk=formation_pk)&#10;    else:&#10;        form = PlayerAssignmentForm()&#10;    context = {&#10;        'form': form,&#10;        'formation': formation,&#10;        'action': 'Add Player'&#10;    }&#10;    return render(request, 'player_assignment_form.html', context)&#10;&#10;&#10;def player_assignment_delete(request, pk):&#10;    &quot;&quot;&quot;Remove a player from a team formation&quot;&quot;&quot;&#10;    assignment = get_object_or_404(PlayerAssignment, pk=pk)&#10;    formation_pk = assignment.team.pk&#10;    if request.method == 'POST':&#10;        player_name = f'{assignment.member.first_name} {assignment.member.last_name}'&#10;        assignment.delete()&#10;        messages.success(request, f'{player_name} removed from team!')&#10;        return redirect('team_formation_detail', pk=formation_pk)&#10;    return render(request, 'player_assignment_confirm_delete.html', {'assignment': assignment})&#10;&#10;&#10;# Legacy aliases for backwards compatibility&#10;def team_create(request):&#10;    return team_formation_create(request)&#10;&#10;&#10;def team_view(request):&#10;    return team_formation_list(request)&#10;" />
              <option name="updatedContent" value="from datetime import date, timedelta&#10;&#10;from django import forms&#10;from django.contrib import messages&#10;from django.shortcuts import render, redirect, get_object_or_404&#10;from django.utils import timezone&#10;&#10;from .forms import ClubMemberForm, PersonnelForm, FamilyMemberForm, SecondaryFamilyMemberForm, SessionTeamsForm, PlayerAssignmentForm&#10;from .models import Location, ClubMember, Personnel, FamilyMember, SecondaryFamilyMember, SessionTeams, PlayerAssignment&#10;&#10;&#10;# Personnel CRUD Views&#10;def personnel_list(request):&#10;    personnel = Personnel.objects.all().order_by('last_name', 'first_name')&#10;    context = {'personnel_list': personnel}&#10;    return render(request, 'personnel_list.html', context)&#10;&#10;&#10;def personnel_create(request):&#10;    if request.method == 'POST':&#10;        form = PersonnelForm(request.POST)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, 'Personnel created successfully!')&#10;            return redirect('personnel_list')&#10;    else:&#10;        form = PersonnelForm()&#10;    return render(request, 'personnel_form.html', {'form': form, 'action': 'Create'})&#10;&#10;&#10;def personnel_detail(request, pk):&#10;    personnel = get_object_or_404(Personnel, pk=pk)&#10;    return render(request, 'personnel_detail.html', {'personnel': personnel})&#10;&#10;&#10;def personnel_edit(request, pk):&#10;    personnel = get_object_or_404(Personnel, pk=pk)&#10;    if request.method == 'POST':&#10;        form = PersonnelForm(request.POST, instance=personnel)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, 'Personnel updated successfully!')&#10;            return redirect('personnel_detail', pk=pk)&#10;    else:&#10;        form = PersonnelForm(instance=personnel)&#10;    return render(request, 'personnel_form.html', {'form': form, 'action': 'Edit', 'personnel': personnel})&#10;&#10;&#10;def personnel_delete(request, pk):&#10;    personnel = get_object_or_404(Personnel, pk=pk)&#10;    if request.method == 'POST':&#10;        personnel.delete()&#10;        messages.success(request, 'Personnel deleted successfully!')&#10;        return redirect('personnel_list')&#10;    return render(request, 'personnel_confirm_delete.html', {'personnel': personnel})&#10;&#10;&#10;# Family Member CRUD Views&#10;def family_member_list(request):&#10;    family_members = FamilyMember.objects.all().order_by('last_name', 'first_name')&#10;    context = {'family_members': family_members}&#10;    return render(request, 'family_member_list.html', context)&#10;&#10;&#10;def family_member_create(request):&#10;    if request.method == 'POST':&#10;        form = FamilyMemberForm(request.POST)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, 'Family member created successfully!')&#10;            return redirect('family_member_list')&#10;    else:&#10;        form = FamilyMemberForm()&#10;    return render(request, 'family_member_form.html', {'form': form, 'action': 'Create'})&#10;&#10;&#10;def family_member_detail(request, pk):&#10;    family_member = get_object_or_404(FamilyMember, pk=pk)&#10;    secondary_contacts = family_member.secondary_contacts.all()&#10;    associated_members = family_member.minormemberassociation_set.all()&#10;    context = {&#10;        'family_member': family_member,&#10;        'secondary_contacts': secondary_contacts,&#10;        'associated_members': associated_members&#10;    }&#10;    return render(request, 'family_member_detail.html', context)&#10;&#10;&#10;def family_member_edit(request, pk):&#10;    family_member = get_object_or_404(FamilyMember, pk=pk)&#10;    if request.method == 'POST':&#10;        form = FamilyMemberForm(request.POST, instance=family_member)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, 'Family member updated successfully!')&#10;            return redirect('family_member_detail', pk=pk)&#10;    else:&#10;        form = FamilyMemberForm(instance=family_member)&#10;    return render(request, 'family_member_form.html', {'form': form, 'action': 'Edit', 'family_member': family_member})&#10;&#10;&#10;def family_member_delete(request, pk):&#10;    family_member = get_object_or_404(FamilyMember, pk=pk)&#10;    if request.method == 'POST':&#10;        family_member.delete()&#10;        messages.success(request, 'Family member deleted successfully!')&#10;        return redirect('family_member_list')&#10;    return render(request, 'family_member_confirm_delete.html', {'family_member': family_member})&#10;&#10;&#10;# Secondary Family Member CRUD Views&#10;def secondary_family_member_create(request, family_member_pk):&#10;    family_member = get_object_or_404(FamilyMember, pk=family_member_pk)&#10;    if request.method == 'POST':&#10;        form = SecondaryFamilyMemberForm(request.POST)&#10;        if form.is_valid():&#10;            secondary = form.save(commit=False)&#10;            secondary.primary_family_member = family_member&#10;            secondary.save()&#10;            messages.success(request, 'Secondary family member created successfully!')&#10;            return redirect('family_member_detail', pk=family_member_pk)&#10;    else:&#10;        form = SecondaryFamilyMemberForm()&#10;        form.fields['primary_family_member'].initial = family_member&#10;        form.fields['primary_family_member'].widget = forms.HiddenInput()&#10;    return render(request, 'secondary_family_member_form.html',&#10;                  {'form': form, 'family_member': family_member, 'action': 'Create'})&#10;&#10;&#10;def secondary_family_member_edit(request, pk):&#10;    secondary = get_object_or_404(SecondaryFamilyMember, pk=pk)&#10;    if request.method == 'POST':&#10;        form = SecondaryFamilyMemberForm(request.POST, instance=secondary)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, 'Secondary family member updated successfully!')&#10;            return redirect('family_member_detail', pk=secondary.primary_family_member.pk)&#10;    else:&#10;        form = SecondaryFamilyMemberForm(instance=secondary)&#10;    return render(request, 'secondary_family_member_form.html',&#10;                  {'form': form, 'secondary': secondary, 'action': 'Edit'})&#10;&#10;&#10;def secondary_family_member_delete(request, pk):&#10;    secondary = get_object_or_404(SecondaryFamilyMember, pk=pk)&#10;    family_member_pk = secondary.primary_family_member.pk&#10;    if request.method == 'POST':&#10;        secondary.delete()&#10;        messages.success(request, 'Secondary family member deleted successfully!')&#10;        return redirect('family_member_detail', pk=family_member_pk)&#10;    return render(request, 'secondary_family_member_confirm_delete.html', {'secondary': secondary})&#10;&#10;&#10;# Club Member CRUD Views (Enhanced)&#10;def club_member_list(request):&#10;    members = ClubMember.objects.all().order_by('last_name', 'first_name')&#10;    context = {'club_members': members}&#10;    return render(request, 'club_member_list.html', context)&#10;&#10;&#10;def club_member_detail(request, pk):&#10;    member = get_object_or_404(ClubMember, pk=pk)&#10;    payments = member.payments_set.all().order_by('-payment_date')&#10;    family_associations = member.familyrelationship_set.all()&#10;    team_assignments = member.playerassignment_set.all()&#10;&#10;    # Calculate age and status&#10;    today = date.today()&#10;    age = today.year - member.birthdate.year - (&#10;            (today.month, today.day) &lt; (member.birthdate.month, member.birthdate.day))&#10;    is_minor = age &lt; 18&#10;&#10;    context = {&#10;        'member': member,&#10;        'payments': payments,&#10;        'family_associations': family_associations,&#10;        'team_assignments': team_assignments,&#10;        'age': age,&#10;        'is_minor': is_minor&#10;    }&#10;    return render(request, 'club_member_detail.html', context)&#10;&#10;&#10;def club_member_edit(request, pk):&#10;    member = get_object_or_404(ClubMember, pk=pk)&#10;    if request.method == 'POST':&#10;        form = ClubMemberForm(request.POST, instance=member)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, 'Club member updated successfully!')&#10;            return redirect('club_member_detail', pk=pk)&#10;    else:&#10;        form = ClubMemberForm(instance=member)&#10;    return render(request, 'club_member_form.html', {'form': form, 'action': 'Edit', 'member': member})&#10;&#10;&#10;def club_member_delete(request, pk):&#10;    member = get_object_or_404(ClubMember, pk=pk)&#10;    if request.method == 'POST':&#10;        member.delete()&#10;        messages.success(request, 'Club member deleted successfully!')&#10;        return redirect('club_member_list')&#10;    return render(request, 'club_member_confirm_delete.html', {'member': member})&#10;&#10;&#10;def create_member(request):&#10;    if request.method == 'POST':&#10;        form = ClubMemberForm(request.POST)&#10;        if form.is_valid():&#10;            form.save()&#10;            return redirect('main_interface')&#10;    else:&#10;        form = ClubMemberForm()&#10;&#10;    return render(request, 'member_creation.html', {'form': form})&#10;&#10;&#10;def inactive_members_report(request):&#10;    # Query inactive members who meet the criteria&#10;    inactive_members = ClubMember.objects.filter(&#10;        is_active=False,&#10;        location__isnull=False,&#10;        date_joined__lte=timezone.now() - timedelta(days=730)&#10;    ).exclude(&#10;        payment__for_year=timezone.now().year - 1&#10;    ).distinct()&#10;&#10;    context = {&#10;        'inactive_members': inactive_members&#10;    }&#10;    return render(request, 'inactive_members_report.html', context)&#10;&#10;&#10;def location_report(request):&#10;    locations = Location.objects.all().order_by('name')&#10;    context = {&#10;        'location_data': locations&#10;    }&#10;    return render(request, 'main_interface.html', context)&#10;&#10;&#10;def main_interface(request):&#10;    return render(request, 'main_interface.html')&#10;&#10;&#10;def member_list(request):&#10;    members = ClubMember.objects.all().order_by('last_name', 'first_name')&#10;    context = {&#10;        'members': members&#10;    }&#10;    return render(request, 'main_interface.html', context)&#10;&#10;&#10;# Team Formation Views&#10;def team_formation_list(request):&#10;    &quot;&quot;&quot;View all team formations&quot;&quot;&quot;&#10;    formations = SessionTeams.objects.all().order_by('-session_date', '-start_time')&#10;    context = {'formations': formations}&#10;    return render(request, 'team_formation_list.html', context)&#10;&#10;&#10;def team_formation_create(request):&#10;    &quot;&quot;&quot;Create a new team formation&quot;&quot;&quot;&#10;    if request.method == 'POST':&#10;        form = SessionTeamsForm(request.POST)&#10;        if form.is_valid():&#10;            team_formation = form.save()&#10;            messages.success(request, 'Team formation created successfully!')&#10;            return redirect('team_formation_detail', pk=team_formation.pk)&#10;    else:&#10;        form = SessionTeamsForm()&#10;    return render(request, 'team_formation_form.html', {'form': form, 'action': 'Create'})&#10;&#10;&#10;def team_formation_detail(request, pk):&#10;    &quot;&quot;&quot;View team formation details with players&quot;&quot;&quot;&#10;    formation = get_object_or_404(SessionTeams, pk=pk)&#10;    players = PlayerAssignment.objects.filter(team=formation).select_related('member')&#10;    context = {&#10;        'formation': formation,&#10;        'players': players&#10;    }&#10;    return render(request, 'team_formation_detail.html', context)&#10;&#10;&#10;def team_formation_edit(request, pk):&#10;    &quot;&quot;&quot;Edit a team formation&quot;&quot;&quot;&#10;    formation = get_object_or_404(SessionTeams, pk=pk)&#10;    if request.method == 'POST':&#10;        form = SessionTeamsForm(request.POST, instance=formation)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, 'Team formation updated successfully!')&#10;            return redirect('team_formation_detail', pk=pk)&#10;    else:&#10;        form = SessionTeamsForm(instance=formation)&#10;    return render(request, 'team_formation_form.html', {'form': form, 'action': 'Edit', 'formation': formation})&#10;&#10;&#10;def team_formation_delete(request, pk):&#10;    &quot;&quot;&quot;Delete a team formation&quot;&quot;&quot;&#10;    formation = get_object_or_404(SessionTeams, pk=pk)&#10;    if request.method == 'POST':&#10;        formation.delete()&#10;        messages.success(request, 'Team formation deleted successfully!')&#10;        return redirect('team_formation_list')&#10;    return render(request, 'team_formation_confirm_delete.html', {'formation': formation})&#10;&#10;&#10;def player_assignment_create(request, formation_pk):&#10;    &quot;&quot;&quot;Add a player to a team formation&quot;&quot;&quot;&#10;    formation = get_object_or_404(SessionTeams, pk=formation_pk)&#10;    if request.method == 'POST':&#10;        form = PlayerAssignmentForm(request.POST)&#10;        if form.is_valid():&#10;            assignment = form.save(commit=False)&#10;            assignment.team = formation&#10;            assignment.save()&#10;            messages.success(request, f'{assignment.member.first_name} {assignment.member.last_name} added to team!')&#10;            return redirect('team_formation_detail', pk=formation_pk)&#10;    else:&#10;        form = PlayerAssignmentForm()&#10;    context = {&#10;        'form': form,&#10;        'formation': formation,&#10;        'action': 'Add Player'&#10;    }&#10;    return render(request, 'player_assignment_form.html', context)&#10;&#10;&#10;def player_assignment_delete(request, pk):&#10;    &quot;&quot;&quot;Remove a player from a team formation&quot;&quot;&quot;&#10;    assignment = get_object_or_404(PlayerAssignment, pk=pk)&#10;    formation_pk = assignment.team.pk&#10;    if request.method == 'POST':&#10;        player_name = f'{assignment.member.first_name} {assignment.member.last_name}'&#10;        assignment.delete()&#10;        messages.success(request, f'{player_name} removed from team!')&#10;        return redirect('team_formation_detail', pk=formation_pk)&#10;    return render(request, 'player_assignment_confirm_delete.html', {'assignment': assignment})&#10;&#10;&#10;# Legacy aliases for backwards compatibility&#10;def team_create(request):&#10;    return team_formation_create(request)&#10;&#10;&#10;def team_view(request):&#10;    return team_formation_list(request)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>