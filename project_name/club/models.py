import uuid

from django.db import models
from django.core.exceptions import ValidationError
from datetime import date, timedelta

class Person(models.Model):
    """
    Person model that serves as a base for all people-related models
    """
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    birthdate = models.DateField()
    ssn = models.CharField(max_length=11, unique=True, null=False, blank=False)
    medicare_number = models.CharField(max_length=20, unique=True)
    phone = models.CharField(max_length=20)
    address = models.CharField(max_length=100)
    city = models.CharField(max_length=50)
    province = models.CharField(max_length=30)
    postal_code = models.CharField(max_length=10)
    email = models.EmailField(max_length=255)

    class Meta:
        abstract = True


class Location(models.Model):
    """
    Represents a club location which can be the head location or a branch
    """
    TYPE_CHOICES = [
        ('head', 'Head'),
        ('branch', 'Branch'),
    ]
    location_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=100)
    address = models.CharField(max_length=100)
    city = models.CharField(max_length=50)
    province = models.CharField(max_length=30)
    postal_code = models.CharField(max_length=10)
    phone = models.CharField(max_length=20)
    web_address = models.URLField(max_length=255, blank=True, null=True)
    type = models.CharField(max_length=10, choices=TYPE_CHOICES)
    capacity = models.PositiveIntegerField()

    def __str__(self):
        return f"{self.name} ({self.type})"


class Hobbies(models.Model):
    """
    A list of hobbies that can be associated with club members
    """
    hobby_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=50)

    def __str__(self):
        return self.name


class EmailLog(models.Model):
    """
    Logs every email generated by the system
    """
    EMAIL_TYPE_CHOICES = [
        ('session_notification', 'Session Notification'),
        ('general', 'General'),
        ('reminder', 'Reminder'),
    ]
    STATUS_CHOICES = [
        ('sent', 'Sent'),
        ('failed', 'Failed'),
        ('pending', 'Pending'),
    ]

    log_id = models.AutoField(primary_key=True)
    email_date = models.DateTimeField(auto_now_add=True)
    sender_location = models.ForeignKey(Location, on_delete=models.CASCADE)
    receiver_member = models.ForeignKey('ClubMember', on_delete=models.CASCADE)
    receiver_email = models.EmailField(max_length=255)
    subject = models.CharField(max_length=255)
    body_preview = models.TextField(max_length=100)
    email_type = models.CharField(max_length=20, choices=EMAIL_TYPE_CHOICES, default='session_notification')
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')
    session = models.ForeignKey('Sessions', on_delete=models.CASCADE, null=True, blank=True)

    def __str__(self):
        return f"Email to {self.receiver_email} on {self.email_date}"

class Personnel(Person):
    """
    Represents a person working at a club location
    """
    personnel_id = models.AutoField(primary_key=True)

    def __str__(self):
        return f"Personnel: {self.first_name} {self.last_name}"

    def current_role(self):
        """Get current active role"""
        current_assignment = self.personnelassignment_set.filter(end_date__isnull=True).first()
        return current_assignment.role if current_assignment else None

    def current_location(self):
        """Get current active location"""
        current_assignment = self.personnelassignment_set.filter(end_date__isnull=True).first()
        return current_assignment.location if current_assignment else None

class PersonnelAssignment(models.Model):
    """
    Links a personnel member to a location with specific dates, role, and mandate
    """
    ROLE_CHOICES = [
        ('general manager', 'General Manager'),
        ('deputy manager', 'Deputy Manager'),
        ('treasurer', 'Treasurer'),
        ('secretary', 'Secretary'),
        ('administrator', 'Administrator'),
        ('captain', 'Captain'),
        ('coach', 'Coach'),
        ('assistant coach', 'Assistant Coach'),
        ('other', 'Other'),
    ]
    MANDATE_CHOICES = [
        ('volunteer', 'Volunteer'),
        ('salaried', 'Salaried'),
    ]

    personnel = models.ForeignKey(Personnel, on_delete=models.CASCADE)
    location = models.ForeignKey(Location, on_delete=models.CASCADE)
    assignment_id = models.PositiveIntegerField()
    role = models.CharField(max_length=50, choices=ROLE_CHOICES)
    mandate = models.CharField(max_length=10, choices=MANDATE_CHOICES)
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True, default=None)

    class Meta:
        constraints = [
            models.CheckConstraint(
                check=models.Q(end_date__isnull=True) | models.Q(end_date__gte=models.F('start_date')),
                name='valid_date_range'
            ),
            models.UniqueConstraint(
                fields=['personnel', 'start_date'],
                name='unique_personnel_start_date'
            )
        ]

    def __str__(self):
        return f"{self.personnel} as {self.role} at {self.location} from {self.start_date}"


class FamilyMember(Person):
    """
    Represents a primary family member who can register minor club members
    """
    member_id = models.AutoField(primary_key=True)
    location = models.ForeignKey(Location, on_delete=models.SET_NULL, null=True, blank=True)

    def __str__(self):
        return f"Family Member {self.first_name} {self.last_name}"

class SecondaryFamilyMember(models.Model):
    """
    Represents a secondary contact for a family member
    """
    RELATIONSHIP_CHOICES = [
        ('father', 'Father'),
        ('mother', 'Mother'),
        ('grandmother', 'Grandmother'),
        ('grandfather', 'Grandfather'),
        ('tutor', 'Tutor'),
        ('partner', 'Partner'),
        ('friend', 'Friend'),
        ('other', 'Other'),
    ]

    secondary_id = models.AutoField(primary_key=True)
    minor = models.ForeignKey('ClubMember', on_delete=models.CASCADE)
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    phone = models.CharField(max_length=20)
    relationship_type = models.CharField(max_length=20, choices=RELATIONSHIP_CHOICES)

    def __str__(self):
        return f"Secondary Contact {self.first_name} {self.last_name}"

class ClubMember(Person):
    """
    Represents a club member who can be a minor or an adult
    """
    GENDER_CHOICES = [
        ('M', 'Male'),
        ('F', 'Female'),
        ('O', 'Other'),
    ]

    member_id = models.AutoField(primary_key=True)
    location = models.ForeignKey(Location, on_delete=models.CASCADE)
    activity = models.BooleanField(default=False)
    height = models.PositiveIntegerField()
    weight = models.PositiveIntegerField()
    gender = models.CharField(max_length=1, choices=GENDER_CHOICES)
    minor = models.BooleanField(null=True, blank=True)

    def __str__(self):
        return f"Member: {self.first_name} {self.last_name}"

    @property
    def age(self):
        today = date.today()
        return today.year - self.birthdate.year - ((today.month, today.day) < (self.birthdate.month, self.birthdate.day))

    @property
    def is_minor(self):
        return self.age < 18

    @property
    def is_major(self):
        return self.age >= 18

    @property
    def annual_fee(self):
        """Constraint: $100 for minors, $200 for majors"""
        return 100.00 if self.is_minor else 200.00


class MemberHobbies(models.Model):
    """
    Through model for ClubMember and Hobbies many-to-many relationship
    """
    member = models.ForeignKey(ClubMember, on_delete=models.CASCADE)
    hobby = models.ForeignKey(Hobbies, on_delete=models.CASCADE)

    class Meta:
        constraints = [
            models.UniqueConstraint(fields=['member', 'hobby'], name='unique_member_hobby')
        ]


class FamilyRelationship(models.Model):
    """
    Links a minor club member to a family member and defines their relationship
    """
    RELATIONSHIP_CHOICES = [
        ('father', 'Father'),
        ('mother', 'Mother'),
        ('grandmother', 'Grandmother'),
        ('grandfather', 'Grandfather'),
        ('tutor', 'Tutor'),
        ('partner', 'Partner'),
        ('friend', 'Friend'),
        ('other', 'Other'),
    ]

    minor = models.ForeignKey(ClubMember, on_delete=models.CASCADE)
    major = models.ForeignKey(FamilyMember, on_delete=models.CASCADE)
    relationship_id = models.PositiveIntegerField()
    relationship_type = models.CharField(max_length=20, choices=RELATIONSHIP_CHOICES)
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True, default=None)
    is_primary = models.BooleanField(default=True)
    emergency_contact = models.BooleanField(default=True)

    class Meta:
        constraints = [
            models.CheckConstraint(
                check=models.Q(end_date__isnull=True) | models.Q(end_date__gte=models.F('start_date')),
                name='valid_association_date_range'
            ),
            models.UniqueConstraint(
                fields=['minor', 'major', 'start_date'],
                name='unique_minor_family_start_date'
            )
        ]

    def __str__(self):
        return f"{self.minor.first_name} ({self.relationship_type}) with {self.major.first_name}"


class Payments(models.Model):
    """
    Records a payment made by a club member
    """
    METHOD_CHOICES = [
        ('cash', 'Cash'),
        ('debit', 'Debit Card'),
        ('credit', 'Credit Card'),
    ]
    PAYMENT_TYPE_CHOICES = [
        ('membership', 'Membership'),
        ('donation', 'Donation'),
    ]

    payment_id = models.AutoField(primary_key=True)
    member = models.ForeignKey(ClubMember, on_delete=models.CASCADE)
    payment_date = models.DateField()
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    payment_method = models.CharField(max_length=10, choices=METHOD_CHOICES)
    membership_year = models.PositiveIntegerField()
    payment_type = models.CharField(max_length=20, choices=PAYMENT_TYPE_CHOICES, default='membership')
    installment_number = models.PositiveIntegerField(null=True, blank=True)

    def __str__(self):
        return f"Payment by {self.member} for year {self.membership_year}"

    class Meta:
        constraints = [
            models.CheckConstraint(
                check=models.Q(amount__gt=0),
                name='positive_amount'
            ),
            models.CheckConstraint(
                check=models.Q(installment_number__isnull=True) |
                      models.Q(installment_number__gte=1, installment_number__lte=4),
                name='valid_installment_number'
            )
        ]


class Sessions(models.Model):
    """
    Represents a session (game or training)
    """
    SESSION_TYPE_CHOICES = [
        ('game', 'Game'),
        ('training', 'Training'),
    ]
    STATUS_CHOICES = [
        ('scheduled', 'Scheduled'),
        ('completed', 'Completed'),
        ('cancelled', 'Cancelled'),
    ]

    session_id = models.AutoField(primary_key=True)
    session_type = models.CharField(max_length=10, choices=SESSION_TYPE_CHOICES)
    session_date = models.DateField()
    session_time = models.TimeField()
    address = models.CharField(max_length=255)
    city = models.CharField(max_length=50, null=True, blank=True)
    province = models.CharField(max_length=30, null=True, blank=True)
    postal_code = models.CharField(max_length=10, null=True, blank=True)
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='scheduled')
    created_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.session_type.title()} on {self.session_date} at {self.session_time}"

class SessionTeams(models.Model):
    """
    Represents teams for a specific session
    """
    GENDER_CHOICES = [
        ('M', 'Male'),
        ('F', 'Female'),
    ]

    team_id = models.AutoField(primary_key=True)
    session = models.ForeignKey(Sessions, on_delete=models.CASCADE)
    team_name = models.CharField(max_length=100)
    location = models.ForeignKey(Location, on_delete=models.CASCADE)
    head_coach = models.ForeignKey(Personnel, on_delete=models.CASCADE)
    team_number = models.PositiveSmallIntegerField()
    score = models.PositiveIntegerField(null=True, blank=True, default=None)
    gender = models.CharField(max_length=1, choices=GENDER_CHOICES)

    class Meta:
        constraints = [
            models.CheckConstraint(
                check=models.Q(team_number__in=[1, 2]),
                name='valid_team_number'
            ),
            models.UniqueConstraint(
                fields=['session', 'team_number'],
                name='unique_session_team'
            )
        ]

    def __str__(self):
        return f"{self.team_name} (Team {self.team_number}) - {self.session}"


class PlayerAssignment(models.Model):
    """
    Links a club member to a team formation and assigns their role
    """
    POSITION_CHOICES = [
        ('Setter', 'Setter'),
        ('Outside Hitter', 'Outside Hitter'),
        ('Opposite Hitter', 'Opposite Hitter'),
        ('Middle Blocker', 'Middle Blocker'),
        ('Defensive Specialist', 'Defensive Specialist'),
        ('Libero', 'Libero'),
    ]

    roster_id = models.AutoField(primary_key=True)
    team = models.ForeignKey(SessionTeams, on_delete=models.CASCADE)
    member = models.ForeignKey(ClubMember, on_delete=models.CASCADE)
    position = models.CharField(max_length=50, choices=POSITION_CHOICES)
    is_starter = models.BooleanField(default=True)

    class Meta:
        constraints = [
            models.UniqueConstraint(
                fields=['team', 'member'],
                name='unique_member_team'
            )
        ]

    def __str__(self):
        return f"{self.member.first_name} as {self.position} in {self.team.team_name}"
