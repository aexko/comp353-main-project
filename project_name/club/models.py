import uuid

from django.db import models

class Person(models.Model):
    """
    Person model that serves as a base for all people-related models
    """
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    date_of_birth = models.DateField()
    social_security_number = models.CharField(max_length=20, unique=True, null=False, blank=False)
    medicare_card_number = models.CharField(max_length=20, unique=True)
    telephone_number = models.CharField(max_length=20)
    address = models.CharField(max_length=255)
    city = models.CharField(max_length=100)
    province = models.CharField(max_length=100)
    postal_code = models.CharField(max_length=10)
    email_address = models.EmailField(unique=True)

    class Meta:
        abstract = True


class Location(models.Model):
    """
    Represents a club location which can be the head location or a branch
    """
    TYPE_CHOICES = [
        ('Head', 'Head'),
        ('Branch', 'Branch'),
    ]
    type = models.CharField(max_length=10, choices=TYPE_CHOICES)
    name = models.CharField(max_length=255, unique=True)
    address = models.CharField(max_length=255)
    city = models.CharField(max_length=100)
    province = models.CharField(max_length=100)
    postal_code = models.CharField(max_length=10)
    phone_number = models.CharField(max_length=20)
    web_address = models.URLField(blank=True, null=True)
    max_capacity = models.PositiveIntegerField()

    def __str__(self):
        return f"{self.name} ({self.type})"


class Hobby(models.Model):
    """
    A list of hobbies that can be associated with club members
    """
    name = models.CharField(max_length=50, unique=True)

    def __str__(self):
        return self.name


class Log(models.Model):
    """
    Logs every email generated by the system
    """
    date = models.DateTimeField(auto_now_add=True)
    sender = models.CharField(max_length=255)
    receiver = models.EmailField()
    subject = models.CharField(max_length=255)
    body_snippet = models.TextField(max_length=100)

    def __str__(self):
        return f"Email to {self.receiver} on {self.date}"


class Personnel(Person):
    """
    Represents a person working at a club location
    """
    ROLE_CHOICES = [
        ('Administrator', 'Administrator'),
        ('General Manager', 'General Manager'),
        ('Deputy Manager', 'Deputy Manager'),
        ('Treasurer', 'Treasurer'),
        ('Secretary', 'Secretary'),
        ('Captain', 'Captain'),
        ('Coach', 'Coach'),
        ('Assistant Coach', 'Assistant Coach'),
        ('Other', 'Other'),
    ]
    MANDATE_CHOICES = [
        ('Volunteer', 'Volunteer'),
        ('Salaried', 'Salaried'),
    ]
    role = models.CharField(max_length=50, choices=ROLE_CHOICES)
    mandate = models.CharField(max_length=10, choices=MANDATE_CHOICES)

    def __str__(self):
        return f"Personnel: {self.first_name} {self.last_name} ({self.role})"


class PersonnelAssignment(models.Model):
    """
    Links a personnel member to a location with specific dates
    """
    personnel = models.ForeignKey(Personnel, on_delete=models.CASCADE)
    location = models.ForeignKey(Location, on_delete=models.CASCADE)
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True)

    def __str__(self):
        return f"{self.personnel} at {self.location} from {self.start_date}"


class FamilyMember(Person):
    """
    Represents a primary family member who can register minor club members
    """
    location = models.ForeignKey(Location, on_delete=models.SET_NULL, null=True, blank=True)

    def __str__(self):
        return f"Family Member {self.first_name} {self.last_name}"


class SecondaryFamilyMember(models.Model):
    """
    Represents a secondary contact for a family member
    """
    primary_family_member = models.ForeignKey(FamilyMember, on_delete=models.CASCADE, related_name='secondary_contacts')
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    telephone_number = models.CharField(max_length=20)
    relationship = models.CharField(max_length=50)

    def __str__(self):
        return f"Secondary Contact {self.first_name} {self.last_name}"

class ClubMember(Person):
    """
    Represents a club member who can be a minor or an adult
    """
    membership_number = models.UUIDField(default=uuid.uuid4, unique=True, editable=False)
    height = models.DecimalField(max_digits=5, decimal_places=2)
    weight = models.DecimalField(max_digits=5, decimal_places=2)
    hobbies = models.ManyToManyField(Hobby, blank=True)
    location = models.ForeignKey(Location, on_delete=models.SET_NULL, null=True)
    date_joined = models.DateField(auto_now_add=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return f"Member: {self.first_name} {self.last_name}"


class MinorMemberAssociation(models.Model):
    """
    Links a minor club member to a family member and defines their relationship
    """
    RELATIONSHIP_CHOICES = [
        ('Father', 'Father'), ('Mother', 'Mother'), ('Grandfather', 'Grandfather'),
        ('Grandmother', 'Grandmother'), ('Tutor', 'Tutor'), ('Partner', 'Partner'),
        ('Friend', 'Friend'), ('Other', 'Other'),
    ]
    minor_member = models.ForeignKey(ClubMember, on_delete=models.CASCADE)
    family_member = models.ForeignKey(FamilyMember, on_delete=models.CASCADE)
    relationship = models.CharField(max_length=20, choices=RELATIONSHIP_CHOICES)
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True)

    def __str__(self):
        return f"{self.minor_member.first_name} ({self.relationship}) with {self.family_member.first_name}"


class Payment(models.Model):
    """
    Records a payment made by a club member
    """
    METHOD_CHOICES = [
        ('Cash', 'Cash'),
        ('Debit', 'Debit Card'),
        ('Credit', 'Credit Card'),
    ]
    club_member = models.ForeignKey(ClubMember, on_delete=models.CASCADE)
    payment_date = models.DateField()
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    method_of_payment = models.CharField(max_length=10, choices=METHOD_CHOICES)
    for_year = models.PositiveIntegerField()

    def __str__(self):
        return f"Payment by {self.club_member} for year {self.for_year}"


class TeamFormation(models.Model):
    """
    Represents a single team formation for a game or training session
    """
    location = models.ForeignKey(Location, on_delete=models.CASCADE)
    team_name = models.CharField(max_length=100)
    head_coach = models.ForeignKey(Personnel, on_delete=models.CASCADE, related_name='coached_teams')
    session_date = models.DateField()
    start_time = models.TimeField()
    session_address = models.CharField(max_length=255)
    is_game = models.BooleanField(default=False)
    score_team1 = models.PositiveIntegerField(null=True, blank=True)
    score_team2 = models.PositiveIntegerField(null=True, blank=True)

    def __str__(self):
        session_type = "Game" if self.is_game else "Training"
        return f"{self.team_name} {session_type} on {self.session_date} at {self.start_time}"


class PlayerAssignment(models.Model):
    """
    Links a club member to a team formation and assigns their role
    """
    PLAYER_ROLES = [
        ('Setter', 'Setter'),
        ('Outside Hitter', 'Outside Hitter'),
        ('Opposite Hitter', 'Opposite Hitter'),
        ('Middle Blocker', 'Middle Blocker'),
        ('Defensive Specialist', 'Defensive Specialist'),
        ('Libero', 'Libero'),
    ]
    club_member = models.ForeignKey(ClubMember, on_delete=models.CASCADE)
    team_formation = models.ForeignKey(TeamFormation, on_delete=models.CASCADE, related_name='players')
    role = models.CharField(max_length=20, choices=PLAYER_ROLES)

    class Meta:
        # player can only be in a team once per formation
        unique_together = ('club_member', 'team_formation')

    def __str__(self):
        return f"{self.club_member.first_name} as {self.role} in {self.team_formation.team_name}"
